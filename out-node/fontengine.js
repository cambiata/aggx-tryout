// Generated by Haxe 4.0.0-preview.5+80f42bdc3
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
;(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var ExampleFontEngine = function() { };
ExampleFontEngine.__name__ = true;
ExampleFontEngine.main = function() {
	var bytesData = haxe_Resource.getBytes("Pacifico.ttf").b.bufferValue;
	var data = new types_Data(bytesData.byteLength);
	data.set_arrayBuffer(bytesData);
	new aggx_rfpx_TrueTypeLoader(data).load(function(ttc) {
		console.log("src/ExampleFontEngine.hx:46:",Std.string(_$UInt_UInt_$Impl_$.toFloat(ttc._fonts.length)));
		console.log("src/ExampleFontEngine.hx:47:",ttc.getFontName());
		new aggx_typography_FontEngine(ttc).renderString("Hello world!",80,10,0.,new TestRenderer());
		return;
	});
};
var aggx_renderer_IRenderer = function() { };
aggx_renderer_IRenderer.__name__ = true;
aggx_renderer_IRenderer.prototype = {
	__class__: aggx_renderer_IRenderer
};
var TestRenderer = function() {
};
TestRenderer.__name__ = true;
TestRenderer.__interfaces__ = [aggx_renderer_IRenderer];
TestRenderer.prototype = {
	prepare: function() {
		console.log("src/ExampleFontEngine.hx:71:","TestRenderer.prepare ///////////////////////////");
	}
	,render: function(sl) {
		console.log("src/ExampleFontEngine.hx:75:","TestRenderer.render ----------------------------");
		console.log("src/ExampleFontEngine.hx:76:","spanCount: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(sl.get_spanCount())));
		console.log("src/ExampleFontEngine.hx:77:",sl);
	}
	,__class__: TestRenderer
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var aggx_RenderingBuffer = function(width,height,stride) {
	this.attach(width,height,stride);
};
aggx_RenderingBuffer.__name__ = true;
aggx_RenderingBuffer.prototype = {
	attach: function(width,height,stride) {
		this._start = 0;
		this._width = width;
		this._height = height;
		this._stride = stride;
		if(this._stride < 0) {
			this._start = (height - 1) * this._stride;
		}
	}
	,getRowPtr: function(y) {
		return this._start + y * this._stride;
	}
	,getRow: function(y) {
		return new aggx_RowInfo(0,this._width - 1,this._start + y * this._stride);
	}
	,clear: function(value) {
		var y = 0;
		var value1 = this._stride;
		var stride = value1 >= 0 ? value1 : -value1;
		while(_$UInt_UInt_$Impl_$.gt(this._height,y)) {
			var p = this._start + y * this._stride;
			var x = 0;
			while(_$UInt_UInt_$Impl_$.gt(stride,x)) {
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
				aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(value);
				++p;
				++x;
			}
			++y;
		}
	}
	,get_start: function() {
		return this._start;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,get_stride: function() {
		return this._stride;
	}
	,get_strideAbs: function() {
		var value = this._stride;
		if(value >= 0) {
			return value;
		} else {
			return -value;
		}
	}
	,__class__: aggx_RenderingBuffer
};
var aggx_RowInfo = function(ax1,ax2,aptr) {
	this.x1 = ax1;
	this.x2 = ax2;
	this.ptr = aptr;
};
aggx_RowInfo.__name__ = true;
aggx_RowInfo.prototype = {
	__class__: aggx_RowInfo
};
var aggx_color_GammaLookupTable = function(g) {
	this._gamma = 1.0;
	this._dirGamma = new Array(256);
	this._invGamma = new Array(256);
	if(g != null) {
		this._gamma = g;
		var i = 0;
		while(i < 256) {
			this._dirGamma[i] = Math.pow(i / 255,this._gamma) * 255 | 0;
			++i;
		}
		var inv_g = 1.0 / g;
		i = 0;
		while(i < 256) {
			this._invGamma[i] = Math.pow(i / 255,inv_g) * 255 | 0;
			++i;
		}
	} else {
		var i1 = 0;
		while(i1 < 256) {
			this._dirGamma[i1] = i1;
			++i1;
		}
		i1 = 0;
		while(i1 < 256) {
			this._invGamma[i1] = i1;
			++i1;
		}
	}
};
aggx_color_GammaLookupTable.__name__ = true;
aggx_color_GammaLookupTable.prototype = {
	getDirectGamma: function(v) {
		return this._dirGamma[v];
	}
	,getInverseGamma: function(v) {
		return this._invGamma[v];
	}
	,get_gamma: function() {
		return this._gamma;
	}
	,set_gamma: function(value) {
		this._gamma = value;
		var i = 0;
		while(i < 256) {
			this._dirGamma[i] = Math.pow(i / 255,this._gamma) * 255 | 0;
			++i;
		}
		var inv_g = 1.0 / value;
		i = 0;
		while(i < 256) {
			this._invGamma[i] = Math.pow(i / 255,inv_g) * 255 | 0;
			++i;
		}
		return this._gamma;
	}
	,__class__: aggx_color_GammaLookupTable
};
var aggx_color_RgbaColor = function(red,green,blue,alpha) {
	if(alpha == null) {
		alpha = 255;
	}
	if(blue == null) {
		blue = 0;
	}
	if(green == null) {
		green = 0;
	}
	if(red == null) {
		red = 0;
	}
	this.r = red;
	this.g = green;
	this.b = blue;
	this.a = alpha;
};
aggx_color_RgbaColor.__name__ = true;
aggx_color_RgbaColor.fromRgbaColor = function(color) {
	return new aggx_color_RgbaColor(color.r,color.g,color.b,color.a);
};
aggx_color_RgbaColor.fromRgbaColorF = function(color) {
	return new aggx_color_RgbaColor(_$UInt_UInt_$Impl_$.toFloat(256 - 1) * color.r | 0,_$UInt_UInt_$Impl_$.toFloat(256 - 1) * color.g | 0,_$UInt_UInt_$Impl_$.toFloat(256 - 1) * color.b | 0,_$UInt_UInt_$Impl_$.toFloat(256 - 1) * color.a | 0);
};
aggx_color_RgbaColor.empty = function() {
	return new aggx_color_RgbaColor(0,0,0,0);
};
aggx_color_RgbaColor.prototype = {
	setFromColor4F: function(src) {
		this.r = _$UInt_UInt_$Impl_$.toFloat(256 - 1) * src.r | 0;
		this.g = _$UInt_UInt_$Impl_$.toFloat(256 - 1) * src.g | 0;
		this.b = _$UInt_UInt_$Impl_$.toFloat(256 - 1) * src.b | 0;
		this.a = _$UInt_UInt_$Impl_$.toFloat(256 - 1) * src.a | 0;
	}
	,get_opacity: function() {
		return _$UInt_UInt_$Impl_$.toFloat(this.a) / _$UInt_UInt_$Impl_$.toFloat(256 - 1);
	}
	,set_opacity: function(value) {
		if(value < 0.0) {
			value = 0.0;
		}
		if(value > 1.0) {
			value = 1.0;
		}
		this.a = _$UInt_UInt_$Impl_$.toFloat(256 - 1) * value | 0;
		return _$UInt_UInt_$Impl_$.toFloat(this.a);
	}
	,set: function(color) {
		this.a = color.a;
		this.r = color.r;
		this.g = color.g;
		this.b = color.b;
	}
	,clear: function() {
		this.r = this.g = this.b = this.a = 0;
	}
	,makeTransparent: function() {
		this.a = 0;
	}
	,premultiply: function() {
		if(this.a == 256 - 1) {
			return this;
		}
		if(this.a == 0) {
			this.r = this.g = this.b = 0;
			return this;
		}
		this.r = this.r * this.a >>> 8;
		this.g = this.g * this.a >>> 8;
		this.b = this.b * this.a >>> 8;
		return this;
	}
	,premultiplyBy: function(alpha) {
		if(this.a == 256 - 1 && _$UInt_UInt_$Impl_$.gte(alpha,256 - 1)) {
			return this;
		}
		if(this.a == 0 || alpha == 0) {
			this.r = this.g = this.b = this.a = 0;
			return this;
		}
		var red = _$UInt_UInt_$Impl_$.toFloat(this.r * alpha) / _$UInt_UInt_$Impl_$.toFloat(this.a) | 0;
		var green = _$UInt_UInt_$Impl_$.toFloat(this.g * alpha) / _$UInt_UInt_$Impl_$.toFloat(this.a) | 0;
		var blue = _$UInt_UInt_$Impl_$.toFloat(this.b * alpha) / _$UInt_UInt_$Impl_$.toFloat(this.a) | 0;
		this.r = _$UInt_UInt_$Impl_$.gt(red,alpha) ? alpha : red;
		this.g = _$UInt_UInt_$Impl_$.gt(green,alpha) ? alpha : green;
		this.b = _$UInt_UInt_$Impl_$.gt(blue,alpha) ? alpha : blue;
		this.a = alpha;
		return this;
	}
	,demultiply: function() {
		if(this.a == 256 - 1) {
			return this;
		}
		if(this.a == 0) {
			this.r = this.g = this.b = 0;
			return this;
		}
		var red = _$UInt_UInt_$Impl_$.toFloat(this.r * (256 - 1)) / _$UInt_UInt_$Impl_$.toFloat(this.a) | 0;
		var green = _$UInt_UInt_$Impl_$.toFloat(this.g * (256 - 1)) / _$UInt_UInt_$Impl_$.toFloat(this.a) | 0;
		var blue = _$UInt_UInt_$Impl_$.toFloat(this.b * (256 - 1)) / _$UInt_UInt_$Impl_$.toFloat(this.a) | 0;
		this.r = _$UInt_UInt_$Impl_$.gt(red,256 - 1) ? 256 - 1 : red;
		this.g = _$UInt_UInt_$Impl_$.gt(green,256 - 1) ? 256 - 1 : green;
		this.b = _$UInt_UInt_$Impl_$.gt(blue,256 - 1) ? 256 - 1 : blue;
		return this;
	}
	,gradient: function(color,k) {
		var ret = new aggx_color_RgbaColor();
		var ik = _$UInt_UInt_$Impl_$.toFloat(256) * k | 0;
		ret.r = this.r + ((color.r - this.r) * ik >>> 8);
		ret.g = this.g + ((color.g - this.g) * ik >>> 8);
		ret.b = this.b + ((color.b - this.b) * ik >>> 8);
		ret.a = this.a + ((color.a - this.a) * ik >>> 8);
		return ret;
	}
	,add: function(color,cover) {
		var cr;
		var cg;
		var cb;
		var ca;
		if(js_Boot.__cast(cover , Int) == 256 - 1) {
			if(color.a == 256 - 1) {
				this.set(color);
			} else {
				cr = this.r + color.r;
				this.r = _$UInt_UInt_$Impl_$.gt(cr,256 - 1) ? 256 - 1 : cr;
				cg = this.g + color.g;
				this.g = _$UInt_UInt_$Impl_$.gt(cg,256 - 1) ? 256 - 1 : cg;
				cb = this.b + color.b;
				this.b = _$UInt_UInt_$Impl_$.gt(cb,256 - 1) ? 256 - 1 : cb;
				ca = this.a + color.a;
				this.a = _$UInt_UInt_$Impl_$.gt(ca,256 - 1) ? 256 - 1 : ca;
			}
		} else {
			cr = this.r + ((_$UInt_UInt_$Impl_$.toFloat(color.r * cover) + _$UInt_UInt_$Impl_$.toFloat(256 - 1) / _$UInt_UInt_$Impl_$.toFloat(2) | 0) >> 8);
			cg = this.g + ((_$UInt_UInt_$Impl_$.toFloat(color.g * cover) + _$UInt_UInt_$Impl_$.toFloat(256 - 1) / _$UInt_UInt_$Impl_$.toFloat(2) | 0) >> 8);
			cb = this.b + ((_$UInt_UInt_$Impl_$.toFloat(color.b * cover) + _$UInt_UInt_$Impl_$.toFloat(256 - 1) / _$UInt_UInt_$Impl_$.toFloat(2) | 0) >> 8);
			ca = this.a + ((_$UInt_UInt_$Impl_$.toFloat(color.a * cover) + _$UInt_UInt_$Impl_$.toFloat(256 - 1) / _$UInt_UInt_$Impl_$.toFloat(2) | 0) >> 8);
			this.r = _$UInt_UInt_$Impl_$.gt(cr,256 - 1) ? 256 - 1 : cr;
			this.g = _$UInt_UInt_$Impl_$.gt(cg,256 - 1) ? 256 - 1 : cg;
			this.b = _$UInt_UInt_$Impl_$.gt(cb,256 - 1) ? 256 - 1 : cb;
			this.a = _$UInt_UInt_$Impl_$.gt(ca,256 - 1) ? 256 - 1 : ca;
		}
	}
	,applyGammaDir: function(gamma) {
		this.r = gamma.getDirectGamma(this.r);
		this.g = gamma.getDirectGamma(this.g);
		this.b = gamma.getDirectGamma(this.b);
	}
	,applyGammaInv: function(gamma) {
		this.r = gamma.getInverseGamma(this.r);
		this.g = gamma.getInverseGamma(this.g);
		this.b = gamma.getInverseGamma(this.b);
	}
	,toString: function() {
		return "[" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.r)) + ", " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.g)) + ", " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.b)) + ", " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.a)) + "]";
	}
	,__class__: aggx_color_RgbaColor
};
var aggx_color_RgbaColorF = function(r_,g_,b_,a_) {
	if(a_ == null) {
		a_ = 1.0;
	}
	this.r = r_;
	this.g = g_;
	this.b = b_;
	this.a = a_;
};
aggx_color_RgbaColorF.__name__ = true;
aggx_color_RgbaColorF.prototype = {
	toRgbaColor: function() {
		return new aggx_color_RgbaColor(_$UInt_UInt_$Impl_$.toFloat(256 - 1) * this.r | 0,_$UInt_UInt_$Impl_$.toFloat(256 - 1) * this.g | 0,_$UInt_UInt_$Impl_$.toFloat(256 - 1) * this.b | 0,_$UInt_UInt_$Impl_$.toFloat(256 - 1) * this.a | 0);
	}
	,__class__: aggx_color_RgbaColorF
};
var aggx_core_StreamInterface = function() { };
aggx_core_StreamInterface.__name__ = true;
aggx_core_StreamInterface.prototype = {
	__class__: aggx_core_StreamInterface
};
var aggx_core_geometry_ITransformer = function() { };
aggx_core_geometry_ITransformer.__name__ = true;
aggx_core_geometry_ITransformer.prototype = {
	__class__: aggx_core_geometry_ITransformer
};
var aggx_core_geometry_AffineTransformer = function(v0,v1,v2,v3,v4,v5) {
	if(v5 == null) {
		v5 = 0.0;
	}
	if(v4 == null) {
		v4 = 0.0;
	}
	if(v3 == null) {
		v3 = 1.0;
	}
	if(v2 == null) {
		v2 = 0.0;
	}
	if(v1 == null) {
		v1 = 0.0;
	}
	if(v0 == null) {
		v0 = 1.0;
	}
	this.sx = v0;
	this.shy = v1;
	this.shx = v2;
	this.sy = v3;
	this.tx = v4;
	this.ty = v5;
};
aggx_core_geometry_AffineTransformer.__name__ = true;
aggx_core_geometry_AffineTransformer.__interfaces__ = [aggx_core_geometry_ITransformer];
aggx_core_geometry_AffineTransformer.of = function(m) {
	return new aggx_core_geometry_AffineTransformer(m.sx,m.shy,m.shx,m.sy,m.tx,m.ty);
};
aggx_core_geometry_AffineTransformer.rotator = function(a) {
	return new aggx_core_geometry_AffineTransformer(Math.cos(a),Math.sin(a),-Math.sin(a),Math.cos(a),0.0,0.0);
};
aggx_core_geometry_AffineTransformer.scaler = function(x,y) {
	if(y == null) {
		y = x;
	}
	return new aggx_core_geometry_AffineTransformer(x,0.0,0.0,y,0.0,0.0);
};
aggx_core_geometry_AffineTransformer.skewer = function(x,y) {
	return new aggx_core_geometry_AffineTransformer(1.0,Math.tan(y),Math.tan(x),1.0,0.0,0.0);
};
aggx_core_geometry_AffineTransformer.translator = function(x,y) {
	return new aggx_core_geometry_AffineTransformer(1.0,0.0,0.0,1.0,x,y);
};
aggx_core_geometry_AffineTransformer.prototype = {
	toString: function() {
		return "{" + this.sx + ", " + this.shy + ", " + this.shx + ", " + this.sy + ", " + this.tx + ", " + this.ty + "}";
	}
	,set: function(v0,v1,v2,v3,v4,v5) {
		this.sx = v0;
		this.shy = v1;
		this.shx = v2;
		this.sy = v3;
		this.tx = v4;
		this.ty = v5;
	}
	,parlToParl: function(src,dst) {
		this.sx = src[2] - src[0];
		this.shy = src[3] - src[1];
		this.shx = src[4] - src[0];
		this.sy = src[5] - src[1];
		this.tx = src[0];
		this.ty = src[1];
		this.invert();
		this.multiply(new aggx_core_geometry_AffineTransformer(dst[2] - dst[0],dst[3] - dst[1],dst[4] - dst[0],dst[5] - dst[1],dst[0],dst[1]));
		return this;
	}
	,rectToParl: function(x1,y1,x2,y2,parl) {
		var src = new Array(6);
		src[0] = x1;
		src[1] = y1;
		src[2] = x2;
		src[3] = y1;
		src[4] = x2;
		src[5] = y2;
		this.parlToParl(src,parl);
		return this;
	}
	,parlToRect: function(parl,x1,y1,x2,y2) {
		var dst = new Array(6);
		dst[0] = x1;
		dst[1] = y1;
		dst[2] = x2;
		dst[3] = y1;
		dst[4] = x2;
		dst[5] = y2;
		this.parlToParl(parl,dst);
		return this;
	}
	,multiply: function(m) {
		var t0 = this.sx * m.sx + this.shy * m.shx;
		var t2 = this.shx * m.sx + this.sy * m.shx;
		var t4 = this.tx * m.sx + this.ty * m.shx + m.tx;
		this.shy = this.sx * m.shy + this.shy * m.sy;
		this.sy = this.shx * m.shy + this.sy * m.sy;
		this.ty = this.tx * m.shy + this.ty * m.sy + m.ty;
		this.sx = t0;
		this.shx = t2;
		this.tx = t4;
		return this;
	}
	,invert: function() {
		var d = 1.0 / (this.sx * this.sy - this.shy * this.shx);
		var t0 = this.sy * d;
		this.sy = this.sx * d;
		this.shy = -this.shy * d;
		this.shx = -this.shx * d;
		var t4 = -this.tx * t0 - this.ty * this.shx;
		this.ty = -this.tx * this.shy - this.ty * this.sy;
		this.sx = t0;
		this.tx = t4;
		return this;
	}
	,flipX: function() {
		this.sx = -this.sx;
		this.shy = -this.shy;
		this.tx = -this.tx;
		return this;
	}
	,flipY: function() {
		this.shx = -this.shx;
		this.sy = -this.sy;
		this.ty = -this.ty;
		return this;
	}
	,reset: function() {
		this.sx = this.sy = 1.0;
		this.shy = this.shx = this.tx = this.ty = 0.0;
		return this;
	}
	,isIdentity: function(epsilon) {
		if(epsilon == null) {
			epsilon = 1e-14;
		}
		if(Math.abs(this.sx - 1.0) <= epsilon && Math.abs(this.shy) <= epsilon && Math.abs(this.shx) <= epsilon && Math.abs(this.sy - 1.0) <= epsilon && Math.abs(this.tx) <= epsilon) {
			return Math.abs(this.ty) <= epsilon;
		} else {
			return false;
		}
	}
	,isValid: function(epsilon) {
		if(epsilon == null) {
			epsilon = 1e-14;
		}
		if(Math.abs(this.sx) > epsilon) {
			return Math.abs(this.sy) > epsilon;
		} else {
			return false;
		}
	}
	,isEqual: function(m,epsilon) {
		if(epsilon == null) {
			epsilon = 1e-14;
		}
		if(Math.abs(this.sx - m.sx) <= epsilon && Math.abs(this.shy - m.shy) <= epsilon && Math.abs(this.shx - m.shx) <= epsilon && Math.abs(this.sy - m.sy) <= epsilon && Math.abs(this.tx - m.tx) <= epsilon) {
			return Math.abs(this.ty - m.ty) <= epsilon;
		} else {
			return false;
		}
	}
	,transform: function(x,y) {
		var tmp = x.value;
		x.value = tmp * this.sx + y.value * this.shx + this.tx;
		y.value = tmp * this.shy + y.value * this.sy + this.ty;
	}
	,transform2x2: function(x,y) {
		var tmp = x.value;
		x.value = tmp * this.sx + y.value * this.shx;
		y.value = tmp * this.shy + y.value * this.sy;
	}
	,transformInverse: function(x,y) {
		var d = 1.0 / (this.sx * this.sy - this.shy * this.shx);
		var a = (x.value - this.tx) * d;
		var b = (y.value - this.ty) * d;
		x.value = a * this.sy - b * this.shx;
		y.value = b * this.sx - a * this.shy;
	}
	,setScaling: function(x,y) {
		if(y != null) {
			this.sx *= x;
			this.shx *= x;
			this.tx *= x;
			this.shy *= y;
			this.sy *= y;
			this.ty *= y;
		} else {
			this.sx *= x;
			this.shx *= x;
			this.tx *= x;
			this.shy *= x;
			this.sy *= x;
			this.ty *= x;
		}
		return this;
	}
	,setTranslation: function(x,y) {
		this.tx += x;
		this.ty += y;
		return this;
	}
	,setRotation: function(a) {
		var ca = Math.cos(a);
		var sa = Math.sin(a);
		var t0 = this.sx * ca - this.shy * sa;
		var t2 = this.shx * ca - this.sy * sa;
		var t4 = this.tx * ca - this.ty * sa;
		this.shy = this.sx * sa + this.shy * ca;
		this.sy = this.shx * sa + this.sy * ca;
		this.ty = this.tx * sa + this.ty * ca;
		this.sx = t0;
		this.shx = t2;
		this.tx = t4;
		return this;
	}
	,premultiply: function(m) {
		var t0 = aggx_core_geometry_AffineTransformer.of(m).multiply(this);
		this.set(t0.sx,t0.shy,t0.shx,t0.sy,t0.tx,t0.ty);
		return this;
	}
	,multiplyInverse: function(m) {
		var t = aggx_core_geometry_AffineTransformer.of(m);
		t.invert();
		return this.multiply(t);
	}
	,premultiplyInverse: function(m) {
		var t = aggx_core_geometry_AffineTransformer.of(m);
		t.invert();
		var t0 = t.multiply(this);
		this.set(t0.sx,t0.shy,t0.shx,t0.sy,t0.tx,t0.ty);
		return this;
	}
	,scaleAbs: function(x,y) {
		x.value = Math.sqrt(this.sx * this.sx + this.shx * this.shx);
		y.value = Math.sqrt(this.shy * this.shy + this.sy * this.sy);
	}
	,translate: function(dx,dy) {
		dx.value = this.tx;
		dy.value = this.ty;
	}
	,scale: function(x,y) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = 0.0;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = 0.0;
		var _this2 = aggx_core_memory_Ref.getFloat();
		_this2.value = 1.0;
		var _this3 = aggx_core_memory_Ref.getFloat();
		_this3.value = 1.0;
		var t = aggx_core_geometry_AffineTransformer.of(this);
		var _this4 = aggx_core_memory_Ref.getFloat();
		_this4.value = 0.0;
		var _this5 = aggx_core_memory_Ref.getFloat();
		_this5.value = 0.0;
		var _this6 = aggx_core_memory_Ref.getFloat();
		_this6.value = 1.0;
		var _this7 = aggx_core_memory_Ref.getFloat();
		_this7.value = 0.0;
		this.transform(_this4,_this5);
		this.transform(_this6,_this7);
		t = t.multiply(aggx_core_geometry_AffineTransformer.rotator(-Math.atan2(aggx_core_memory_Ref.putFloat(_this7).value - aggx_core_memory_Ref.putFloat(_this5).value,aggx_core_memory_Ref.putFloat(_this6).value - aggx_core_memory_Ref.putFloat(_this4).value)));
		t.transform(_this,_this1);
		t.transform(_this2,_this3);
		x.value = aggx_core_memory_Ref.putFloat(_this2).value - aggx_core_memory_Ref.putFloat(_this).value;
		y.value = aggx_core_memory_Ref.putFloat(_this3).value - aggx_core_memory_Ref.putFloat(_this1).value;
	}
	,get_determinant: function() {
		return this.sx * this.sy - this.shy * this.shx;
	}
	,get_determinantReciprocal: function() {
		return 1.0 / (this.sx * this.sy - this.shy * this.shx);
	}
	,get_scaling: function() {
		var x = 0.707106781 * this.sx + 0.707106781 * this.shx;
		var y = 0.707106781 * this.shy + 0.707106781 * this.sy;
		return Math.sqrt(x * x + y * y);
	}
	,get_rotation: function() {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = 0.0;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = 0.0;
		var _this2 = aggx_core_memory_Ref.getFloat();
		_this2.value = 1.0;
		var _this3 = aggx_core_memory_Ref.getFloat();
		_this3.value = 0.0;
		this.transform(_this,_this1);
		this.transform(_this2,_this3);
		return Math.atan2(aggx_core_memory_Ref.putFloat(_this3).value - aggx_core_memory_Ref.putFloat(_this1).value,aggx_core_memory_Ref.putFloat(_this2).value - aggx_core_memory_Ref.putFloat(_this).value);
	}
	,__class__: aggx_core_geometry_AffineTransformer
};
var aggx_core_geometry_Coord = function(x_,y_) {
	this.x = x_;
	this.y = y_;
};
aggx_core_geometry_Coord.__name__ = true;
aggx_core_geometry_Coord.prototype = {
	toString: function() {
		return "{x: " + this.x + ", y: " + this.y + "}";
	}
	,__class__: aggx_core_geometry_Coord
};
var aggx_core_geometry_RectBox = function(x1_,y1_,x2_,y2_) {
	this.x1 = x1_;
	this.y1 = y1_;
	this.x2 = x2_;
	this.y2 = y2_;
};
aggx_core_geometry_RectBox.__name__ = true;
aggx_core_geometry_RectBox.create = function() {
	return new aggx_core_geometry_RectBox(0.,0.,0.,0.);
};
aggx_core_geometry_RectBox.prototype = {
	init: function(x1_,y1_,x2_,y2_) {
		this.x1 = x1_;
		this.y1 = y1_;
		this.x2 = x2_;
		this.y2 = y2_;
	}
	,normalize: function() {
		var t;
		if(this.x1 > this.x2) {
			t = this.x1;
			this.x1 = this.x2;
			this.x2 = t;
		}
		if(this.y1 > this.y2) {
			t = this.y1;
			this.y1 = this.y2;
			this.y2 = t;
		}
		return this;
	}
	,clip: function(r) {
		if(this.x2 > r.x2) {
			this.x2 = r.x2;
		}
		if(this.y2 > r.y2) {
			this.y2 = r.y2;
		}
		if(this.x1 < r.x1) {
			this.x1 = r.x1;
		}
		if(this.y1 < r.y1) {
			this.y1 = r.y1;
		}
		if(this.x1 <= this.x2) {
			return this.y1 <= this.y2;
		} else {
			return false;
		}
	}
	,isValid: function() {
		if(this.x1 <= this.x2) {
			return this.y1 <= this.y2;
		} else {
			return false;
		}
	}
	,hitTest: function(x,y) {
		if(x >= this.x1 && x <= this.x2 && y >= this.y1) {
			return y <= this.y2;
		} else {
			return false;
		}
	}
	,__class__: aggx_core_geometry_RectBox
};
var aggx_core_geometry_RectBoxI = function(x1_,y1_,x2_,y2_) {
	this.x1 = x1_;
	this.y1 = y1_;
	this.x2 = x2_;
	this.y2 = y2_;
};
aggx_core_geometry_RectBoxI.__name__ = true;
aggx_core_geometry_RectBoxI.create = function() {
	return new aggx_core_geometry_RectBoxI(0,0,0,0);
};
aggx_core_geometry_RectBoxI.prototype = {
	init: function(x1_,y1_,x2_,y2_) {
		this.x1 = x1_;
		this.y1 = y1_;
		this.x2 = x2_;
		this.y2 = y2_;
	}
	,normalize: function() {
		var t;
		if(this.x1 > this.x2) {
			t = this.x1;
			this.x1 = this.x2;
			this.x2 = t;
		}
		if(this.y1 > this.y2) {
			t = this.y1;
			this.y1 = this.y2;
			this.y2 = t;
		}
		return this;
	}
	,clip: function(r) {
		if(this.x2 > r.x2) {
			this.x2 = r.x2;
		}
		if(this.y2 > r.y2) {
			this.y2 = r.y2;
		}
		if(this.x1 < r.x1) {
			this.x1 = r.x1;
		}
		if(this.y1 < r.y1) {
			this.y1 = r.y1;
		}
		if(this.x1 <= this.x2) {
			return this.y1 <= this.y2;
		} else {
			return false;
		}
	}
	,isValid: function() {
		if(this.x1 <= this.x2) {
			return this.y1 <= this.y2;
		} else {
			return false;
		}
	}
	,hitTest: function(x,y) {
		if(x >= this.x1 && x <= this.x2 && y >= this.y1) {
			return y <= this.y2;
		} else {
			return false;
		}
	}
	,__class__: aggx_core_geometry_RectBoxI
};
var aggx_core_geometry_Vector2D = function() {
};
aggx_core_geometry_Vector2D.__name__ = true;
aggx_core_geometry_Vector2D.$length = function(vector) {
	return Math.sqrt(aggx_core_geometry_Vector2D.lengthSquared(vector));
};
aggx_core_geometry_Vector2D.lengthSquared = function(vector) {
	return vector.x * vector.x + vector.y * vector.y;
};
aggx_core_geometry_Vector2D.dotProduct = function(left,right) {
	return left.x * right.x + left.y * right.y;
};
aggx_core_geometry_Vector2D.distance = function(start,end) {
	aggx_core_geometry_Vector2D.distanceVector2.set(end);
	aggx_core_geometry_Vector2D.distanceVector2.subtract(start);
	return aggx_core_geometry_Vector2D.$length(aggx_core_geometry_Vector2D.distanceVector2);
};
aggx_core_geometry_Vector2D.prototype = {
	set: function(other) {
		this.x = other.x;
		this.y = other.y;
	}
	,setXY: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,subtract: function(right) {
		this.x -= right.x;
		this.y -= right.y;
	}
	,__class__: aggx_core_geometry_Vector2D
};
var aggx_core_math_Calc = function() { };
aggx_core_math_Calc.__name__ = true;
aggx_core_math_Calc.min = function(value1,value2) {
	if(value1 < value2) {
		return value1;
	} else {
		return value2;
	}
};
aggx_core_math_Calc.umin = function(value1,value2) {
	if(_$UInt_UInt_$Impl_$.gt(value2,value1)) {
		return value1;
	} else {
		return value2;
	}
};
aggx_core_math_Calc.max = function(value1,value2) {
	if(value1 > value2) {
		return value1;
	} else {
		return value2;
	}
};
aggx_core_math_Calc.umax = function(value1,value2) {
	if(_$UInt_UInt_$Impl_$.gt(value1,value2)) {
		return value1;
	} else {
		return value2;
	}
};
aggx_core_math_Calc.int = function(value) {
	if(value) {
		return 1;
	} else {
		return 0;
	}
};
aggx_core_math_Calc.abs = function(value) {
	if(value >= 0) {
		return value;
	} else {
		return -value;
	}
};
aggx_core_math_Calc.uabs = function(value) {
	if(_$UInt_UInt_$Impl_$.gte(value,0)) {
		return value;
	} else {
		return -value;
	}
};
aggx_core_math_Calc.fabs = function(value) {
	return Math.abs(value);
};
aggx_core_math_Calc.iround = function(value) {
	return (value < 0.0 ? value - 0.5 : value + 0.5) | 0;
};
aggx_core_math_Calc.sbyte = function(value) {
	return value << 24 >> 24;
};
aggx_core_math_Calc.sshort = function(value) {
	return value << 16 >> 16;
};
aggx_core_math_Calc.distance = function(x1,y1,x2,y2) {
	var __dx = x2 - x1;
	var __dy = y2 - y1;
	return Math.sqrt(__dx * __dx + __dy * __dy);
};
aggx_core_math_Calc.squaredDistance = function(x1,y1,x2,y2) {
	var dx = x2 - x1;
	var dy = y2 - y1;
	return dx * dx + dy * dy;
};
aggx_core_math_Calc.crossProduct = function(x1,y1,x2,y2,x,y) {
	return (x - x2) * (y2 - y1) - (y - y2) * (x2 - x1);
};
aggx_core_math_Calc.intersection = function(ax,ay,bx,by,cx,cy,dx,dy,x,y) {
	var __res = false;
	var __den = (bx - ax) * (dy - cy) - (by - ay) * (dx - cx);
	if(!(Math.abs(__den) < 1.0e-30)) {
		var r = ((ay - cy) * (dx - cx) - (ax - cx) * (dy - cy)) / __den;
		x.value = ax + r * (bx - ax);
		y.value = ay + r * (by - ay);
		__res = true;
	}
	return __res;
};
aggx_core_math_Calc.isEqualEps = function(v1,v2,epsilon) {
	return Math.abs(v1 - v2) <= epsilon;
};
aggx_core_math_Calc.calcPolygonArea = function(st) {
	var sum = 0.0;
	var x = st._storage[0].x;
	var y = st._storage[0].y;
	var xs = x;
	var ys = y;
	var _g = 1;
	var _g1 = st._storage.length;
	while(_g < _g1) {
		var v = st._storage[_g++];
		sum += x * v.y - y * v.x;
		x = v.x;
		y = v.y;
	}
	return (sum + x * ys - y * xs) * 0.5;
};
aggx_core_math_Calc.deg2rad = function(degree) {
	return degree * 0.01745329251994329576;
};
aggx_core_math_Calc.intAbs = function(x) {
	if(x < 0) {
		return ~x + 1;
	} else {
		return x;
	}
};
aggx_core_math_Calc.posIntDiv = function(num,denom) {
	var a = 0;
	var b = 0;
	var i = 31;
	while(i >= 0) {
		a = (a << 1) + ((num & 1 << i) >> i);
		b <<= 1;
		if(a >= denom) {
			a -= denom;
			++b;
		}
		--i;
	}
	return b;
};
aggx_core_math_Calc.intDivDynamic = function(a,b) {
	var dividend = a < 0 ? ~a + 1 : a;
	var divisor = b < 0 ? ~b + 1 : b;
	if(divisor == 0) {
		return 0;
	} else if(divisor > dividend) {
		return 0;
	} else if(divisor == dividend) {
		return 1;
	} else {
		var a1 = 0;
		var b1 = 0;
		var i = 31;
		while(i >= 0) {
			a1 = (a1 << 1) + ((dividend & 1 << i) >> i);
			b1 <<= 1;
			if(a1 >= divisor) {
				a1 -= divisor;
				++b1;
			}
			--i;
		}
		var quotient = b1;
		if(a < 0) {
			if(b > 0) {
				return ~quotient + 1;
			} else {
				return quotient;
			}
		} else if(b < 0) {
			return ~quotient + 1;
		} else {
			return quotient;
		}
	}
};
var aggx_core_memory_MemoryAccess = function() { };
aggx_core_memory_MemoryAccess.__name__ = true;
aggx_core_memory_MemoryAccess.select = function(b) {
	aggx_core_memory_MemoryAccess.domainMemory = b;
};
aggx_core_memory_MemoryAccess.writeBytes = function(bytes,offset,size) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(offset);
	bytes.set_offsetLength(size);
	aggx_core_memory_MemoryAccess.domainMemory.writeData(bytes);
};
aggx_core_memory_MemoryAccess.getUTF8String = function(addr,len) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.set_offsetLength(len);
	return types_DataStringTools.readString(aggx_core_memory_MemoryAccess.domainMemory);
};
aggx_core_memory_MemoryAccess.setUInt8 = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(v);
};
aggx_core_memory_MemoryAccess.setInt16 = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt16(v);
};
aggx_core_memory_MemoryAccess.setInt32 = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_core_memory_MemoryAccess.setFloat32 = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeFloat32(v);
};
aggx_core_memory_MemoryAccess.setFloat64 = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeFloat64(v);
};
aggx_core_memory_MemoryAccess.getUInt8 = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_MemoryAccess.getUInt16 = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt16();
};
aggx_core_memory_MemoryAccess.getInt32 = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_core_memory_MemoryAccess.getFloat32 = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readFloat32();
};
aggx_core_memory_MemoryAccess.getFloat64 = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readFloat64();
};
aggx_core_memory_MemoryAccess.signExtend1 = function(v) {
	return v;
};
aggx_core_memory_MemoryAccess.signExtend8 = function(v) {
	return v;
};
aggx_core_memory_MemoryAccess.signExtend16 = function(v) {
	return v;
};
var aggx_core_memory_MemoryReader = function() { };
aggx_core_memory_MemoryReader.__name__ = true;
aggx_core_memory_MemoryReader.getChar = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8() << 24 >> 24;
};
aggx_core_memory_MemoryReader.getByte = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_MemoryReader.getShort = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt16() << 16 >> 16;
};
aggx_core_memory_MemoryReader.getUShort = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt16();
};
aggx_core_memory_MemoryReader.getInt = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_core_memory_MemoryReader.getUInt = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_core_memory_MemoryReader.getFloat = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readFloat32();
};
aggx_core_memory_MemoryReader.getDouble = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readFloat64();
};
aggx_core_memory_MemoryReader.getString = function(addr,len) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.set_offsetLength(len);
	return types_DataStringTools.readString(aggx_core_memory_MemoryAccess.domainMemory);
};
var aggx_core_memory_MemoryReaderEx = function() { };
aggx_core_memory_MemoryReaderEx.__name__ = true;
aggx_core_memory_MemoryReaderEx.getChar = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8() << 24 >> 24;
};
aggx_core_memory_MemoryReaderEx.getByte = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_MemoryReaderEx.getInt = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	var x0 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	return (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
};
aggx_core_memory_MemoryReaderEx.dataGetInt = function(data) {
	var x0 = data.readInt32();
	return (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
};
aggx_core_memory_MemoryReaderEx.getUInt = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	var x0 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	return (x0 >>> 0 & 255) << 24 | (x0 >>> 8 & 255) << 16 | (x0 >>> 16 & 255) << 8 | x0 >>> 24 & 255;
};
aggx_core_memory_MemoryReaderEx.dataGetUInt = function(data) {
	var x0 = data.readInt32();
	return (x0 >>> 0 & 255) << 24 | (x0 >>> 8 & 255) << 16 | (x0 >>> 16 & 255) << 8 | x0 >>> 24 & 255;
};
aggx_core_memory_MemoryReaderEx.getShort = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	var x0 = aggx_core_memory_MemoryAccess.domainMemory.readUInt16();
	return ((x0 & 255) << 8 | x0 >> 8 & 255) << 16 >> 16;
};
aggx_core_memory_MemoryReaderEx.dataGetShort = function(data) {
	var x0 = data.readUInt16();
	return ((x0 & 255) << 8 | x0 >> 8 & 255) << 16 >> 16;
};
aggx_core_memory_MemoryReaderEx.getUShort = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	var x0 = aggx_core_memory_MemoryAccess.domainMemory.readUInt16();
	return (x0 & 255) << 8 | x0 >> 8 & 255;
};
aggx_core_memory_MemoryReaderEx.dataGetUShort = function(data) {
	var x0 = data.readUInt16();
	return (x0 & 255) << 8 | x0 >> 8 & 255;
};
aggx_core_memory_MemoryReaderEx.getFloat = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readFloat32();
};
aggx_core_memory_MemoryReaderEx.getDouble = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	return aggx_core_memory_MemoryAccess.domainMemory.readFloat64();
};
var aggx_core_memory_MemoryUtils = function() { };
aggx_core_memory_MemoryUtils.__name__ = true;
aggx_core_memory_MemoryUtils.set = function(dst,val,size) {
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(size,i)) {
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(dst);
		aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(val);
		++dst;
		++i;
	}
};
aggx_core_memory_MemoryUtils.dataSet = function(data,dst,val,size) {
	var tmpOffset = data.get_offset();
	data.set_offset(dst);
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		++_g;
		data.writeUInt8(val);
		data.set_offset(data.get_offset() + 1);
	}
	data.set_offset(tmpOffset);
};
var aggx_core_memory_MemoryWriter = function() { };
aggx_core_memory_MemoryWriter.__name__ = true;
aggx_core_memory_MemoryWriter.setByte = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(v);
};
aggx_core_memory_MemoryWriter.setShort = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt16(v);
};
aggx_core_memory_MemoryWriter.setInt = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_core_memory_MemoryWriter.setUInt = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_core_memory_MemoryWriter.setFloat = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeFloat32(v);
};
aggx_core_memory_MemoryWriter.setDouble = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeFloat64(v);
};
var aggx_core_memory__$Ref_RefBase = function(val) {
	this.value = val;
};
aggx_core_memory__$Ref_RefBase.__name__ = true;
aggx_core_memory__$Ref_RefBase.prototype = {
	set: function(val) {
		this.value = val;
		return this;
	}
	,toString: function() {
		return "" + Std.string(this.value);
	}
	,__class__: aggx_core_memory__$Ref_RefBase
};
var aggx_core_memory_FloatRef = function() {
};
aggx_core_memory_FloatRef.__name__ = true;
aggx_core_memory_FloatRef.prototype = {
	set: function(val) {
		this.value = val;
		return this;
	}
	,toString: function() {
		return "" + this.value;
	}
	,__class__: aggx_core_memory_FloatRef
};
var aggx_core_memory_Ref = function() { };
aggx_core_memory_Ref.__name__ = true;
aggx_core_memory_Ref.getInt = function() {
	var result;
	if(aggx_core_memory_Ref.intPool.length > 0) {
		result = aggx_core_memory_Ref.intPool.pop();
	} else {
		result = new aggx_core_memory__$Ref_RefBase();
	}
	result.value = 0;
	return result;
};
aggx_core_memory_Ref.putInt = function(value) {
	aggx_core_memory_Ref.intPool.push(value);
	return value;
};
aggx_core_memory_Ref.getFloat = function() {
	var result;
	if(aggx_core_memory_Ref.floatPool.length > 0) {
		result = aggx_core_memory_Ref.floatPool.pop();
	} else {
		result = new aggx_core_memory_FloatRef();
	}
	result.value = 0.0;
	return result;
};
aggx_core_memory_Ref.putFloat = function(value) {
	aggx_core_memory_Ref.floatPool.push(value);
	return value;
};
aggx_core_memory_Ref.getPointer = function() {
	return new aggx_core_memory__$Ref_RefBase();
};
var aggx_core_memory_RgbaReaderWriter = function() { };
aggx_core_memory_RgbaReaderWriter.__name__ = true;
aggx_core_memory_RgbaReaderWriter.getR = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_RgbaReaderWriter.getG = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 1);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_RgbaReaderWriter.getB = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 2);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_RgbaReaderWriter.getA = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 3);
	return aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
};
aggx_core_memory_RgbaReaderWriter.setR = function(addr,val) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(val);
};
aggx_core_memory_RgbaReaderWriter.setG = function(addr,val) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 1);
	aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(val);
};
aggx_core_memory_RgbaReaderWriter.setB = function(addr,val) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 2);
	aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(val);
};
aggx_core_memory_RgbaReaderWriter.setA = function(addr,val) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 3);
	aggx_core_memory_MemoryAccess.domainMemory.writeUInt8(val);
};
aggx_core_memory_RgbaReaderWriter.setFull = function(addr,r,g,b,a) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
};
var aggx_core_utils_ArrayUtil = function() { };
aggx_core_utils_ArrayUtil.__name__ = true;
aggx_core_utils_ArrayUtil.alloc = function(x) {
	var a = [];
	var _g = 0;
	while(_g < x) a[_g++] = null;
	return a;
};
aggx_core_utils_ArrayUtil.shrink = function(a,x) {
	if(a.length > x) {
		a.length = x;
	}
	return a;
};
var aggx_core_utils_Bits = function() { };
aggx_core_utils_Bits.__name__ = true;
aggx_core_utils_Bits.getBits = function(x,mask) {
	return x & mask;
};
aggx_core_utils_Bits.hasBits = function(x,mask) {
	return (x & mask) != 0;
};
aggx_core_utils_Bits.incBits = function(x,mask) {
	return (x & mask) == mask;
};
aggx_core_utils_Bits.setBits = function(x,mask) {
	return x | mask;
};
aggx_core_utils_Bits.clrBits = function(x,mask) {
	return x & ~mask;
};
aggx_core_utils_Bits.invBits = function(x,mask) {
	return x ^ mask;
};
aggx_core_utils_Bits.setBitsIf = function(x,mask,expr) {
	if(expr) {
		return x | mask;
	} else {
		return x & ~mask;
	}
};
aggx_core_utils_Bits.hasBitAt = function(x,i) {
	return (x & 1 << i) != 0;
};
aggx_core_utils_Bits.setBitAt = function(x,i) {
	return x | 1 << i;
};
aggx_core_utils_Bits.clrBitAt = function(x,i) {
	return x & ~(1 << i);
};
aggx_core_utils_Bits.invBitAt = function(x,i) {
	return x ^ 1 << i;
};
aggx_core_utils_Bits.setBitsRange = function(x,min,max) {
	var _g = min;
	while(_g < max) x |= 1 << _g++;
	return x;
};
aggx_core_utils_Bits.mask = function(n) {
	return (1 << n) - 1;
};
aggx_core_utils_Bits.ones = function(x) {
	x -= x >> 1 & 1431655765;
	x = (x >> 2 & 858993459) + (x & 858993459);
	x = (x >> 4) + x & 252645135;
	x += x >> 8;
	x += x >> 16;
	return x & 63;
};
aggx_core_utils_Bits.ntz = function(x) {
	if(x == 0) {
		return 0;
	} else {
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(956);
		if(aggx_core_memory_MemoryAccess.domainMemory.readUInt8() != 31) {
			var x1 = 125613361;
			var _g = 0;
			while(_g < 32) {
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(js_Boot.__cast(1020 - (x1 >>> 27 << 2) , Int));
				aggx_core_memory_MemoryAccess.domainMemory.writeInt32(_g++);
				x1 <<= 1;
			}
		}
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(js_Boot.__cast(1020 - ((x & -x) * 125613361 >>> 27 << 2) , Int));
		return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	}
};
aggx_core_utils_Bits.nlz = function(x) {
	if(x < 0) {
		return 0;
	} else {
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		var x1 = x |= x >> 16;
		x1 -= x1 >> 1 & 1431655765;
		x1 = (x1 >> 2 & 858993459) + (x1 & 858993459);
		x1 = (x1 >> 4) + x1 & 252645135;
		x1 += x1 >> 8;
		x1 += x1 >> 16;
		return 32 - (x1 & 63);
	}
};
aggx_core_utils_Bits.msb = function(x) {
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	return x & ~(x >>> 1);
};
aggx_core_utils_Bits.rol = function(x,n) {
	return x << n | x >>> 32 - n;
};
aggx_core_utils_Bits.ror = function(x,n) {
	return x >>> n | x << 32 - n;
};
aggx_core_utils_Bits.reverse = function(x) {
	x = x >> 1 & 1431655765 | (x & 1431655765) << 1;
	x = x >> 2 & 858993459 | (x & 858993459) << 2;
	x = x >> 4 & 252645135 | (x & 252645135) << 4;
	x = x >> 8 & 16711935 | (x & 16711935) << 8;
	return x >> 16 | x << 16;
};
aggx_core_utils_Bits.flipWORD = function(x) {
	return x << 8 | x >> 8;
};
aggx_core_utils_Bits.flipDWORD = function(x) {
	return x << 24 | x << 8 & 16711680 | x >> 8 & 65280 | x >> 24;
};
aggx_core_utils_Bits.packI16 = function(lo,hi) {
	return hi + 32768 << 16 | lo + 32768;
};
aggx_core_utils_Bits.unpackI16Lo = function(x) {
	return (x & 65535) - 32768;
};
aggx_core_utils_Bits.unpackI16Hi = function(x) {
	return (x >>> 16) - 32768;
};
var aggx_core_utils_DataPointer = function(data) {
	this.offset = 0;
	this.data = data;
};
aggx_core_utils_DataPointer.__name__ = true;
aggx_core_utils_DataPointer.prototype = {
	get: function(add) {
		if(add == null) {
			add = 0;
		}
		this.data.set_offset(this.offset + add);
		return this.data;
	}
	,setInt32: function(v) {
		this.data.set_offset(this.offset);
		this.data.writeInt32(v);
	}
	,getInt32: function() {
		this.data.set_offset(this.offset);
		return this.data.readInt32();
	}
	,__class__: aggx_core_utils_DataPointer
};
var aggx_core_utils_Debug = function() { };
aggx_core_utils_Debug.__name__ = true;
aggx_core_utils_Debug.brk = function() {
	try {
		throw new js__$Boot_HaxeError("__dummy__");
	} catch( ex ) {
		if(typeof(((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex) != "string") {
			throw ex;
		}
	}
};
aggx_core_utils_Debug.calledFrom = function() {
	var stack = haxe_CallStack.callStack();
	if(stack.length < 3) {
		return "";
	}
	return "" + Std.string(stack[2]);
};
aggx_core_utils_Debug.assert = function(condition,message) {
	if(!condition) {
		var stack = haxe_CallStack.callStack();
		console.log("src/aggx/core/utils/Debug.hx:33:","Failed assert: " + message + " caller: " + (stack.length < 3 ? "" : "" + Std.string(stack[2])));
		aggx_core_utils_Debug.brk();
	}
	return condition;
};
var aggx_rasterizer_ClippingScanlineRasterizer = function() {
	this._x1 = 0;
	this._y1 = 0;
	this._f1 = 0;
	this._clippingBox = new aggx_core_geometry_RectBox();
	this._isClipping = false;
};
aggx_rasterizer_ClippingScanlineRasterizer.__name__ = true;
aggx_rasterizer_ClippingScanlineRasterizer.mulDiv = function(a,b,c) {
	return a * b / c;
};
aggx_rasterizer_ClippingScanlineRasterizer.xi = function(v) {
	var value = v * 256;
	return (value < 0.0 ? value - 0.5 : value + 0.5) | 0;
};
aggx_rasterizer_ClippingScanlineRasterizer.yi = function(v) {
	var value = v * 256;
	return (value < 0.0 ? value - 0.5 : value + 0.5) | 0;
};
aggx_rasterizer_ClippingScanlineRasterizer.upscale = function(v) {
	return v;
};
aggx_rasterizer_ClippingScanlineRasterizer.downscale = function(v) {
	return v / 256;
};
aggx_rasterizer_ClippingScanlineRasterizer.prototype = {
	resetClipping: function() {
		this._isClipping = false;
	}
	,setClippingBounds: function(x1,y1,x2,y2) {
		this._clippingBox.init(x1,y1,x2,y2);
		this._clippingBox.normalize();
		this._isClipping = true;
	}
	,moveTo: function(x1,y1) {
		this._x1 = x1;
		this._y1 = y1;
		if(this._isClipping) {
			var clippingBox = this._clippingBox;
			this._f1 = (x1 > clippingBox.x2 ? 1 : 0) | (y1 > clippingBox.y2 ? 1 : 0) << 1 | (x1 < clippingBox.x1 ? 1 : 0) << 2 | (y1 < clippingBox.y1 ? 1 : 0) << 3;
		}
	}
	,lineTo: function(ras,x2,y2) {
		if(this._isClipping) {
			var clippingBox = this._clippingBox;
			var f2 = (x2 > clippingBox.x2 ? 1 : 0) | (y2 > clippingBox.y2 ? 1 : 0) << 1 | (x2 < clippingBox.x1 ? 1 : 0) << 2 | (y2 < clippingBox.y1 ? 1 : 0) << 3;
			if((this._f1 & 10) == (f2 & 10) && (this._f1 & 10) != 0) {
				this._x1 = x2;
				this._y1 = y2;
				this._f1 = f2;
				return;
			}
			var x1 = this._x1;
			var y1 = this._y1;
			var f1 = this._f1;
			var y3;
			var y4;
			var f3;
			var f4;
			switch((f1 & 5) << 1 | f2 & 5) {
			case 0:
				this.lineClipY(ras,x1,y1,x2,y2,f1,f2);
				break;
			case 1:
				y3 = y1 + (this._clippingBox.x2 - x1) * (y2 - y1) / (x2 - x1);
				var clippingBox1 = this._clippingBox;
				f3 = (y3 > clippingBox1.y2 ? 1 : 0) << 1 | (y3 < clippingBox1.y1 ? 1 : 0) << 3;
				this.lineClipY(ras,x1,y1,this._clippingBox.x2,y3,f1,f3);
				this.lineClipY(ras,this._clippingBox.x2,y3,this._clippingBox.x2,y2,f3,f2);
				break;
			case 2:
				y3 = y1 + (this._clippingBox.x2 - x1) * (y2 - y1) / (x2 - x1);
				var clippingBox2 = this._clippingBox;
				f3 = (y3 > clippingBox2.y2 ? 1 : 0) << 1 | (y3 < clippingBox2.y1 ? 1 : 0) << 3;
				this.lineClipY(ras,this._clippingBox.x2,y1,this._clippingBox.x2,y3,f1,f3);
				this.lineClipY(ras,this._clippingBox.x2,y3,x2,y2,f3,f2);
				break;
			case 3:
				this.lineClipY(ras,this._clippingBox.x2,y1,this._clippingBox.x2,y2,f1,f2);
				break;
			case 4:
				y3 = y1 + (this._clippingBox.x1 - x1) * (y2 - y1) / (x2 - x1);
				var clippingBox3 = this._clippingBox;
				f3 = (y3 > clippingBox3.y2 ? 1 : 0) << 1 | (y3 < clippingBox3.y1 ? 1 : 0) << 3;
				this.lineClipY(ras,x1,y1,this._clippingBox.x1,y3,f1,f3);
				this.lineClipY(ras,this._clippingBox.x1,y3,this._clippingBox.x1,y2,f3,f2);
				break;
			case 6:
				y3 = y1 + (this._clippingBox.x2 - x1) * (y2 - y1) / (x2 - x1);
				y4 = y1 + (this._clippingBox.x1 - x1) * (y2 - y1) / (x2 - x1);
				var clippingBox4 = this._clippingBox;
				f3 = (y3 > clippingBox4.y2 ? 1 : 0) << 1 | (y3 < clippingBox4.y1 ? 1 : 0) << 3;
				var clippingBox5 = this._clippingBox;
				f4 = (y4 > clippingBox5.y2 ? 1 : 0) << 1 | (y4 < clippingBox5.y1 ? 1 : 0) << 3;
				this.lineClipY(ras,this._clippingBox.x2,y1,this._clippingBox.x2,y3,f1,f3);
				this.lineClipY(ras,this._clippingBox.x2,y3,this._clippingBox.x1,y4,f3,f4);
				this.lineClipY(ras,this._clippingBox.x1,y4,this._clippingBox.x1,y2,f4,f2);
				break;
			case 8:
				y3 = y1 + (this._clippingBox.x1 - x1) * (y2 - y1) / (x2 - x1);
				var clippingBox6 = this._clippingBox;
				f3 = (y3 > clippingBox6.y2 ? 1 : 0) << 1 | (y3 < clippingBox6.y1 ? 1 : 0) << 3;
				this.lineClipY(ras,this._clippingBox.x1,y1,this._clippingBox.x1,y3,f1,f3);
				this.lineClipY(ras,this._clippingBox.x1,y3,x2,y2,f3,f2);
				break;
			case 9:
				y3 = y1 + (this._clippingBox.x1 - x1) * (y2 - y1) / (x2 - x1);
				y4 = y1 + (this._clippingBox.x2 - x1) * (y2 - y1) / (x2 - x1);
				var clippingBox7 = this._clippingBox;
				f3 = (y3 > clippingBox7.y2 ? 1 : 0) << 1 | (y3 < clippingBox7.y1 ? 1 : 0) << 3;
				var clippingBox8 = this._clippingBox;
				f4 = (y4 > clippingBox8.y2 ? 1 : 0) << 1 | (y4 < clippingBox8.y1 ? 1 : 0) << 3;
				this.lineClipY(ras,this._clippingBox.x1,y1,this._clippingBox.x1,y3,f1,f3);
				this.lineClipY(ras,this._clippingBox.x1,y3,this._clippingBox.x2,y4,f3,f4);
				this.lineClipY(ras,this._clippingBox.x2,y4,this._clippingBox.x2,y2,f4,f2);
				break;
			case 12:
				this.lineClipY(ras,this._clippingBox.x1,y1,this._clippingBox.x1,y2,f1,f2);
				break;
			}
			this._f1 = f2;
		} else {
			var value = this._x1 * 256;
			var value1 = this._y1 * 256;
			var value2 = x2 * 256;
			var value3 = y2 * 256;
			ras.line((value < 0.0 ? value - 0.5 : value + 0.5) | 0,(value1 < 0.0 ? value1 - 0.5 : value1 + 0.5) | 0,(value2 < 0.0 ? value2 - 0.5 : value2 + 0.5) | 0,(value3 < 0.0 ? value3 - 0.5 : value3 + 0.5) | 0);
		}
		this._x1 = x2;
		this._y1 = y2;
	}
	,lineClipY: function(ras,x1,y1,x2,y2,f1,f2) {
		f1 &= 10;
		f2 &= 10;
		if((f1 | f2) == 0) {
			var value = x1 * 256;
			var value1 = y1 * 256;
			var value2 = x2 * 256;
			var value3 = y2 * 256;
			ras.line((value < 0.0 ? value - 0.5 : value + 0.5) | 0,(value1 < 0.0 ? value1 - 0.5 : value1 + 0.5) | 0,(value2 < 0.0 ? value2 - 0.5 : value2 + 0.5) | 0,(value3 < 0.0 ? value3 - 0.5 : value3 + 0.5) | 0);
		} else {
			if(f1 == f2) {
				return;
			}
			var tx1 = x1;
			var ty1 = y1;
			var tx2 = x2;
			var ty2 = y2;
			if((f1 & 8) != 0) {
				tx1 = x1 + (this._clippingBox.y1 - y1) * (x2 - x1) / (y2 - y1);
				ty1 = this._clippingBox.y1;
			}
			if((f1 & 2) != 0) {
				tx1 = x1 + (this._clippingBox.y2 - y1) * (x2 - x1) / (y2 - y1);
				ty1 = this._clippingBox.y2;
			}
			if((f2 & 8) != 0) {
				tx2 = x1 + (this._clippingBox.y1 - y1) * (x2 - x1) / (y2 - y1);
				ty2 = this._clippingBox.y1;
			}
			if((f2 & 2) != 0) {
				tx2 = x1 + (this._clippingBox.y2 - y1) * (x2 - x1) / (y2 - y1);
				ty2 = this._clippingBox.y2;
			}
			var value4 = tx1 * 256;
			var value5 = ty1 * 256;
			var value6 = tx2 * 256;
			var value7 = ty2 * 256;
			ras.line((value4 < 0.0 ? value4 - 0.5 : value4 + 0.5) | 0,(value5 < 0.0 ? value5 - 0.5 : value5 + 0.5) | 0,(value6 < 0.0 ? value6 - 0.5 : value6 + 0.5) | 0,(value7 < 0.0 ? value7 - 0.5 : value7 + 0.5) | 0);
		}
	}
	,__class__: aggx_rasterizer_ClippingScanlineRasterizer
};
var aggx_rasterizer_CoverScale = function() { };
aggx_rasterizer_CoverScale.__name__ = true;
var aggx_rasterizer_FillingRule = function() { };
aggx_rasterizer_FillingRule.__name__ = true;
var aggx_rasterizer_IGammaFunction = function() { };
aggx_rasterizer_IGammaFunction.__name__ = true;
aggx_rasterizer_IGammaFunction.prototype = {
	__class__: aggx_rasterizer_IGammaFunction
};
var aggx_rasterizer_GammaPower = function(g) {
	if(g == null) {
		g = 1.0;
	}
	this._gamma = g;
};
aggx_rasterizer_GammaPower.__name__ = true;
aggx_rasterizer_GammaPower.__interfaces__ = [aggx_rasterizer_IGammaFunction];
aggx_rasterizer_GammaPower.prototype = {
	apply: function(x) {
		return Math.pow(x,this._gamma);
	}
	,get_gamma: function() {
		return this._gamma;
	}
	,set_gamma: function(value) {
		return this._gamma = value;
	}
	,__class__: aggx_rasterizer_GammaPower
};
var aggx_rasterizer_IRasterizer = function() { };
aggx_rasterizer_IRasterizer.__name__ = true;
aggx_rasterizer_IRasterizer.prototype = {
	__class__: aggx_rasterizer_IRasterizer
};
var aggx_rasterizer_IScanline = function() { };
aggx_rasterizer_IScanline.__name__ = true;
aggx_rasterizer_IScanline.prototype = {
	__class__: aggx_rasterizer_IScanline
};
var aggx_rasterizer_ISpanIterator = function() { };
aggx_rasterizer_ISpanIterator.__name__ = true;
aggx_rasterizer_ISpanIterator.prototype = {
	__class__: aggx_rasterizer_ISpanIterator
};
var aggx_rasterizer_LiangBarskyClipper = function() { };
aggx_rasterizer_LiangBarskyClipper.__name__ = true;
aggx_rasterizer_LiangBarskyClipper.getClippingFlags = function(x,y,clippingBox) {
	return (x > clippingBox.x2 ? 1 : 0) | (y > clippingBox.y2 ? 1 : 0) << 1 | (x < clippingBox.x1 ? 1 : 0) << 2 | (y < clippingBox.y1 ? 1 : 0) << 3;
};
aggx_rasterizer_LiangBarskyClipper.getClippingFlagsX = function(x,clippingBox) {
	return (x > clippingBox.x2 ? 1 : 0) | (x < clippingBox.x1 ? 1 : 0) << 2;
};
aggx_rasterizer_LiangBarskyClipper.getClippingFlagsY = function(y,clippingBox) {
	return (y > clippingBox.y2 ? 1 : 0) << 1 | (y < clippingBox.y1 ? 1 : 0) << 3;
};
aggx_rasterizer_LiangBarskyClipper.clip = function(x1,y1,x2,y2,clippingBox,x,y) {
	var deltax = x2 - x1;
	var deltay = y2 - y1;
	var xin;
	var xout;
	var yin;
	var yout;
	var toutx;
	var touty;
	var tin1;
	var tin2;
	var tout1;
	var np = 0;
	if(deltax == 0.0) {
		deltax = x1 > clippingBox.x1 ? -1e-030 : 1e-30;
	}
	if(deltay == 0.0) {
		deltay = y1 > clippingBox.y1 ? -1e-030 : 1e-30;
	}
	if(deltax > 0.0) {
		xin = clippingBox.x1;
		xout = clippingBox.x2;
	} else {
		xin = clippingBox.x2;
		xout = clippingBox.x1;
	}
	if(deltay > 0.0) {
		yin = clippingBox.y1;
		yout = clippingBox.y2;
	} else {
		yin = clippingBox.y2;
		yout = clippingBox.y1;
	}
	var tinx = (xin - x1) / deltax;
	var tiny = (yin - y1) / deltay;
	if(tinx < tiny) {
		tin1 = tinx;
		tin2 = tiny;
	} else {
		tin1 = tiny;
		tin2 = tinx;
	}
	if(tin1 <= 1.0) {
		if(0.0 < tin1) {
			x.data[x.offset++] = xin;
			y.data[y.offset++] = yin;
			np = 1;
		}
		if(tin2 <= 1.0) {
			toutx = (xout - x1) / deltax;
			touty = (yout - y1) / deltay;
			tout1 = toutx < touty ? toutx : touty;
			if(tin2 > 0.0 || tout1 > 0.0) {
				if(tin2 <= tout1) {
					if(tin2 > 0.0) {
						if(tinx > tiny) {
							x.data[x.offset++] = xin;
							y.data[y.offset++] = y1 + tinx * deltay;
						} else {
							x.data[x.offset++] = x1 + tiny * deltax;
							y.data[y.offset++] = yin;
						}
						++np;
					}
					if(tout1 < 1.0) {
						if(toutx < touty) {
							x.data[x.offset++] = xout;
							y.data[y.offset++] = y1 + toutx * deltay;
						} else {
							x.data[x.offset++] = x1 + touty * deltax;
							y.data[y.offset++] = yout;
						}
					} else {
						x.data[x.offset++] = x2;
						y.data[y.offset++] = y2;
					}
					++np;
				} else {
					if(tinx > tiny) {
						x.data[x.offset++] = xin;
						y.data[y.offset++] = yout;
					} else {
						x.data[x.offset++] = xout;
						y.data[y.offset++] = yin;
					}
					++np;
				}
			}
		}
	}
	return np;
};
aggx_rasterizer_LiangBarskyClipper.clipMovePoint = function(x1,y1,x2,y2,clippingBox,x,y,flags) {
	var bound;
	if((flags & 5) != 0) {
		if(x1 == x2) {
			return false;
		}
		bound = (flags & 4) != 0 ? clippingBox.x1 : clippingBox.x2;
		y.value = (bound - x1) * (y2 - y1) / (x2 - x1) + y1;
		x.value = bound;
	}
	var y3 = y.value;
	flags = (y3 > clippingBox.y2 ? 1 : 0) << 1 | (y3 < clippingBox.y1 ? 1 : 0) << 3;
	if((flags & 10) != 0) {
		if(y1 == y2) {
			return false;
		}
		bound = (flags & 8) != 0 ? clippingBox.y1 : clippingBox.y2;
		x.value = (bound - y1) * (x2 - x1) / (y2 - y1) + x1;
		y.value = bound;
	}
	return true;
};
aggx_rasterizer_LiangBarskyClipper.clipLineSegment = function(x1,y1,x2,y2,clippingBox) {
	var x = x1.value;
	var y = y1.value;
	var f1 = (x > clippingBox.x2 ? 1 : 0) | (y > clippingBox.y2 ? 1 : 0) << 1 | (x < clippingBox.x1 ? 1 : 0) << 2 | (y < clippingBox.y1 ? 1 : 0) << 3;
	var x3 = x2.value;
	var y3 = y2.value;
	var f2 = (x3 > clippingBox.x2 ? 1 : 0) | (y3 > clippingBox.y2 ? 1 : 0) << 1 | (x3 < clippingBox.x1 ? 1 : 0) << 2 | (y3 < clippingBox.y1 ? 1 : 0) << 3;
	var ret = 0;
	if((f2 | f1) == 0) {
		return 0;
	}
	if((f1 & 5) != 0 && (f1 & 5) == (f2 & 5)) {
		return 4;
	}
	if((f1 & 10) != 0 && (f1 & 10) == (f2 & 10)) {
		return 4;
	}
	var tx1 = x1.value;
	var ty1 = y1.value;
	var tx2 = x2.value;
	var ty2 = y2.value;
	if(f1 != 0) {
		if(!aggx_rasterizer_LiangBarskyClipper.clipMovePoint(tx1,ty1,tx2,ty2,clippingBox,x1,y1,f1)) {
			return 4;
		}
		if(x1.value == x2.value && y1.value == y2.value) {
			return 4;
		}
		ret = 1;
	}
	if(f2 != 0) {
		if(!aggx_rasterizer_LiangBarskyClipper.clipMovePoint(tx1,ty1,tx2,ty2,clippingBox,x2,y2,f2)) {
			return 4;
		}
		if(x1.value == x2.value && y1.value == y2.value) {
			return 4;
		}
		ret |= 2;
	}
	return ret;
};
var aggx_rasterizer_PixelCell = function(cell) {
	if(cell == null) {
		this.initial();
	} else {
		this.x = cell.x;
		this.y = cell.y;
		this.cover = cell.cover;
		this.area = cell.area;
	}
};
aggx_rasterizer_PixelCell.__name__ = true;
aggx_rasterizer_PixelCell.getX = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_rasterizer_PixelCell.getY = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 4);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_rasterizer_PixelCell.getCover = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 12);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_rasterizer_PixelCell.getArea = function(addr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 8);
	return aggx_core_memory_MemoryAccess.domainMemory.readInt32();
};
aggx_rasterizer_PixelCell.getAll = function(addr,cell) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	var tmp = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 4);
	var tmp1 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 12);
	var tmp2 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 8);
	cell.define(tmp,tmp1,tmp2,aggx_core_memory_MemoryAccess.domainMemory.readInt32());
};
aggx_rasterizer_PixelCell.setX = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_rasterizer_PixelCell.setY = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 4);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_rasterizer_PixelCell.setCover = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 12);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_rasterizer_PixelCell.setArea = function(addr,v) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 8);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
};
aggx_rasterizer_PixelCell.setAll = function(addr,cell) {
	var v = cell.x;
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
	var v1 = cell.y;
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 4);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v1);
	var v2 = cell.cover;
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 12);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v2);
	var v3 = cell.area;
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 8);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v3);
};
aggx_rasterizer_PixelCell.setAllEx = function(addr,cellPtr) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(cellPtr + 0);
	var v = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 0);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v);
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(cellPtr + 4);
	var v1 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 4);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v1);
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(cellPtr + 12);
	var v2 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 12);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v2);
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(cellPtr + 8);
	var v3 = aggx_core_memory_MemoryAccess.domainMemory.readInt32();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(addr + 8);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(v3);
};
aggx_rasterizer_PixelCell.prototype = {
	toString: function() {
		return "{x: " + this.x + ", y: " + this.y + ", area: " + this.area + ", cover: " + this.cover + "}";
	}
	,initial: function() {
		this.x = 2147483647;
		this.y = 2147483647;
		this.cover = 0;
		this.area = 0;
	}
	,set: function(cell) {
		this.x = cell.x;
		this.y = cell.y;
		this.cover = cell.cover;
		this.area = cell.area;
	}
	,define: function(x_,y_,cover_,area_) {
		this.x = x_;
		this.y = y_;
		this.cover = cover_;
		this.area = area_;
	}
	,isNotEqual: function(ex,ey) {
		return (ex - this.x | ey - this.y) != 0;
	}
	,__class__: aggx_rasterizer_PixelCell
};
var aggx_rasterizer_PixelCellDataExtensions = function() { };
aggx_rasterizer_PixelCellDataExtensions.__name__ = true;
aggx_rasterizer_PixelCellDataExtensions.dataGetX = function(data,pointer) {
	data.set_offset(pointer + 0);
	return data.readInt32();
};
aggx_rasterizer_PixelCellDataExtensions.getY = function(pointer) {
	pointer.data.set_offset(pointer.offset + 4);
	return pointer.data.readInt32();
};
aggx_rasterizer_PixelCellDataExtensions.getCover = function(pointer) {
	pointer.data.set_offset(pointer.offset + 12);
	return pointer.data.readInt32();
};
aggx_rasterizer_PixelCellDataExtensions.getArea = function(pointer) {
	pointer.data.set_offset(pointer.offset + 8);
	return pointer.data.readInt32();
};
aggx_rasterizer_PixelCellDataExtensions.getAll = function(pointer,cell) {
	pointer.data.set_offset(pointer.offset);
	var x = pointer.data.readInt32();
	pointer.data.set_offset(pointer.offset + 4);
	var y = pointer.data.readInt32();
	pointer.data.set_offset(pointer.offset + 12);
	var c = pointer.data.readInt32();
	pointer.data.set_offset(pointer.offset + 8);
	cell.define(x,y,c,pointer.data.readInt32());
};
aggx_rasterizer_PixelCellDataExtensions.setX = function(pointer,v) {
	pointer.data.set_offset(pointer.offset);
	pointer.data.writeInt32(v);
};
aggx_rasterizer_PixelCellDataExtensions.dataSetX = function(data,pointer,v) {
	data.set_offset(pointer + 0);
	data.writeInt32(v);
};
aggx_rasterizer_PixelCellDataExtensions.setY = function(pointer,v) {
	pointer.data.set_offset(pointer.offset + 4);
	pointer.data.writeInt32(v);
};
aggx_rasterizer_PixelCellDataExtensions.setCover = function(pointer,v) {
	pointer.data.set_offset(pointer.offset + 12);
	pointer.data.writeInt32(v);
};
aggx_rasterizer_PixelCellDataExtensions.setArea = function(pointer,v) {
	pointer.data.set_offset(pointer.offset + 8);
	pointer.data.writeInt32(v);
};
aggx_rasterizer_PixelCellDataExtensions.readInt32Offset = function(data,p) {
	data.set_offset(p);
	return data.readInt32();
};
aggx_rasterizer_PixelCellDataExtensions.writeInt32Offset = function(data,p,v) {
	data.set_offset(p);
	data.writeInt32(v);
};
aggx_rasterizer_PixelCellDataExtensions.dataSwapPixel = function(data,a,b) {
	data.set_offset(a + 0);
	var x = data.readInt32();
	data.set_offset(a + 4);
	var y = data.readInt32();
	data.set_offset(a + 12);
	var cover = data.readInt32();
	data.set_offset(a + 8);
	var area = data.readInt32();
	data.set_offset(b + 0);
	var v = data.readInt32();
	data.set_offset(a + 0);
	data.writeInt32(v);
	data.set_offset(b + 4);
	var v1 = data.readInt32();
	data.set_offset(a + 4);
	data.writeInt32(v1);
	data.set_offset(b + 12);
	var v2 = data.readInt32();
	data.set_offset(a + 12);
	data.writeInt32(v2);
	data.set_offset(b + 8);
	var v3 = data.readInt32();
	data.set_offset(a + 8);
	data.writeInt32(v3);
	data.set_offset(b + 0);
	data.writeInt32(x);
	data.set_offset(b + 4);
	data.writeInt32(y);
	data.set_offset(b + 8);
	data.writeInt32(area);
	data.set_offset(b + 12);
	data.writeInt32(cover);
};
aggx_rasterizer_PixelCellDataExtensions.setAll = function(pointer,cell) {
	pointer.data.set_offset(pointer.offset);
	pointer.data.writeInt32(cell.x);
	pointer.data.set_offset(pointer.offset + 4);
	pointer.data.writeInt32(cell.y);
	pointer.data.set_offset(pointer.offset + 12);
	pointer.data.writeInt32(cell.cover);
	pointer.data.set_offset(pointer.offset + 8);
	pointer.data.writeInt32(cell.area);
};
aggx_rasterizer_PixelCellDataExtensions.setAllEx = function(to,from) {
	to.data.set_offset(to.offset);
	var tmp = to.data;
	from.data.set_offset(from.offset);
	tmp.writeInt32(from.data.readInt32());
	to.data.set_offset(to.offset + 4);
	var tmp1 = to.data;
	from.data.set_offset(from.offset + 4);
	tmp1.writeInt32(from.data.readInt32());
	to.data.set_offset(to.offset + 12);
	var tmp2 = to.data;
	from.data.set_offset(from.offset + 12);
	tmp2.writeInt32(from.data.readInt32());
	to.data.set_offset(to.offset + 8);
	var tmp3 = to.data;
	from.data.set_offset(from.offset + 8);
	tmp3.writeInt32(from.data.readInt32());
};
var aggx_rasterizer_SortedY = function() {
	this.num = 0;
	this.start = 0;
	this.start = 0;
	this.num = 0;
};
aggx_rasterizer_SortedY.__name__ = true;
aggx_rasterizer_SortedY.prototype = {
	toString: function() {
		return "{start: " + this.start + ", num " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.num)) + "}";
	}
	,__class__: aggx_rasterizer_SortedY
};
var aggx_rasterizer_PixelCellRasterizer = function() {
	this._cellsCount = 0;
	this._cellsCapacity = 32768;
	this._cells = new types_Data(this._cellsCapacity * 16);
	this._cellsPtr = new aggx_core_utils_DataPointer(this._cells);
	this._sortedCells = new types_Data(this._cellsCapacity * 16);
	this._sortedCellsPtr = new aggx_core_utils_DataPointer(this._sortedCells);
	this._currentCell = new aggx_rasterizer_PixelCell();
	this._sortedY = null;
	this._minX = 2147483647;
	this._minY = 2147483647;
	this._maxX = -2147483647;
	this._maxY = -2147483647;
	this._isSorted = false;
	this._tempCell = new aggx_rasterizer_PixelCell();
};
aggx_rasterizer_PixelCellRasterizer.__name__ = true;
aggx_rasterizer_PixelCellRasterizer.prototype = {
	reset: function() {
		this._cellsCount = 0;
		this._currentCell.initial();
		this._isSorted = false;
		this._minX = 2147483647;
		this._minY = 2147483647;
		this._maxX = -2147483647;
		this._maxY = -2147483647;
	}
	,get_minX: function() {
		return this._minX;
	}
	,get_minY: function() {
		return this._minY;
	}
	,get_maxX: function() {
		return this._maxX;
	}
	,get_maxY: function() {
		return this._maxY;
	}
	,get_cellsCount: function() {
		return this._cellsCount;
	}
	,get_isSorted: function() {
		return this._isSorted;
	}
	,getScanlineCells: function(y) {
		this._sortedCellsPtr.offset = this._sortedY[y - this._minY].start * 16;
		return this._sortedCellsPtr;
	}
	,getScanlineCellsCount: function(y) {
		return this._sortedY[y - this._minY].num;
	}
	,addCurrentCell: function() {
		if((this._currentCell.area | this._currentCell.cover) != 0) {
			this._cellsPtr.offset = this._cellsCount * 16;
			var pointer = this._cellsPtr;
			var cell = this._currentCell;
			pointer.data.set_offset(pointer.offset);
			pointer.data.writeInt32(cell.x);
			pointer.data.set_offset(pointer.offset + 4);
			pointer.data.writeInt32(cell.y);
			pointer.data.set_offset(pointer.offset + 12);
			pointer.data.writeInt32(cell.cover);
			pointer.data.set_offset(pointer.offset + 8);
			pointer.data.writeInt32(cell.area);
			++this._cellsCount;
			if(_$UInt_UInt_$Impl_$.gt(this._cellsCount + 1,this._cellsCapacity)) {
				this._cellsCapacity = Math.floor(_$UInt_UInt_$Impl_$.toFloat(this._cellsCapacity) * 1.8);
				this._cells.resize(this._cellsCapacity * 16);
				this._sortedCells.resize(this._cellsCapacity * 16);
			}
		}
	}
	,setCurrentCell: function(x,y) {
		var _this = this._currentCell;
		if((x - _this.x | y - _this.y) != 0) {
			if((this._currentCell.area | this._currentCell.cover) != 0) {
				this._cellsPtr.offset = this._cellsCount * 16;
				var pointer = this._cellsPtr;
				var cell = this._currentCell;
				pointer.data.set_offset(pointer.offset);
				pointer.data.writeInt32(cell.x);
				pointer.data.set_offset(pointer.offset + 4);
				pointer.data.writeInt32(cell.y);
				pointer.data.set_offset(pointer.offset + 12);
				pointer.data.writeInt32(cell.cover);
				pointer.data.set_offset(pointer.offset + 8);
				pointer.data.writeInt32(cell.area);
				++this._cellsCount;
				if(_$UInt_UInt_$Impl_$.gt(this._cellsCount + 1,this._cellsCapacity)) {
					this._cellsCapacity = Math.floor(_$UInt_UInt_$Impl_$.toFloat(this._cellsCapacity) * 1.8);
					this._cells.resize(this._cellsCapacity * 16);
					this._sortedCells.resize(this._cellsCapacity * 16);
				}
			}
			this._currentCell.define(x,y,0,0);
		}
	}
	,renderHLine: function(ey,x1,y1,x2,y2) {
		var ex1 = x1 >> 8;
		var ex2 = x2 >> 8;
		var fx1 = x1 & 255;
		var fx2 = x2 & 255;
		var delta;
		var lift;
		var rem;
		if(y1 == y2) {
			this.setCurrentCell(ex2,ey);
			return;
		}
		if(ex1 == ex2) {
			delta = y2 - y1;
			this._currentCell.cover += delta;
			this._currentCell.area += (fx1 + fx2) * delta;
			return;
		}
		var p = (256 - fx1) * (y2 - y1);
		var first = 256;
		var incr = 1;
		var dx = x2 - x1;
		if(dx < 0) {
			p = fx1 * (y2 - y1);
			first = 0;
			incr = -1;
			dx = -dx;
		}
		delta = p / dx | 0;
		var mod = p % dx;
		if(mod < 0) {
			--delta;
			mod += dx;
		}
		this._currentCell.cover += delta;
		this._currentCell.area += (fx1 + first) * delta;
		ex1 += incr;
		this.setCurrentCell(ex1,ey);
		y1 += delta;
		if(ex1 != ex2) {
			p = 256 * (y2 - y1 + delta);
			lift = p / dx | 0;
			rem = p % dx;
			if(rem < 0) {
				--lift;
				rem += dx;
			}
			mod -= dx;
			while(ex1 != ex2) {
				delta = lift;
				mod += rem;
				if(mod >= 0) {
					mod -= dx;
					++delta;
				}
				this._currentCell.cover += delta;
				this._currentCell.area += 256 * delta;
				y1 += delta;
				ex1 += incr;
				this.setCurrentCell(ex1,ey);
			}
		}
		delta = y2 - y1;
		this._currentCell.cover += delta;
		this._currentCell.area += (fx2 + 256 - first) * delta;
	}
	,line: function(x1,y1,x2,y2) {
		var dx = x2 - x1;
		if(dx >= 4194304 || dx <= -4194304) {
			var cx = x1 + x2 >> 1;
			var cy = y1 + y2 >> 1;
			this.line(x1,y1,cx,cy);
			this.line(cx,cy,x2,y2);
		}
		var dy = y2 - y1;
		var ex1 = x1 >> 8;
		var ex2 = x2 >> 8;
		var ey1 = y1 >> 8;
		var ey2 = y2 >> 8;
		var fy1 = y1 & 255;
		var fy2 = y2 & 255;
		var x_to;
		var rem;
		var lift;
		var delta;
		var first;
		if(ex1 < this._minX) {
			this._minX = ex1;
		}
		if(ex1 > this._maxX) {
			this._maxX = ex1;
		}
		if(ey1 < this._minY) {
			this._minY = ey1;
		}
		if(ey1 > this._maxY) {
			this._maxY = ey1;
		}
		if(ex2 < this._minX) {
			this._minX = ex2;
		}
		if(ex2 > this._maxX) {
			this._maxX = ex2;
		}
		if(ey2 < this._minY) {
			this._minY = ey2;
		}
		if(ey2 > this._maxY) {
			this._maxY = ey2;
		}
		this.setCurrentCell(ex1,ey1);
		if(ey1 == ey2) {
			this.renderHLine(ey1,x1,fy1,x2,fy2);
			return;
		}
		var incr = 1;
		if(dx == 0) {
			var ex = x1 >> 8;
			var two_fx = x1 - (ex << 8) << 1;
			first = 256;
			if(dy < 0) {
				first = 0;
				incr = -1;
			}
			delta = first - fy1;
			this._currentCell.cover += delta;
			this._currentCell.area += two_fx * delta;
			ey1 += incr;
			this.setCurrentCell(ex,ey1);
			delta = first + first - 256;
			var area = two_fx * delta;
			while(ey1 != ey2) {
				this._currentCell.cover = delta;
				this._currentCell.area = area;
				ey1 += incr;
				this.setCurrentCell(ex,ey1);
			}
			delta = fy2 - 256 + first;
			this._currentCell.cover += delta;
			this._currentCell.area += two_fx * delta;
			return;
		}
		var p = (256 - fy1) * dx;
		first = 256;
		if(dy < 0) {
			p = fy1 * dx;
			first = 0;
			incr = -1;
			dy = -dy;
		}
		delta = p / dy | 0;
		var mod = p % dy;
		if(mod < 0) {
			--delta;
			mod += dy;
		}
		var x_from = x1 + delta;
		this.renderHLine(ey1,x1,fy1,x_from,first);
		ey1 += incr;
		this.setCurrentCell(x_from >> 8,ey1);
		if(ey1 != ey2) {
			p = 256 * dx;
			lift = p / dy | 0;
			rem = p % dy;
			if(rem < 0) {
				--lift;
				rem += dy;
			}
			mod -= dy;
			while(ey1 != ey2) {
				delta = lift;
				mod += rem;
				if(mod >= 0) {
					mod -= dy;
					++delta;
				}
				x_to = x_from + delta;
				this.renderHLine(ey1,x_from,256 - first,x_to,first);
				x_from = x_to;
				ey1 += incr;
				this.setCurrentCell(x_to >> 8,ey1);
			}
		}
		this.renderHLine(ey1,x_from,256 - first,x2,fy2);
	}
	,qsort: function(data,beg,end) {
		if(end == beg) {
			return;
		}
		var stack = new Array(end - beg + 1);
		var top = -1;
		top = 0;
		stack[0] = beg;
		top = 1;
		stack[1] = end;
		while(top >= 0) {
			end = stack[top--];
			beg = stack[top--];
			var pivot = this.getPivotPoint(data,beg,end);
			if(_$UInt_UInt_$Impl_$.gt(pivot,beg)) {
				stack[++top] = beg;
				stack[++top] = pivot - 16;
			}
			if(_$UInt_UInt_$Impl_$.gt(end,pivot)) {
				stack[++top] = pivot + 16;
				stack[++top] = end;
			}
		}
	}
	,getPivotPoint: function(data,beg,end) {
		var m = beg + 16;
		var n = end;
		while(true) {
			var tmp;
			if(_$UInt_UInt_$Impl_$.gt(end,m)) {
				data.set_offset(beg + 0);
				var tmp1 = data.readInt32();
				data.set_offset(m + 0);
				tmp = tmp1 >= data.readInt32();
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			m = m + 16;
		}
		while(true) {
			var tmp2;
			if(_$UInt_UInt_$Impl_$.gt(n,beg)) {
				data.set_offset(beg + 0);
				var tmp3 = data.readInt32();
				data.set_offset(n + 0);
				tmp2 = tmp3 <= data.readInt32();
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				break;
			}
			n = n - 16;
		}
		while(_$UInt_UInt_$Impl_$.gt(n,m)) {
			data.set_offset(m + 0);
			var x = data.readInt32();
			data.set_offset(m + 4);
			var y = data.readInt32();
			data.set_offset(m + 12);
			var cover = data.readInt32();
			data.set_offset(m + 8);
			var area = data.readInt32();
			data.set_offset(n + 0);
			var v = data.readInt32();
			data.set_offset(m + 0);
			data.writeInt32(v);
			data.set_offset(n + 4);
			var v1 = data.readInt32();
			data.set_offset(m + 4);
			data.writeInt32(v1);
			data.set_offset(n + 12);
			var v2 = data.readInt32();
			data.set_offset(m + 12);
			data.writeInt32(v2);
			data.set_offset(n + 8);
			var v3 = data.readInt32();
			data.set_offset(m + 8);
			data.writeInt32(v3);
			data.set_offset(n + 0);
			data.writeInt32(x);
			data.set_offset(n + 4);
			data.writeInt32(y);
			data.set_offset(n + 8);
			data.writeInt32(area);
			data.set_offset(n + 12);
			data.writeInt32(cover);
			while(true) {
				var tmp4;
				if(_$UInt_UInt_$Impl_$.gt(end,m)) {
					data.set_offset(beg + 0);
					var tmp5 = data.readInt32();
					data.set_offset(m + 0);
					tmp4 = tmp5 >= data.readInt32();
				} else {
					tmp4 = false;
				}
				if(!tmp4) {
					break;
				}
				m = m + 16;
			}
			while(true) {
				var tmp6;
				if(_$UInt_UInt_$Impl_$.gt(n,beg)) {
					data.set_offset(beg + 0);
					var tmp7 = data.readInt32();
					data.set_offset(n + 0);
					tmp6 = tmp7 <= data.readInt32();
				} else {
					tmp6 = false;
				}
				if(!tmp6) {
					break;
				}
				n = n - 16;
			}
		}
		if(beg != n) {
			data.set_offset(beg + 0);
			var x1 = data.readInt32();
			data.set_offset(beg + 4);
			var y1 = data.readInt32();
			data.set_offset(beg + 12);
			var cover1 = data.readInt32();
			data.set_offset(beg + 8);
			var area1 = data.readInt32();
			data.set_offset(n + 0);
			var v4 = data.readInt32();
			data.set_offset(beg + 0);
			data.writeInt32(v4);
			data.set_offset(n + 4);
			var v5 = data.readInt32();
			data.set_offset(beg + 4);
			data.writeInt32(v5);
			data.set_offset(n + 12);
			var v6 = data.readInt32();
			data.set_offset(beg + 12);
			data.writeInt32(v6);
			data.set_offset(n + 8);
			var v7 = data.readInt32();
			data.set_offset(beg + 8);
			data.writeInt32(v7);
			data.set_offset(n + 0);
			data.writeInt32(x1);
			data.set_offset(n + 4);
			data.writeInt32(y1);
			data.set_offset(n + 8);
			data.writeInt32(area1);
			data.set_offset(n + 12);
			data.writeInt32(cover1);
		}
		return n;
	}
	,sortCells: function() {
		if(this._isSorted) {
			return;
		}
		if((this._currentCell.area | this._currentCell.cover) != 0) {
			this._cellsPtr.offset = this._cellsCount * 16;
			var pointer = this._cellsPtr;
			var cell = this._currentCell;
			pointer.data.set_offset(pointer.offset);
			pointer.data.writeInt32(cell.x);
			pointer.data.set_offset(pointer.offset + 4);
			pointer.data.writeInt32(cell.y);
			pointer.data.set_offset(pointer.offset + 12);
			pointer.data.writeInt32(cell.cover);
			pointer.data.set_offset(pointer.offset + 8);
			pointer.data.writeInt32(cell.area);
			++this._cellsCount;
			if(_$UInt_UInt_$Impl_$.gt(this._cellsCount + 1,this._cellsCapacity)) {
				this._cellsCapacity = Math.floor(_$UInt_UInt_$Impl_$.toFloat(this._cellsCapacity) * 1.8);
				this._cells.resize(this._cellsCapacity * 16);
				this._sortedCells.resize(this._cellsCapacity * 16);
			}
		}
		this._currentCell.x = 2147483647;
		this._currentCell.y = 2147483647;
		this._currentCell.cover = 0;
		this._currentCell.area = 0;
		if(this._cellsCount == 0) {
			return;
		}
		var _sortedYSize = this._maxY - this._minY + 1;
		this._sortedY = new Array(_sortedYSize);
		var i = 0;
		while(_$UInt_UInt_$Impl_$.gt(_sortedYSize,i)) {
			this._sortedY[i] = new aggx_rasterizer_SortedY();
			++i;
		}
		i = 0;
		while(_$UInt_UInt_$Impl_$.gt(this._cellsCount,i)) {
			this._cellsPtr.offset = i * 16;
			var pointer1 = this._cellsPtr;
			pointer1.data.set_offset(pointer1.offset + 4);
			var index = pointer1.data.readInt32() - this._minY;
			this._sortedY[index].start++;
			++i;
		}
		var start = 0;
		i = 0;
		while(_$UInt_UInt_$Impl_$.gt(_sortedYSize,i)) {
			var v = this._sortedY[i].start;
			this._sortedY[i].start = start;
			start += v;
			++i;
		}
		i = 0;
		while(_$UInt_UInt_$Impl_$.gt(this._cellsCount,i)) {
			this._cellsPtr.offset = i * 16;
			var pointer2 = this._cellsPtr;
			pointer2.data.set_offset(pointer2.offset + 4);
			var sortedIndex = pointer2.data.readInt32() - this._minY;
			this._cellsPtr.offset = i * 16;
			this._sortedCellsPtr.offset = (this._sortedY[sortedIndex].start + this._sortedY[sortedIndex].num) * 16;
			var to = this._sortedCellsPtr;
			var from = this._cellsPtr;
			to.data.set_offset(to.offset);
			var tmp = to.data;
			from.data.set_offset(from.offset);
			tmp.writeInt32(from.data.readInt32());
			to.data.set_offset(to.offset + 4);
			var tmp1 = to.data;
			from.data.set_offset(from.offset + 4);
			tmp1.writeInt32(from.data.readInt32());
			to.data.set_offset(to.offset + 12);
			var tmp2 = to.data;
			from.data.set_offset(from.offset + 12);
			tmp2.writeInt32(from.data.readInt32());
			to.data.set_offset(to.offset + 8);
			var tmp3 = to.data;
			from.data.set_offset(from.offset + 8);
			tmp3.writeInt32(from.data.readInt32());
			++this._sortedY[sortedIndex].num;
			++i;
		}
		i = 0;
		while(_$UInt_UInt_$Impl_$.gt(_sortedYSize,i)) {
			if(this._sortedY[i].num != 0) {
				this.qsort(this._sortedCellsPtr.data,this._sortedY[i].start * 16,(this._sortedY[i].start + this._sortedY[i].num - 1) * 16);
			}
			++i;
		}
		this._isSorted = true;
	}
	,__class__: aggx_rasterizer_PixelCellRasterizer
};
var aggx_rasterizer_PolySubpixelScale = function() { };
aggx_rasterizer_PolySubpixelScale.__name__ = true;
var aggx_rasterizer_Scanline = function() {
	this._y = 0;
	this._minX = 0;
	this._lastX = 2147483632;
	this._curSpanIndex = 0;
	this._covers = new types_Data(2048);
	this.cleanCovers();
	this._spans = new Array(1);
};
aggx_rasterizer_Scanline.__name__ = true;
aggx_rasterizer_Scanline.__interfaces__ = [aggx_rasterizer_IScanline];
aggx_rasterizer_Scanline.prototype = {
	cleanCovers: function() {
		var _g = 1;
		var _g1 = this._covers.get_allocedLength();
		while(_g < _g1) {
			this._covers.set_offset(_g++);
			this._covers.writeInt8(0);
		}
	}
	,reset: function(minX,maxX) {
		var maxLen = maxX - minX + 2;
		if(maxLen > this._spans.length) {
			this._spans = new Array(maxLen);
			if(maxLen > this._covers.get_allocedLength()) {
				this._covers = new types_Data(maxLen);
			}
		}
		this._lastX = 2147483632;
		this._minX = minX;
		this._curSpanIndex = 0;
	}
	,addCell: function(x,cover) {
		x -= this._minX;
		this._covers.set_offset(x);
		this._covers.writeUInt8(cover);
		if(x == this._lastX + 1) {
			this._currentSpan.len++;
		} else {
			this._curSpanIndex++;
			this._spans[this._curSpanIndex] = this._currentSpan = new aggx_rasterizer_Span(this._covers,x);
			this._currentSpan.x = x + this._minX;
			this._currentSpan.len = 1;
		}
		this._lastX = x;
	}
	,addCells: function(x,len,covers) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,addSpan: function(x,len,cover) {
		x -= this._minX;
		aggx_core_memory_MemoryUtils.dataSet(this._covers,x,cover,len);
		if(x == this._lastX + 1) {
			this._currentSpan.len = this._currentSpan.len + len;
		} else {
			this._curSpanIndex++;
			this._spans[this._curSpanIndex] = this._currentSpan = new aggx_rasterizer_Span(this._covers,x);
			this._currentSpan.x = x + this._minX;
			this._currentSpan.len = len;
		}
		this._lastX = x + len - 1;
	}
	,finalize: function(y) {
		this._y = y;
	}
	,resetSpans: function() {
		this._lastX = 2147483632;
		this._curSpanIndex = 0;
	}
	,get_spanCount: function() {
		return this._curSpanIndex;
	}
	,get_y: function() {
		return this._y;
	}
	,get_spanIterator: function() {
		return new aggx_rasterizer_SpanIterator(this._spans);
	}
	,__class__: aggx_rasterizer_Scanline
};
var aggx_rasterizer_ScanlineHitTest = function(x) {
	this._x = x;
	this._isHit = false;
};
aggx_rasterizer_ScanlineHitTest.__name__ = true;
aggx_rasterizer_ScanlineHitTest.__interfaces__ = [aggx_rasterizer_IScanline];
aggx_rasterizer_ScanlineHitTest.prototype = {
	reset: function(minX,maxX) {
	}
	,resetSpans: function() {
	}
	,finalize: function(y) {
	}
	,addCell: function(x,y) {
		if(this._x == x) {
			this._isHit = true;
		}
	}
	,addCells: function(x,len,covers) {
	}
	,addSpan: function(x,len,cover) {
		if(this._x >= x && this._x < x + len) {
			this._isHit = true;
		}
	}
	,get_spanCount: function() {
		return 1;
	}
	,get_isHit: function() {
		return this._isHit;
	}
	,get_y: function() {
		return 0;
	}
	,get_spanIterator: function() {
		return null;
	}
	,__class__: aggx_rasterizer_ScanlineHitTest
};
var aggx_rasterizer_ScanlineRasterizer = function(gammaFunction) {
	this._scanY = 0;
	this._outline = new aggx_rasterizer_PixelCellRasterizer();
	this._clipper = new aggx_rasterizer_ClippingScanlineRasterizer();
	this._isAutoClose = true;
	this._startX = 0;
	this._startY = 0;
	this._status = 0;
	this._fillingRule = 0;
	this._gamma = new Array(256);
	if(gammaFunction == null) {
		var i = 0;
		while(i < 256) {
			this._gamma[i] = i;
			++i;
		}
	} else {
		this.gamma(gammaFunction);
	}
};
aggx_rasterizer_ScanlineRasterizer.__name__ = true;
aggx_rasterizer_ScanlineRasterizer.__interfaces__ = [aggx_rasterizer_IRasterizer];
aggx_rasterizer_ScanlineRasterizer.prototype = {
	gamma: function(gammaFunction) {
		var i = 0;
		while(i < 256) {
			this._gamma[i] = gammaFunction.apply(i / 255) * 255 | 0;
			++i;
		}
	}
	,applyGamma: function(cover) {
		return this._gamma[cover];
	}
	,get_fillingRule: function() {
		return this._fillingRule;
	}
	,set_fillingRule: function(value) {
		return this._fillingRule = value;
	}
	,get_minX: function() {
		return this._outline._minX;
	}
	,get_minY: function() {
		return this._outline._minY;
	}
	,get_maxX: function() {
		return this._outline._maxX;
	}
	,get_maxY: function() {
		return this._outline._maxY;
	}
	,addPath: function(vs,pathId) {
		if(pathId == null) {
			pathId = 0;
		}
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		var cmd;
		vs.rewind(pathId);
		if(this._outline._isSorted) {
			this.reset();
		}
		while(true) {
			cmd = vs.getVertex(x,y);
			if(!(cmd != 0)) {
				break;
			}
			this.addVertex(x.value,y.value,cmd);
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,calculateAlpha: function(area) {
		var cover = area >> 9;
		if(cover < 0) {
			cover = -cover;
		}
		if(this._fillingRule == 1) {
			cover &= 511;
			if(cover > 256) {
				cover = 512 - cover;
			}
		}
		if(cover > 255) {
			cover = 255;
		}
		return this._gamma[cover];
	}
	,sweepScanline: function(sl) {
		var currentCell = new aggx_rasterizer_PixelCell();
		while(true) {
			if(this._scanY > this._outline._maxY) {
				return false;
			}
			sl.resetSpans();
			var _this = this._outline;
			var numCells = _this._sortedY[this._scanY - _this._minY].num;
			var _this1 = this._outline;
			_this1._sortedCellsPtr.offset = _this1._sortedY[this._scanY - _this1._minY].start * 16;
			var cells = _this1._sortedCellsPtr;
			var cover = 0;
			while(numCells != 0) {
				cells.data.set_offset(cells.offset);
				var x = cells.data.readInt32();
				cells.data.set_offset(cells.offset + 4);
				var y = cells.data.readInt32();
				cells.data.set_offset(cells.offset + 12);
				var c = cells.data.readInt32();
				cells.data.set_offset(cells.offset + 8);
				currentCell.define(x,y,c,cells.data.readInt32());
				var x1 = currentCell.x;
				var area = currentCell.area;
				var alpha;
				cover += currentCell.cover;
				while(numCells != 0) {
					--numCells;
					cells.offset += 16;
					cells.data.set_offset(cells.offset);
					var x2 = cells.data.readInt32();
					cells.data.set_offset(cells.offset + 4);
					var y1 = cells.data.readInt32();
					cells.data.set_offset(cells.offset + 12);
					var c1 = cells.data.readInt32();
					cells.data.set_offset(cells.offset + 8);
					currentCell.define(x2,y1,c1,cells.data.readInt32());
					if(currentCell.x != x1) {
						break;
					}
					area += currentCell.area;
					cover += currentCell.cover;
				}
				if(area != 0) {
					alpha = this.calculateAlpha((cover << 9) - area);
					if(alpha != 0) {
						sl.addCell(x1,alpha);
					}
					++x1;
				}
				if(numCells != 0 && currentCell.x > x1) {
					alpha = this.calculateAlpha(cover << 9);
					if(alpha != 0) {
						sl.addSpan(x1,currentCell.x - x1,alpha);
					}
				}
			}
			if(sl.get_spanCount() != 0) {
				break;
			}
			++this._scanY;
		}
		sl.finalize(this._scanY);
		++this._scanY;
		return true;
	}
	,reset: function() {
		this._outline.reset();
		this._status = 0;
	}
	,setClippingBounds: function(x1,y1,x2,y2) {
		this.reset();
		this._clipper.setClippingBounds(x1,y1,x2,y2);
	}
	,resetClipping: function() {
		this.reset();
		this._clipper.resetClipping();
	}
	,closePolygon: function() {
		if(this._status == 2) {
			this._clipper.lineTo(this._outline,this._startX,this._startY);
			this._status = 3;
		}
	}
	,moveTo: function(x,y) {
		if(this._outline._isSorted) {
			this.reset();
		}
		if(this._isAutoClose) {
			this.closePolygon();
		}
		var _this = this._clipper;
		var x1 = this._startX = x / 256;
		var y1 = this._startY = y / 256;
		_this._x1 = x1;
		_this._y1 = y1;
		if(_this._isClipping) {
			var clippingBox = _this._clippingBox;
			_this._f1 = (x1 > clippingBox.x2 ? 1 : 0) | (y1 > clippingBox.y2 ? 1 : 0) << 1 | (x1 < clippingBox.x1 ? 1 : 0) << 2 | (y1 < clippingBox.y1 ? 1 : 0) << 3;
		}
		this._status = 1;
	}
	,lineTo: function(x,y) {
		this._clipper.lineTo(this._outline,x / 256,y / 256);
		this._status = 2;
	}
	,moveToD: function(x,y) {
		if(this._outline._isSorted) {
			this.reset();
		}
		if(this._isAutoClose) {
			this.closePolygon();
		}
		var _this = this._clipper;
		var x1 = this._startX = x;
		var y1 = this._startY = y;
		_this._x1 = x1;
		_this._y1 = y1;
		if(_this._isClipping) {
			var clippingBox = _this._clippingBox;
			_this._f1 = (x1 > clippingBox.x2 ? 1 : 0) | (y1 > clippingBox.y2 ? 1 : 0) << 1 | (x1 < clippingBox.x1 ? 1 : 0) << 2 | (y1 < clippingBox.y1 ? 1 : 0) << 3;
		}
		this._status = 1;
	}
	,lineToD: function(x,y) {
		this._clipper.lineTo(this._outline,x,y);
		this._status = 2;
	}
	,addVertex: function(x,y,cmd) {
		if(cmd == 1) {
			this.moveToD(x,y);
		} else if(cmd >= 1 && cmd < 15) {
			this.lineToD(x,y);
		} else if((cmd & -49) == 79) {
			this.closePolygon();
		}
	}
	,edge: function(x1,y1,x2,y2) {
		if(this._outline._isSorted) {
			this.reset();
		}
		var _this = this._clipper;
		var x11 = x1 / 256;
		var y11 = y1 / 256;
		_this._x1 = x11;
		_this._y1 = y11;
		if(_this._isClipping) {
			var clippingBox = _this._clippingBox;
			_this._f1 = (x11 > clippingBox.x2 ? 1 : 0) | (y11 > clippingBox.y2 ? 1 : 0) << 1 | (x11 < clippingBox.x1 ? 1 : 0) << 2 | (y11 < clippingBox.y1 ? 1 : 0) << 3;
		}
		this._clipper.lineTo(this._outline,x2 / 256,y2 / 256);
		this._status = 1;
	}
	,edgeD: function(x1,y1,x2,y2) {
		if(this._outline._isSorted) {
			this.reset();
		}
		var _this = this._clipper;
		_this._x1 = x1;
		_this._y1 = y1;
		if(_this._isClipping) {
			var clippingBox = _this._clippingBox;
			_this._f1 = (x1 > clippingBox.x2 ? 1 : 0) | (y1 > clippingBox.y2 ? 1 : 0) << 1 | (x1 < clippingBox.x1 ? 1 : 0) << 2 | (y1 < clippingBox.y1 ? 1 : 0) << 3;
		}
		this._clipper.lineTo(this._outline,x2,y2);
		this._status = 1;
	}
	,sort: function() {
		if(this._isAutoClose) {
			this.closePolygon();
		}
		this._outline.sortCells();
	}
	,rewindScanlines: function() {
		var ret = false;
		if(this._isAutoClose) {
			this.closePolygon();
		}
		this._outline.sortCells();
		ret = this._outline._cellsCount != 0;
		if(ret) {
			this._scanY = this._outline._minY;
		}
		return ret;
	}
	,navigateScanline: function(y) {
		if(this._isAutoClose) {
			this.closePolygon();
		}
		this._outline.sortCells();
		if(this._outline._cellsCount == 0 || y < this._outline._minY || y > this._outline._maxY) {
			return false;
		}
		this._scanY = y;
		return true;
	}
	,hitTest: function(tx,ty) {
		if(!this.navigateScanline(ty)) {
			return false;
		}
		var sl = new aggx_rasterizer_ScanlineHitTest(tx);
		this.sweepScanline(sl);
		return sl._isHit;
	}
	,__class__: aggx_rasterizer_ScanlineRasterizer
};
var aggx_rasterizer_Span = function(data,offset) {
	this.len = 0;
	this.x = 0;
	this.data = data;
	this.dataOffset = offset;
};
aggx_rasterizer_Span.__name__ = true;
aggx_rasterizer_Span.prototype = {
	toString: function() {
		return "{x: " + this.x + ", len: " + this.len + " coversOffset: " + this.dataOffset + "}";
	}
	,getCovers: function() {
		this.data.set_offset(this.dataOffset);
		return this.data;
	}
	,__class__: aggx_rasterizer_Span
};
var aggx_rasterizer_SpanIterator = function(spans) {
	this._spans = spans;
	this._index = 1;
};
aggx_rasterizer_SpanIterator.__name__ = true;
aggx_rasterizer_SpanIterator.__interfaces__ = [aggx_rasterizer_ISpanIterator];
aggx_rasterizer_SpanIterator.prototype = {
	initialize: function() {
		this._index = 1;
	}
	,get_current: function() {
		return this._spans[this._index];
	}
	,next: function() {
		++this._index;
	}
	,__class__: aggx_rasterizer_SpanIterator
};
var aggx_renderer_BlenderBase = function() { };
aggx_renderer_BlenderBase.__name__ = true;
aggx_renderer_BlenderBase.blendPix = function(p,cr,cg,cb,alpha,cover) {
	if(cover == null) {
		cover = 0;
	}
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
	var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
	var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
	var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
	var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
};
var aggx_renderer_ClippingRenderer = function(pfren) {
	this._pixelFormatRenderer = pfren;
	this._clippingBox = new aggx_core_geometry_RectBoxI(0,0,pfren._rbuf._width - 1,pfren._rbuf._height - 1);
};
aggx_renderer_ClippingRenderer.__name__ = true;
aggx_renderer_ClippingRenderer.prototype = {
	attach: function(pfren) {
		this._pixelFormatRenderer = pfren;
		this._clippingBox = new aggx_core_geometry_RectBoxI(0,0,pfren._rbuf._width - 1,pfren._rbuf._height - 1);
	}
	,get_width: function() {
		return this._pixelFormatRenderer._rbuf._width;
	}
	,get_height: function() {
		return this._pixelFormatRenderer._rbuf._height;
	}
	,get_pixelFormatRenderer: function() {
		return this._pixelFormatRenderer;
	}
	,get_clippingBox: function() {
		return this._clippingBox;
	}
	,get_minX: function() {
		return this._clippingBox.x1;
	}
	,get_minY: function() {
		return this._clippingBox.y1;
	}
	,get_maxX: function() {
		return this._clippingBox.x2;
	}
	,get_maxY: function() {
		return this._clippingBox.y2;
	}
	,setClippingBounds: function(x1,y1,x2,y2) {
		var cb = new aggx_core_geometry_RectBoxI(x1,y1,x2,y2);
		cb.normalize();
		if(cb.clip(new aggx_core_geometry_RectBoxI(0,0,this._pixelFormatRenderer._rbuf._width - 1,this._pixelFormatRenderer._rbuf._height - 1))) {
			this._clippingBox = cb;
			return true;
		}
		this._clippingBox.x1 = 1;
		this._clippingBox.y1 = 1;
		this._clippingBox.x2 = 0;
		this._clippingBox.y2 = 0;
		return false;
	}
	,resetClipping: function(visibility) {
		if(visibility) {
			this._clippingBox.x1 = 0;
			this._clippingBox.y1 = 0;
			this._clippingBox.x2 = this._pixelFormatRenderer._rbuf._width - 1;
			this._clippingBox.y2 = this._pixelFormatRenderer._rbuf._height - 1;
		} else {
			this._clippingBox.x1 = 1;
			this._clippingBox.y1 = 1;
			this._clippingBox.x2 = 0;
			this._clippingBox.y2 = 0;
		}
	}
	,forceClippingBounds: function(x1,y1,x2,y2) {
		this._clippingBox.x1 = x1;
		this._clippingBox.y1 = y1;
		this._clippingBox.x2 = x2;
		this._clippingBox.y2 = y2;
	}
	,isInbox: function(x,y) {
		if(x >= this._clippingBox.x1 && y >= this._clippingBox.y1 && x <= this._clippingBox.x2) {
			return y <= this._clippingBox.y2;
		} else {
			return false;
		}
	}
	,clear: function(color) {
		var y = 0;
		if(this._pixelFormatRenderer._rbuf._width != 0) {
			var h = this._pixelFormatRenderer._rbuf._height;
			while(_$UInt_UInt_$Impl_$.gt(h,y)) {
				var len = this._pixelFormatRenderer._rbuf._width;
				var _this = this._pixelFormatRenderer._rbuf;
				var p = _this._start + y * _this._stride + 0;
				while(true) {
					var r = color.r;
					var g = color.g;
					var b = color.b;
					var a = color.a;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
				++y;
			}
		}
	}
	,copyPixel: function(x,y,color) {
		if(this.isInbox(x,y)) {
			this._pixelFormatRenderer.copyPixel(x,y,color);
		}
	}
	,blendPixel: function(x,y,color,cover) {
		if(this.isInbox(x,y)) {
			this._pixelFormatRenderer.blendPixel(x,y,color,cover);
		}
	}
	,pixel: function(x,y) {
		if(this.isInbox(x,y)) {
			return this._pixelFormatRenderer.getPixel(x,y);
		} else {
			return aggx_color_RgbaColor.empty();
		}
	}
	,copyHLine: function(x1,y,x2,color) {
		if(x1 > x2) {
			var t = x2;
			x2 = x1;
			x1 = t;
		}
		if(y > this._clippingBox.y2) {
			return;
		}
		if(y < this._clippingBox.y1) {
			return;
		}
		if(x1 > this._clippingBox.x2) {
			return;
		}
		if(x2 < this._clippingBox.x1) {
			return;
		}
		if(x1 < this._clippingBox.x1) {
			x1 = this._clippingBox.x1;
		}
		if(x2 > this._clippingBox.x2) {
			x2 = this._clippingBox.x2;
		}
		var len = x2 - x1 + 1;
		var _this = this._pixelFormatRenderer._rbuf;
		var p = _this._start + y * _this._stride + (x1 << 2);
		while(true) {
			var r = color.r;
			var g = color.g;
			var b = color.b;
			var a = color.a;
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
			p = p + 4;
			if(!(--len > 0)) {
				break;
			}
		}
	}
	,copyVLine: function(x,y1,y2,color) {
		if(y1 > y2) {
			var t = y2;
			y2 = y1;
			y1 = t;
		}
		if(x > this._clippingBox.x2) {
			return;
		}
		if(x < this._clippingBox.x1) {
			return;
		}
		if(y1 > this._clippingBox.y2) {
			return;
		}
		if(y2 < this._clippingBox.y1) {
			return;
		}
		if(y1 < this._clippingBox.y1) {
			y1 = this._clippingBox.y1;
		}
		if(y2 > this._clippingBox.y2) {
			y2 = this._clippingBox.y2;
		}
		this._pixelFormatRenderer.copyVLine(x,y1,y2 - y1 + 1,color);
	}
	,blendHLine: function(x1,y,x2,c,cover) {
		if(x1 > x2) {
			var t = x2;
			x2 = x1;
			x1 = t;
		}
		if(y > this._clippingBox.y2) {
			return;
		}
		if(y < this._clippingBox.y1) {
			return;
		}
		if(x1 > this._clippingBox.x2) {
			return;
		}
		if(x2 < this._clippingBox.x1) {
			return;
		}
		if(x1 < this._clippingBox.x1) {
			x1 = this._clippingBox.x1;
		}
		if(x2 > this._clippingBox.x2) {
			x2 = this._clippingBox.x2;
		}
		this._pixelFormatRenderer.blendHLine(x1,y,x2 - x1 + 1,c,cover);
	}
	,blendVLine: function(x,y1,y2,color,cover) {
		if(y1 > y2) {
			var t = y2;
			y2 = y1;
			y1 = t;
		}
		if(x > this._clippingBox.x2) {
			return;
		}
		if(x < this._clippingBox.x1) {
			return;
		}
		if(y1 > this._clippingBox.y2) {
			return;
		}
		if(y2 < this._clippingBox.y1) {
			return;
		}
		if(y1 < this._clippingBox.y1) {
			y1 = this._clippingBox.y1;
		}
		if(y2 > this._clippingBox.y2) {
			y2 = this._clippingBox.y2;
		}
		this._pixelFormatRenderer.blendVLine(x,y1,y2 - y1 + 1,color,cover);
	}
	,copyBar: function(x1,y1,x2,y2,color) {
		var rc = new aggx_core_geometry_RectBoxI(x1,y1,x2,y2);
		rc.normalize();
		if(rc.clip(this._clippingBox)) {
			var y = rc.y1;
			var z = rc.y2;
			while(y <= z) {
				var len = rc.x2 - rc.x1 + 1;
				var _this = this._pixelFormatRenderer._rbuf;
				var p = _this._start + y * _this._stride + (rc.x1 << 2);
				while(true) {
					var r = color.r;
					var g = color.g;
					var b = color.b;
					var a = color.a;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
				++y;
			}
		}
	}
	,blendBar: function(x1,y1,x2,y2,color,cover) {
		var rc = new aggx_core_geometry_RectBoxI(x1,y1,x2,y2);
		rc.normalize();
		if(rc.clip(this._clippingBox)) {
			var y = rc.y1;
			var z = rc.y2;
			while(y <= z) this._pixelFormatRenderer.blendHLine(rc.x1,y,rc.x2 - rc.x1 + 1,color,cover);
		}
	}
	,blendSolidHSpan: function(x,y,len,color,covers) {
		if(y > this._clippingBox.y2) {
			return;
		}
		if(y < this._clippingBox.y1) {
			return;
		}
		var offset = covers.get_offset();
		if(x < this._clippingBox.x1) {
			len -= this._clippingBox.x1 - x;
			if(len <= 0) {
				return;
			}
			covers.set_offset(covers.get_offset() + (this._clippingBox.x1 - x));
			x = this._clippingBox.x1;
		}
		if(x + len > this._clippingBox.x2) {
			len = this._clippingBox.x2 - x + 1;
			if(len <= 0) {
				return;
			}
		}
		this._pixelFormatRenderer.blendSolidHSpan(x,y,len,color,covers);
		covers.set_offset(offset);
	}
	,blendSolidVSpan: function(x,y,len,color,covers) {
		if(x > this._clippingBox.x2) {
			return;
		}
		if(x < this._clippingBox.x1) {
			return;
		}
		var offset = covers.get_offset();
		if(y < this._clippingBox.y1) {
			len -= this._clippingBox.y1 - y;
			if(len <= 0) {
				return;
			}
			covers.set_offset(covers.get_offset() + (this._clippingBox.y1 - y));
			y = this._clippingBox.y1;
		}
		if(y + len > this._clippingBox.y2) {
			len = this._clippingBox.y2 - y + 1;
			if(len <= 0) {
				return;
			}
		}
		this._pixelFormatRenderer.blendSolidVSpan(x,y,len,color,covers);
		covers.set_offset(offset);
	}
	,copyColorHSpan: function(x,y,len,colors) {
		if(y > this._clippingBox.y2) {
			return;
		}
		if(y < this._clippingBox.y1) {
			return;
		}
		if(x < this._clippingBox.x1) {
			var d = this._clippingBox.x1 - x;
			len -= d;
			if(len <= 0) {
				return;
			}
			colors.offset += d;
			x = this._clippingBox.x1;
		}
		if(x + len > this._clippingBox.x2) {
			len = this._clippingBox.x2 - x + 1;
			if(len <= 0) {
				return;
			}
		}
		this._pixelFormatRenderer.copyColorHSpan(x,y,len,colors);
	}
	,copyColorVSpan: function(x,y,len,colors) {
		if(x > this._clippingBox.x2) {
			return;
		}
		if(x < this._clippingBox.x1) {
			return;
		}
		if(y < this._clippingBox.y1) {
			var d = this._clippingBox.y1 - y;
			len -= d;
			if(len <= 0) {
				return;
			}
			colors.offset += d;
			y = this._clippingBox.y1;
		}
		if(y + len > this._clippingBox.y2) {
			len = this._clippingBox.y2 - y + 1;
			if(len <= 0) {
				return;
			}
		}
		this._pixelFormatRenderer.copyColorVSpan(x,y,len,colors);
	}
	,blendColorHSpan: function(x,y,len,colors,covers,cover) {
		if(cover == null) {
			cover = 255;
		}
		if(y > this._clippingBox.y2) {
			return;
		}
		if(y < this._clippingBox.y1) {
			return;
		}
		if(x < this._clippingBox.x1) {
			var d = this._clippingBox.x1 - x;
			len -= d;
			if(len <= 0) {
				return;
			}
			if(covers != null) {
				covers.set_offset(covers.get_offset() + d);
			}
			colors.offset += d;
			x = this._clippingBox.x1;
		}
		if(x + len > this._clippingBox.x2) {
			len = this._clippingBox.x2 - x + 1;
			if(len <= 0) {
				return;
			}
		}
		this._pixelFormatRenderer.blendColorHSpan(x,y,len,colors,covers,cover);
	}
	,blendColorVSpan: function(x,y,len,colors,covers,cover) {
		if(cover == null) {
			cover = 255;
		}
		if(x > this._clippingBox.x2) {
			return;
		}
		if(x < this._clippingBox.x1) {
			return;
		}
		if(y < this._clippingBox.y1) {
			var d = this._clippingBox.y1 - y;
			len -= d;
			if(len <= 0) {
				return;
			}
			console.log("src/aggx/renderer/ClippingRenderer.hx:364:","minX: " + this._clippingBox.y1 + " x: " + y);
			if(covers != null) {
				covers.set_offset(covers.get_offset() + d);
			}
			colors.offset += d;
			y = this._clippingBox.y1;
		}
		if(y + len > this._clippingBox.y2) {
			len = this._clippingBox.y2 - y + 1;
			if(len <= 0) {
				return;
			}
		}
		this._pixelFormatRenderer.blendColorVSpan(x,y,len,colors,covers,cover);
	}
	,clipRectArea: function(dst,src,wsrc,hsrc) {
		var rc = new aggx_core_geometry_RectBoxI(0,0,0,0);
		var cb = this._clippingBox;
		++cb.x2;
		++cb.y2;
		if(src.x1 < 0) {
			dst.x1 -= src.x1;
			src.x1 = 0;
		}
		if(src.y1 < 0) {
			dst.y1 -= src.y1;
			src.y1 = 0;
		}
		if(src.x2 > wsrc) {
			src.x2 = wsrc;
		}
		if(src.y2 > hsrc) {
			src.y2 = hsrc;
		}
		if(dst.x1 < cb.x1) {
			src.x1 += cb.x1 - dst.x1;
			dst.x1 = cb.x1;
		}
		if(dst.y1 < cb.y1) {
			src.y1 += cb.y1 - dst.y1;
			dst.y1 = cb.y1;
		}
		if(dst.x2 > cb.x2) {
			dst.x2 = cb.x2;
		}
		if(dst.y2 > cb.y2) {
			dst.y2 = cb.y2;
		}
		rc.x2 = dst.x2 - dst.x1;
		rc.y2 = dst.y2 - dst.y1;
		if(rc.x2 > src.x2 - src.x1) {
			rc.x2 = src.x2 - src.x1;
		}
		if(rc.y2 > src.y2 - src.y1) {
			rc.y2 = src.y2 - src.y1;
		}
		return rc;
	}
	,blendFrom: function(src,rectSrc,dx,dy,cover) {
		if(cover == null) {
			cover = 255;
		}
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		var rsrc = new aggx_core_geometry_RectBoxI(0,0,src._rbuf._width,src._rbuf._height);
		if(rectSrc != null) {
			rsrc.x1 = rectSrc.x1;
			rsrc.y1 = rectSrc.y1;
			rsrc.x2 = rectSrc.x2 + 1;
			rsrc.y2 = rectSrc.y2 + 1;
		}
		var rdst = new aggx_core_geometry_RectBoxI(rsrc.x1 + dx,rsrc.y1 + dy,rsrc.x2 + dx,rsrc.y2 + dy);
		var rc = this.clipRectArea(rdst,rsrc,src._rbuf._width,src._rbuf._height);
		if(rc.x2 > 0) {
			var incy = 1;
			if(rdst.y1 > rsrc.y1) {
				rsrc.y1 += rc.y2 - 1;
				rdst.y1 += rc.y2 - 1;
				incy = -1;
			}
			while(rc.y2 > 0) {
				var _this = src._rbuf;
				var rw = new aggx_RowInfo(0,_this._width - 1,_this._start + rsrc.y1 * _this._stride);
				if(rw.ptr != 0) {
					var x1src = rsrc.x1;
					var x1dst = rdst.x1;
					var len = rc.x2;
					if(rw.x1 > x1src) {
						x1dst += rw.x1 - x1src;
						len -= rw.x1 - x1src;
						x1src = rw.x1;
					}
					if(len > 0) {
						if(x1src + len - 1 > rw.x2) {
							len -= x1src + len - rw.x2 - 1;
						}
						if(len > 0) {
							this._pixelFormatRenderer.blendFrom(src,x1dst,rdst.y1,x1src,rsrc.y1,len,cover);
						}
					}
				}
				rdst.y1 += incy;
				rsrc.y1 += incy;
				--rc.y2;
			}
		}
	}
	,blendFromColor: function(src,color,rectSrc,dx,dy,cover) {
		if(cover == null) {
			cover = 255;
		}
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		var rsrc = new aggx_core_geometry_RectBoxI(0,0,src._rbuf._width,src._rbuf._height);
		if(rectSrc != null) {
			rsrc.x1 = rectSrc.x1;
			rsrc.y1 = rectSrc.y1;
			rsrc.x2 = rectSrc.x2 + 1;
			rsrc.y2 = rectSrc.y2 + 1;
		}
		var rdst = new aggx_core_geometry_RectBoxI(rsrc.x1 + dx,rsrc.y1 + dy,rsrc.x2 + dx,rsrc.y2 + dy);
		var rc = this.clipRectArea(rdst,rsrc,src._rbuf._width,src._rbuf._height);
		if(rc.x2 > 0) {
			var incy = 1;
			if(rdst.y1 > rsrc.y1) {
				rsrc.y1 += rc.y2 - 1;
				rdst.y1 += rc.y2 - 1;
				incy = -1;
			}
			while(rc.y2 > 0) {
				var _this = src._rbuf;
				var rw = new aggx_RowInfo(0,_this._width - 1,_this._start + rsrc.y1 * _this._stride);
				if(rw.ptr != 0) {
					var x1src = rsrc.x1;
					var x1dst = rdst.x1;
					var len = rc.x2;
					if(rw.x1 > x1src) {
						x1dst += rw.x1 - x1src;
						len -= rw.x1 - x1src;
						x1src = rw.x1;
					}
					if(len > 0) {
						if(x1src + len - 1 > rw.x2) {
							len -= x1src + len - rw.x2 - 1;
						}
						if(len > 0) {
							this._pixelFormatRenderer.blendFromColor(src,color,x1dst,rdst.y1,x1src,rsrc.y1,len,cover);
						}
					}
				}
				rdst.y1 += incy;
				rsrc.y1 += incy;
				--rc.y2;
			}
		}
	}
	,blendFromLut: function(src,colorLut,rectSrc,dx,dy,cover) {
		if(cover == null) {
			cover = 255;
		}
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		var rsrc = new aggx_core_geometry_RectBoxI(0,0,src._rbuf._width,src._rbuf._height);
		if(rectSrc != null) {
			rsrc.x1 = rectSrc.x1;
			rsrc.y1 = rectSrc.y1;
			rsrc.x2 = rectSrc.x2 + 1;
			rsrc.y2 = rectSrc.y2 + 1;
		}
		var rdst = new aggx_core_geometry_RectBoxI(rsrc.x1 + dx,rsrc.y1 + dy,rsrc.x2 + dx,rsrc.y2 + dy);
		var rc = this.clipRectArea(rdst,rsrc,src._rbuf._width,src._rbuf._height);
		if(rc.x2 > 0) {
			var incy = 1;
			if(rdst.y1 > rsrc.y1) {
				rsrc.y1 += rc.y2 - 1;
				rdst.y1 += rc.y2 - 1;
				incy = -1;
			}
			while(rc.y2 > 0) {
				var _this = src._rbuf;
				var rw = new aggx_RowInfo(0,_this._width - 1,_this._start + rsrc.y1 * _this._stride);
				if(rw.ptr != 0) {
					var x1src = rsrc.x1;
					var x1dst = rdst.x1;
					var len = rc.x2;
					if(rw.x1 > x1src) {
						x1dst += rw.x1 - x1src;
						len -= rw.x1 - x1src;
						x1src = rw.x1;
					}
					if(len > 0) {
						if(x1src + len - 1 > rw.x2) {
							len -= x1src + len - rw.x2 - 1;
						}
						if(len > 0) {
							this._pixelFormatRenderer.blendFromLut(src,colorLut,x1dst,rdst.y1,x1src,rsrc.y1,len,cover);
						}
					}
				}
				rdst.y1 += incy;
				rsrc.y1 += incy;
				--rc.y2;
			}
		}
	}
	,__class__: aggx_renderer_ClippingRenderer
};
var aggx_renderer_DirectGammaApplier = function(gamma) {
	this._gamma = gamma;
};
aggx_renderer_DirectGammaApplier.__name__ = true;
aggx_renderer_DirectGammaApplier.prototype = {
	apply: function(p) {
		var r = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
		var r1 = r.getDirectGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		var g = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
		var g1 = g.getDirectGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		var b = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
		var b1 = b.getDirectGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		var a = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
		var a1 = a.getDirectGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
		aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r1 | g1 << 8 | b1 << 16 | a1 << 24);
	}
	,__class__: aggx_renderer_DirectGammaApplier
};
var aggx_renderer_InverseGammaApplier = function(gamma) {
	this._gamma = gamma;
};
aggx_renderer_InverseGammaApplier.__name__ = true;
aggx_renderer_InverseGammaApplier.prototype = {
	apply: function(p) {
		var r = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
		var r1 = r.getInverseGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		var g = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
		var g1 = g.getInverseGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		var b = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
		var b1 = b.getInverseGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		var a = this._gamma;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
		var a1 = a.getInverseGamma(aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
		aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r1 | g1 << 8 | b1 << 16 | a1 << 24);
	}
	,__class__: aggx_renderer_InverseGammaApplier
};
var aggx_renderer_PixelFormatRenderer = function(rbuf) {
	this._rbuf = rbuf;
};
aggx_renderer_PixelFormatRenderer.__name__ = true;
aggx_renderer_PixelFormatRenderer.makePix = function(p,color) {
	var r = color.r;
	var g = color.g;
	var b = color.b;
	var a = color.a;
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
	aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
};
aggx_renderer_PixelFormatRenderer.copyOrBlendPix = function(p,cr,cg,cb,alpha,cover) {
	if(cover != 255) {
		if(alpha != 0) {
			alpha = alpha * (cover + 1) >>> 8;
			if(alpha == 256 - 1) {
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
				aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
			} else {
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
				var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
				var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
				var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
				var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
				aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
			}
		}
	} else if(alpha != 0) {
		if(alpha == 256 - 1) {
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
		} else {
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
			var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
			var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
			var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
			var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
		}
	}
};
aggx_renderer_PixelFormatRenderer.copyOrBlendPix2 = function(p,cr,cg,cb,alpha) {
	if(alpha != 0) {
		if(alpha == 256 - 1) {
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
		} else {
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
			var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
			var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
			var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
			var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
		}
	}
};
aggx_renderer_PixelFormatRenderer.premultiplyPixel = function(p) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
	var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
	var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
	var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
	var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	if(_$UInt_UInt_$Impl_$.gt(256 - 1,a)) {
		if(a == 0) {
			b = 0;
			g = b;
			r = g;
		} else {
			r = r * a + (256 - 1) >>> 8;
			g = g * a + (256 - 1) >>> 8;
			b = b * a + (256 - 1) >>> 8;
		}
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
		aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
	}
};
aggx_renderer_PixelFormatRenderer.demultiplyPixel = function(p) {
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
	var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
	var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
	var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
	var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
	if(_$UInt_UInt_$Impl_$.gt(256 - 1,a)) {
		if(a == 0) {
			b = 0;
			g = b;
			r = g;
		} else {
			var rr = _$UInt_UInt_$Impl_$.toFloat(r * (256 - 1)) / _$UInt_UInt_$Impl_$.toFloat(a) | 0;
			var gg = _$UInt_UInt_$Impl_$.toFloat(g * (256 - 1)) / _$UInt_UInt_$Impl_$.toFloat(a) | 0;
			var bb = _$UInt_UInt_$Impl_$.toFloat(b * (256 - 1)) / _$UInt_UInt_$Impl_$.toFloat(a) | 0;
			r = _$UInt_UInt_$Impl_$.gt(rr,256 - 1) ? 256 - 1 : rr;
			g = _$UInt_UInt_$Impl_$.gt(gg,256 - 1) ? 256 - 1 : gg;
			b = _$UInt_UInt_$Impl_$.gt(bb,256 - 1) ? 256 - 1 : bb;
		}
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
		aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
	}
};
aggx_renderer_PixelFormatRenderer.prototype = {
	attach: function(pixf,x1,y1,x2,y2) {
		return false;
	}
	,get_width: function() {
		return this._rbuf._width;
	}
	,get_height: function() {
		return this._rbuf._height;
	}
	,get_stride: function() {
		return this._rbuf._stride;
	}
	,getRowPtr: function(y) {
		var _this = this._rbuf;
		return _this._start + y * _this._stride;
	}
	,getRow: function(y) {
		var _this = this._rbuf;
		return new aggx_RowInfo(0,_this._width - 1,_this._start + y * _this._stride);
	}
	,getPixPtr: function(x,y) {
		var _this = this._rbuf;
		return _this._start + y * _this._stride + x;
	}
	,getPixel: function(x,y) {
		var _this = this._rbuf;
		var p = _this._start + y * _this._stride + (x << 2);
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
		var tmp = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
		var tmp1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
		var tmp2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
		return new aggx_color_RgbaColor(tmp,tmp1,tmp2,aggx_core_memory_MemoryAccess.domainMemory.readUInt8());
	}
	,copyPixel: function(x,y,color) {
		var _this = this._rbuf;
		var r = color.r;
		var g = color.g;
		var b = color.b;
		var a = color.a;
		aggx_core_memory_MemoryAccess.domainMemory.set_offset(_this._start + y * _this._stride + (x << 2));
		aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
	}
	,blendPixel: function(x,y,color,cover) {
		var _this = this._rbuf;
		var ptr = _this._start + y * _this._stride + (x << 2);
		var cr = color.r;
		var cg = color.g;
		var cb = color.b;
		var alpha = color.a;
		if(cover != 255) {
			if(alpha != 0) {
				alpha = alpha * (cover + 1) >>> 8;
				if(alpha == 256 - 1) {
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
				} else {
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 0);
					var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 1);
					var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 2);
					var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 3);
					var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
				}
			}
		} else if(alpha != 0) {
			if(alpha == 256 - 1) {
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr);
				aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
			} else {
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 0);
				var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 1);
				var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 2);
				var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr + 3);
				var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(ptr);
				aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
			}
		}
	}
	,copyHLine: function(x,y,len,color) {
		var _this = this._rbuf;
		var p = _this._start + y * _this._stride + (x << 2);
		while(true) {
			var r = color.r;
			var g = color.g;
			var b = color.b;
			var a = color.a;
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
			p = p + 4;
			if(!(--len > 0)) {
				break;
			}
		}
	}
	,copyVLine: function(x,y,len,color) {
		x <<= 2;
		while(true) {
			var _this = this._rbuf;
			var p = _this._start + y++ * _this._stride + x;
			var r = color.r;
			var g = color.g;
			var b = color.b;
			var a = color.a;
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
			p = p + 4;
			if(!(--len > 0)) {
				break;
			}
		}
	}
	,blendHLine: function(x,y,len,color,cover) {
		if(color.a != 0) {
			var _this = this._rbuf;
			var p = _this._start + y * _this._stride + (x << 2);
			var alpha = color.a * (cover + 1) >>> 8;
			if(alpha == 256 - 1) {
				while(true) {
					var r = color.r;
					var g = color.g;
					var b = color.b;
					var a = color.a;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			} else if(cover == 255) {
				while(true) {
					var cr = color.r;
					var cg = color.g;
					var cb = color.b;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
					var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
					var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
					var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
					var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			} else {
				while(true) {
					var cr1 = color.r;
					var cg1 = color.g;
					var cb1 = color.b;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
					var r2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
					var g2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
					var b2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
					var a2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r2) * alpha + (r2 << 8) >>> 8 | (cg1 - g2) * alpha + (g2 << 8) >>> 8 << 8 | (cb1 - b2) * alpha + (b2 << 8) >>> 8 << 16 | alpha + a2 - (alpha * a2 + (256 - 1) >>> 8) << 24);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			}
		}
	}
	,blendVLine: function(x,y,len,color,cover) {
		if(color.a != 0) {
			x <<= 2;
			var p;
			var alpha = color.a * (cover + 1) >>> 8;
			if(alpha == 256 - 1) {
				while(true) {
					var _this = this._rbuf;
					p = _this._start + y++ * _this._stride + x;
					var r = color.r;
					var g = color.g;
					var b = color.b;
					var a = color.a;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			} else if(cover == 255) {
				while(true) {
					var _this1 = this._rbuf;
					p = _this1._start + y++ * _this1._stride + x;
					var cr = color.r;
					var cg = color.g;
					var cb = color.b;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
					var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
					var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
					var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
					var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
					if(!(--len > 0)) {
						break;
					}
				}
			} else {
				while(true) {
					var _this2 = this._rbuf;
					p = _this2._start + y++ * _this2._stride + x;
					var cr1 = color.r;
					var cg1 = color.g;
					var cb1 = color.b;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
					var r2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
					var g2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
					var b2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
					var a2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r2) * alpha + (r2 << 8) >>> 8 | (cg1 - g2) * alpha + (g2 << 8) >>> 8 << 8 | (cb1 - b2) * alpha + (b2 << 8) >>> 8 << 16 | alpha + a2 - (alpha * a2 + (256 - 1) >>> 8) << 24);
					if(!(--len > 0)) {
						break;
					}
				}
			}
		}
	}
	,blendSolidHSpan: function(x,y,len,color,covers) {
		if(color.a != 0) {
			var _this = this._rbuf;
			var p = _this._start + y * _this._stride + (x << 2);
			while(true) {
				var cover = covers.readUInt8();
				covers.set_offset(covers.get_offset() + 1);
				var alpha = color.a * (cover + 1) >>> 8;
				if(alpha == 256 - 1) {
					color.a = 256 - 1;
					var r = color.r;
					var g = color.g;
					var b = color.b;
					var a = color.a;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
				} else {
					var cr = color.r;
					var cg = color.g;
					var cb = color.b;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
					var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
					var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
					var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
					var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
				}
				p = p + 4;
				if(!(--len > 0)) {
					break;
				}
			}
		}
	}
	,blendSolidVSpan: function(x,y,len,color,covers) {
		if(color.a != 0) {
			x <<= 2;
			while(true) {
				var _this = this._rbuf;
				var p = _this._start + y++ * _this._stride + x;
				var cover = covers.readUInt8();
				covers.set_offset(covers.get_offset() + 1);
				var alpha = color.a * (cover + 1) >>> 8;
				if(alpha == 256 - 1) {
					color.a = 256 - 1;
					var r = color.r;
					var g = color.g;
					var b = color.b;
					var a = color.a;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
				} else {
					var cr = color.r;
					var cg = color.g;
					var cb = color.b;
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
					var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
					var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
					var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
					var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
					aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
				}
				p = p + 4;
				if(!(--len > 0)) {
					break;
				}
			}
		}
	}
	,copyColorHSpan: function(x,y,len,colors) {
		var _this = this._rbuf;
		var p = _this._start + y * _this._stride + (x << 2);
		var ci = colors.offset;
		while(true) {
			var color = colors.data[ci];
			var r = color.r;
			var g = color.g;
			var b = color.b;
			var a = color.a;
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
			p = p + 4;
			++ci;
			if(!(--len > 0)) {
				break;
			}
		}
	}
	,copyColorVSpan: function(x,y,len,colors) {
		var ci = colors.offset;
		x <<= 2;
		while(true) {
			var _this = this._rbuf;
			var p = _this._start + y++ * _this._stride + x;
			var color = colors.data[ci];
			var r = color.r;
			var g = color.g;
			var b = color.b;
			var a = color.a;
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
			aggx_core_memory_MemoryAccess.domainMemory.writeInt32(r | g << 8 | b << 16 | a << 24);
			p = p + 4;
			++ci;
			if(!(--len > 0)) {
				break;
			}
		}
	}
	,blendColorHSpan: function(x,y,len,colors,covers,cover) {
		var ci = colors.offset;
		var color;
		var _this = this._rbuf;
		var p = _this._start + y * _this._stride + (x << 2);
		if(covers != null) {
			while(true) {
				color = colors.data[ci];
				var cr = color.r;
				var cg = color.g;
				var cb = color.b;
				var alpha = color.a;
				var cover1 = covers.readUInt8();
				if(cover1 != 255) {
					if(alpha != 0) {
						alpha = alpha * (cover1 + 1) >>> 8;
						if(alpha == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
							var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
							var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
							var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
							var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
						}
					}
				} else if(alpha != 0) {
					if(alpha == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
						var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
						var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
						var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
						var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
					}
				}
				covers.set_offset(covers.get_offset() + 1);
				p = p + 4;
				++ci;
				if(!(--len > 0)) {
					break;
				}
			}
		} else if(cover == 255) {
			while(true) {
				color = colors.data[ci];
				var cr1 = color.r;
				var cg1 = color.g;
				var cb1 = color.b;
				var alpha1 = color.a;
				if(alpha1 != 0) {
					if(alpha1 == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr1 | cg1 << 8 | cb1 << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
						var r2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
						var g2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
						var b2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
						var a2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r2) * alpha1 + (r2 << 8) >>> 8 | (cg1 - g2) * alpha1 + (g2 << 8) >>> 8 << 8 | (cb1 - b2) * alpha1 + (b2 << 8) >>> 8 << 16 | alpha1 + a2 - (alpha1 * a2 + (256 - 1) >>> 8) << 24);
					}
				}
				p = p + 4;
				++ci;
				if(!(--len > 0)) {
					break;
				}
			}
		} else {
			while(true) {
				color = colors.data[ci];
				var cr2 = color.r;
				var cg2 = color.g;
				var cb2 = color.b;
				var alpha2 = color.a;
				if(cover != 255) {
					if(alpha2 != 0) {
						alpha2 = alpha2 * (cover + 1) >>> 8;
						if(alpha2 == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr2 | cg2 << 8 | cb2 << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
							var r3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
							var g3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
							var b3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
							var a3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr2 - r3) * alpha2 + (r3 << 8) >>> 8 | (cg2 - g3) * alpha2 + (g3 << 8) >>> 8 << 8 | (cb2 - b3) * alpha2 + (b3 << 8) >>> 8 << 16 | alpha2 + a3 - (alpha2 * a3 + (256 - 1) >>> 8) << 24);
						}
					}
				} else if(alpha2 != 0) {
					if(alpha2 == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr2 | cg2 << 8 | cb2 << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
						var r4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
						var g4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
						var b4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
						var a4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr2 - r4) * alpha2 + (r4 << 8) >>> 8 | (cg2 - g4) * alpha2 + (g4 << 8) >>> 8 << 8 | (cb2 - b4) * alpha2 + (b4 << 8) >>> 8 << 16 | alpha2 + a4 - (alpha2 * a4 + (256 - 1) >>> 8) << 24);
					}
				}
				p = p + 4;
				++ci;
				if(!(--len > 0)) {
					break;
				}
			}
		}
	}
	,blendColorVSpan: function(x,y,len,colors,covers,cover) {
		var p;
		var color;
		var ci = colors.offset;
		x <<= 2;
		if(covers != null) {
			while(true) {
				color = colors.data[ci];
				var _this = this._rbuf;
				p = _this._start + y++ * _this._stride + x;
				var cr = color.r;
				var cg = color.g;
				var cb = color.b;
				var alpha = color.a;
				var cover1 = covers.readUInt8();
				if(cover1 != 255) {
					if(alpha != 0) {
						alpha = alpha * (cover1 + 1) >>> 8;
						if(alpha == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
							var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
							var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
							var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
							var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
						}
					}
				} else if(alpha != 0) {
					if(alpha == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
						var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
						var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
						var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
						var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r1) * alpha + (r1 << 8) >>> 8 | (cg - g1) * alpha + (g1 << 8) >>> 8 << 8 | (cb - b1) * alpha + (b1 << 8) >>> 8 << 16 | alpha + a1 - (alpha * a1 + (256 - 1) >>> 8) << 24);
					}
				}
				covers.set_offset(covers.get_offset() + 1);
				p = p + 4;
				++ci;
				if(!(--len > 0)) {
					break;
				}
			}
		} else if(cover == 255) {
			while(true) {
				color = colors.data[ci];
				var _this1 = this._rbuf;
				p = _this1._start + y++ * _this1._stride + x;
				var cr1 = color.r;
				var cg1 = color.g;
				var cb1 = color.b;
				var alpha1 = color.a;
				if(alpha1 != 0) {
					if(alpha1 == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr1 | cg1 << 8 | cb1 << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
						var r2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
						var g2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
						var b2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
						var a2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r2) * alpha1 + (r2 << 8) >>> 8 | (cg1 - g2) * alpha1 + (g2 << 8) >>> 8 << 8 | (cb1 - b2) * alpha1 + (b2 << 8) >>> 8 << 16 | alpha1 + a2 - (alpha1 * a2 + (256 - 1) >>> 8) << 24);
					}
				}
				p = p + 4;
				++ci;
				if(!(--len > 0)) {
					break;
				}
			}
		} else {
			while(true) {
				var _this2 = this._rbuf;
				p = _this2._start + y++ * _this2._stride + x;
				color = colors.data[ci];
				var cr2 = color.r;
				var cg2 = color.g;
				var cb2 = color.b;
				var alpha2 = color.a;
				if(cover != 255) {
					if(alpha2 != 0) {
						alpha2 = alpha2 * (cover + 1) >>> 8;
						if(alpha2 == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr2 | cg2 << 8 | cb2 << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
							var r3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
							var g3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
							var b3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
							var a3 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr2 - r3) * alpha2 + (r3 << 8) >>> 8 | (cg2 - g3) * alpha2 + (g3 << 8) >>> 8 << 8 | (cb2 - b3) * alpha2 + (b3 << 8) >>> 8 << 16 | alpha2 + a3 - (alpha2 * a3 + (256 - 1) >>> 8) << 24);
						}
					}
				} else if(alpha2 != 0) {
					if(alpha2 == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr2 | cg2 << 8 | cb2 << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 0);
						var r4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 1);
						var g4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 2);
						var b4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p + 3);
						var a4 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(p);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr2 - r4) * alpha2 + (r4 << 8) >>> 8 | (cg2 - g4) * alpha2 + (g4 << 8) >>> 8 << 8 | (cb2 - b4) * alpha2 + (b4 << 8) >>> 8 << 16 | alpha2 + a4 - (alpha2 * a4 + (256 - 1) >>> 8) << 24);
					}
				}
				p = p + 4;
				++ci;
				if(!(--len > 0)) {
					break;
				}
			}
		}
	}
	,forEachPixel: function(f) {
		var y = 0;
		var h = this._rbuf._height;
		while(_$UInt_UInt_$Impl_$.gt(h,y)) {
			var _this = this._rbuf;
			var r = new aggx_RowInfo(0,_this._width - 1,_this._start + y * _this._stride);
			if(r.ptr != 0) {
				var len = r.x2 - r.x1 + 1;
				var _this1 = this._rbuf;
				var p = _this1._start + y * _this1._stride + (r.x1 << 2);
				while(true) {
					f(p);
					p = p + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			}
			++y;
		}
	}
	,premultiply: function() {
		this.forEachPixel(aggx_renderer_PixelFormatRenderer.premultiplyPixel);
	}
	,demultiply: function() {
		this.forEachPixel(aggx_renderer_PixelFormatRenderer.demultiplyPixel);
	}
	,applyGammaDir: function(g) {
		this.forEachPixel(($_=new aggx_renderer_DirectGammaApplier(g),$bind($_,$_.apply)));
	}
	,applyGammaInv: function(g) {
		this.forEachPixel(($_=new aggx_renderer_InverseGammaApplier(g),$bind($_,$_.apply)));
	}
	,blendFrom: function(from,xdst,ydst,xsrc,ysrc,len,cover) {
		var _this = from._rbuf;
		var psrc = _this._start + ysrc * _this._stride;
		if(psrc != 0) {
			psrc = psrc + (xsrc << 2);
			var _this1 = this._rbuf;
			var pdst = _this1._start + ydst * _this1._stride + (xdst << 2);
			var incp = 4;
			if(xdst > xsrc) {
				psrc = psrc + (len - 1);
				pdst = pdst + (len - 1);
				incp = -4;
			}
			if(cover == 255) {
				while(true) {
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 0);
					var cr = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 1);
					var cg = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 2);
					var cb = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 3);
					var alpha = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					if(alpha != 0) {
						if(alpha == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
							var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
							var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
							var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
							var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
						}
					}
					psrc = psrc + incp;
					pdst = pdst + incp;
					if(!(--len > 0)) {
						break;
					}
				}
			} else {
				while(true) {
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 0);
					var cr1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 1);
					var cg1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 2);
					var cb1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc + 3);
					var alpha1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
					if(cover != 255) {
						if(alpha1 != 0) {
							alpha1 = alpha1 * (cover + 1) >>> 8;
							if(alpha1 == 256 - 1) {
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
								aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr1 | cg1 << 8 | cb1 << 16 | 256 - 1 << 24);
							} else {
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
								var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
								var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
								var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
								var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
								aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r1) * alpha1 + (r1 << 8) >>> 8 | (cg1 - g1) * alpha1 + (g1 << 8) >>> 8 << 8 | (cb1 - b1) * alpha1 + (b1 << 8) >>> 8 << 16 | alpha1 + a1 - (alpha1 * a1 + (256 - 1) >>> 8) << 24);
							}
						}
					} else if(alpha1 != 0) {
						if(alpha1 == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr1 | cg1 << 8 | cb1 << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
							var r2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
							var g2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
							var b2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
							var a2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r2) * alpha1 + (r2 << 8) >>> 8 | (cg1 - g2) * alpha1 + (g2 << 8) >>> 8 << 8 | (cb1 - b2) * alpha1 + (b2 << 8) >>> 8 << 16 | alpha1 + a2 - (alpha1 * a2 + (256 - 1) >>> 8) << 24);
						}
					}
					psrc = psrc + incp;
					pdst = pdst + incp;
					if(!(--len > 0)) {
						break;
					}
				}
			}
		}
	}
	,blendFromColor: function(from,color,xdst,ydst,xsrc,ysrc,len,cover) {
		var _this = from._rbuf;
		var psrc = _this._start + ysrc * _this._stride;
		if(psrc != 0) {
			var _this1 = this._rbuf;
			var pdst = _this1._start + ydst * _this1._stride + (xdst << 2);
			while(true) {
				var cr = color.r;
				var cg = color.g;
				var cb = color.b;
				aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc);
				var alpha = aggx_core_memory_MemoryAccess.domainMemory.readUInt8() * cover + (256 - 1) >>> 8;
				if(alpha != 0) {
					if(alpha == 256 - 1) {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
					} else {
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
						var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
						var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
						var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
						var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
						aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
						aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
					}
				}
				++psrc;
				pdst = pdst + 4;
				if(!(--len > 0)) {
					break;
				}
			}
		}
	}
	,blendFromLut: function(from,colorLut,xdst,ydst,xsrc,ysrc,len,cover) {
		var _this = from._rbuf;
		var psrc = _this._start + ysrc * _this._stride;
		if(psrc != 0) {
			var _this1 = this._rbuf;
			var pdst = _this1._start + ydst * _this1._stride + (xdst << 2);
			if(cover == 255) {
				while(true) {
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc);
					var color = colorLut[aggx_core_memory_MemoryAccess.domainMemory.readUInt8()];
					var cr = color.r;
					var cg = color.g;
					var cb = color.b;
					var alpha = color.a;
					if(alpha != 0) {
						if(alpha == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr | cg << 8 | cb << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
							var r = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
							var g = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
							var b = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
							var a = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr - r) * alpha + (r << 8) >>> 8 | (cg - g) * alpha + (g << 8) >>> 8 << 8 | (cb - b) * alpha + (b << 8) >>> 8 << 16 | alpha + a - (alpha * a + (256 - 1) >>> 8) << 24);
						}
					}
					++psrc;
					pdst = pdst + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			} else {
				while(true) {
					aggx_core_memory_MemoryAccess.domainMemory.set_offset(psrc);
					var color1 = colorLut[aggx_core_memory_MemoryAccess.domainMemory.readUInt8()];
					var cr1 = color1.r;
					var cg1 = color1.g;
					var cb1 = color1.b;
					var alpha1 = color1.a;
					if(cover != 255) {
						if(alpha1 != 0) {
							alpha1 = alpha1 * (cover + 1) >>> 8;
							if(alpha1 == 256 - 1) {
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
								aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr1 | cg1 << 8 | cb1 << 16 | 256 - 1 << 24);
							} else {
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
								var r1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
								var g1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
								var b1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
								var a1 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
								aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
								aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r1) * alpha1 + (r1 << 8) >>> 8 | (cg1 - g1) * alpha1 + (g1 << 8) >>> 8 << 8 | (cb1 - b1) * alpha1 + (b1 << 8) >>> 8 << 16 | alpha1 + a1 - (alpha1 * a1 + (256 - 1) >>> 8) << 24);
							}
						}
					} else if(alpha1 != 0) {
						if(alpha1 == 256 - 1) {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32(cr1 | cg1 << 8 | cb1 << 16 | 256 - 1 << 24);
						} else {
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 0);
							var r2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 1);
							var g2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 2);
							var b2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst + 3);
							var a2 = aggx_core_memory_MemoryAccess.domainMemory.readUInt8();
							aggx_core_memory_MemoryAccess.domainMemory.set_offset(pdst);
							aggx_core_memory_MemoryAccess.domainMemory.writeInt32((cr1 - r2) * alpha1 + (r2 << 8) >>> 8 | (cg1 - g2) * alpha1 + (g2 << 8) >>> 8 << 8 | (cb1 - b2) * alpha1 + (b2 << 8) >>> 8 << 16 | alpha1 + a2 - (alpha1 * a2 + (256 - 1) >>> 8) << 24);
						}
					}
					++psrc;
					pdst = pdst + 4;
					if(!(--len > 0)) {
						break;
					}
				}
			}
		}
	}
	,__class__: aggx_renderer_PixelFormatRenderer
};
var aggx_renderer_SolidScanlineRenderer = function(clipRen) {
	this._clippingRenderer = clipRen;
	this._color = new aggx_color_RgbaColor();
};
aggx_renderer_SolidScanlineRenderer.__name__ = true;
aggx_renderer_SolidScanlineRenderer.__interfaces__ = [aggx_renderer_IRenderer];
aggx_renderer_SolidScanlineRenderer.renderAASolidScanline = function(sl,render,color) {
	var y = sl.get_y();
	var numSpans = sl.get_spanCount();
	var spanIterator = sl.get_spanIterator();
	while(true) {
		var span = spanIterator.get_current();
		var x = span.x;
		if(span.len > 0) {
			render.blendSolidHSpan(x,y,span.len,color,span.getCovers());
		} else {
			render.blendHLine(x,y,x - span.len - 1,color,span.getCovers().readUInt8());
		}
		--numSpans;
		if(numSpans == 0) {
			break;
		}
		spanIterator.next();
	}
};
aggx_renderer_SolidScanlineRenderer.renderAASolidScanlines = function(ras,sl,ren,color) {
	if(ras.rewindScanlines()) {
		sl.reset(ras._outline._minX,ras._outline._maxX);
		while(ras.sweepScanline(sl)) {
			var y = sl.get_y();
			var num_spans = sl.get_spanCount();
			var spanIterator = sl.get_spanIterator();
			while(true) {
				var span = spanIterator.get_current();
				var x = span.x;
				if(span.len > 0) {
					ren.blendSolidHSpan(x,y,span.len,color,span.getCovers());
				} else {
					ren.blendHLine(x,y,x - span.len - 1,color,span.getCovers().readUInt8());
				}
				--num_spans;
				if(num_spans == 0) {
					break;
				}
				spanIterator.next();
			}
		}
	}
};
aggx_renderer_SolidScanlineRenderer.renderScanlines = function(ras,sl,ren) {
	if(ras.rewindScanlines()) {
		sl.reset(ras._outline._minX,ras._outline._maxX);
		ren.prepare();
		while(ras.sweepScanline(sl)) ren.render(sl);
	}
};
aggx_renderer_SolidScanlineRenderer.prototype = {
	attach: function(clipRen) {
		this._clippingRenderer = clipRen;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		return this._color = value;
	}
	,prepare: function() {
	}
	,render: function(sl) {
		aggx_renderer_SolidScanlineRenderer.renderAASolidScanline(sl,this._clippingRenderer,this._color);
	}
	,__class__: aggx_renderer_SolidScanlineRenderer
};
var aggx_rfpx_ContourSegment = function() {
	this._points = [];
	this._numberOfPoints = 0;
	this._type = -1;
};
aggx_rfpx_ContourSegment.__name__ = true;
aggx_rfpx_ContourSegment.createFirst = function() {
	var seg = new aggx_rfpx_ContourSegment();
	seg._type = 0;
	return seg;
};
aggx_rfpx_ContourSegment.prototype = {
	createNext: function() {
		return new aggx_rfpx_ContourSegment();
	}
	,addPoint: function(x,y) {
		this._points[this._numberOfPoints] = new aggx_core_geometry_Coord(x,y);
		++this._numberOfPoints;
		if(this._type != 0) {
			this._type = _$UInt_UInt_$Impl_$.gt(this._numberOfPoints,1) ? 2 : 1;
		}
	}
	,getPoint: function(idx) {
		return this._points[idx];
	}
	,get_type: function() {
		return this._type;
	}
	,get_numberOfPoints: function() {
		return this._numberOfPoints;
	}
	,__class__: aggx_rfpx_ContourSegment
};
var aggx_rfpx_Glyph = function(glyphTable,glyphIndex,hmtx,hhea) {
	this._leftSideBearing = hmtx.getLSB(glyphIndex);
	this._advanceWidth = hmtx.getLHM(glyphIndex)._advanceWidth;
	this._advanceHeight = hhea._ascender - hhea._descender + hhea._lineGap;
	this._record = glyphTable.getGlyphRecord(glyphIndex);
	this._index = glyphIndex;
	this._numberOfContours = 0;
	if(this._record != null) {
		this._bounds = new aggx_core_geometry_RectBox();
		this._bounds.x1 = this._record._xMin;
		this._bounds.y1 = this._record._yMin;
		this._bounds.x2 = this._record._xMax;
		this._bounds.y2 = this._record._yMax;
		this.processGlyph(glyphTable);
	}
};
aggx_rfpx_Glyph.__name__ = true;
aggx_rfpx_Glyph.prototype = {
	processGlyph: function(glyphTable) {
		if(this._record._isSimple) {
			this.processSimpleGlyph(this._record);
		} else {
			this.processCompositeGlyph(glyphTable);
		}
	}
	,processSimpleGlyph: function(glyphRecord,transformer) {
		var descr = glyphRecord._simpleDescr;
		var numCont = descr._endPtsOfContours.length;
		if(this._outline == null) {
			this._outline = new Array(numCont);
		} else {
			var tempOutline = new Array(this._outline.length + numCont);
			var _g = 0;
			var _g1 = this._outline.length;
			while(_g < _g1) {
				var i = _g++;
				tempOutline[i] = this._outline[i];
			}
			this._outline = tempOutline;
		}
		var i1 = 0;
		while(_$UInt_UInt_$Impl_$.gt(numCont,i1)) {
			var contourPoints = [];
			descr.getContourPoints(i1,contourPoints,transformer);
			this._outline[this._numberOfContours] = new aggx_rfpx_GlyphContour(contourPoints);
			++this._numberOfContours;
			++i1;
		}
	}
	,processCompositeGlyph: function(glyphTable) {
		var descr = this._record._compositeDescr;
		var i = 0;
		var count = descr._components.length;
		while(_$UInt_UInt_$Impl_$.gt(count,i)) {
			var component = descr.getComponent(i);
			var glyphRecord = glyphTable.getGlyphRecord(component._glyphIndex);
			var m = aggx_core_geometry_AffineTransformer.scaler(component._xscale,component._yscale);
			m.multiply(aggx_core_geometry_AffineTransformer.translator(component._xtranslate,component._ytranslate));
			this.processSimpleGlyph(glyphRecord,m);
			++i;
		}
	}
	,getContourSegments: function(idx) {
		return new aggx_rfpx_SegmentIterator(this._outline[idx]);
	}
	,get_advanceWidth: function() {
		return this._advanceWidth;
	}
	,get_advanceHeight: function() {
		return this._advanceHeight;
	}
	,get_leftSideBearing: function() {
		return this._leftSideBearing;
	}
	,get_record: function() {
		return this._record;
	}
	,get_bounds: function() {
		return this._bounds;
	}
	,get_index: function() {
		return this._index;
	}
	,get_numberOfContours: function() {
		return this._numberOfContours;
	}
	,__class__: aggx_rfpx_Glyph
};
var aggx_rfpx_GlyphContour = function(points) {
	this._segments = [];
	this._numberOfSegments = 0;
	this.construct(points);
};
aggx_rfpx_GlyphContour.__name__ = true;
aggx_rfpx_GlyphContour.prototype = {
	construct: function(points) {
		var numPoints = points.length;
		var createNewSegment = false;
		var currentPoint = null;
		var seg = new aggx_rfpx_ContourSegment();
		seg._type = 0;
		var segment = seg;
		seg.addPoint(points[0].x,points[0].y);
		this._segments[this._numberOfSegments] = seg;
		++this._numberOfSegments;
		var tmp = this._segments;
		var tmp1 = this._numberOfSegments;
		segment = seg.createNext();
		tmp[tmp1] = segment;
		++this._numberOfSegments;
		var m = 1;
		if(_$UInt_UInt_$Impl_$.gt(numPoints,2)) {
			while(_$UInt_UInt_$Impl_$.gte(numPoints,m)) {
				if(m == numPoints) {
					if((currentPoint.tag & 1) != 0) {
						segment = segment.createNext();
						segment.addPoint(points[0].x,points[0].y);
						this._segments[this._numberOfSegments] = segment;
						++this._numberOfSegments;
					} else {
						segment.addPoint(points[0].x,points[0].y);
					}
					break;
				}
				currentPoint = points[m++];
				if(createNewSegment) {
					var tmp2 = this._segments;
					var tmp3 = this._numberOfSegments;
					segment = segment.createNext();
					tmp2[tmp3] = segment;
					++this._numberOfSegments;
					createNewSegment = false;
				}
				if((currentPoint.tag & 1) != 0) {
					segment.addPoint(currentPoint.x,currentPoint.y);
					createNewSegment = true;
					continue;
				} else {
					if(_$UInt_UInt_$Impl_$.gt(segment._numberOfPoints,0)) {
						var a = new aggx_core_geometry_Coord(0,0);
						var b = segment.getPoint(0);
						var c = currentPoint;
						a.x = b.x - (b.x - c.x) / 2;
						a.y = b.y - (b.y - c.y) / 2;
						segment.addPoint(a.x,a.y);
						var tmp4 = this._segments;
						var tmp5 = this._numberOfSegments;
						segment = segment.createNext();
						tmp4[tmp5] = segment;
						++this._numberOfSegments;
					}
					segment.addPoint(currentPoint.x,currentPoint.y);
				}
			}
		}
	}
	,get_numberOfSegments: function() {
		return this._numberOfSegments;
	}
	,get_segmentIterator: function() {
		return new aggx_rfpx_SegmentIterator(this);
	}
	,__class__: aggx_rfpx_GlyphContour
};
var aggx_rfpx_GlyphPoint = function(_x,_y,_tag) {
	this.x = _x;
	this.y = _y;
	this.tag = _tag;
};
aggx_rfpx_GlyphPoint.__name__ = true;
aggx_rfpx_GlyphPoint.FT_CURVE_TAG = function(flag) {
	return (flag & 3) != 0;
};
aggx_rfpx_GlyphPoint.prototype = {
	__class__: aggx_rfpx_GlyphPoint
};
var aggx_rfpx_SegmentIterator = function(contour) {
	this._contour = contour;
	this._segmentIndex = 0;
};
aggx_rfpx_SegmentIterator.__name__ = true;
aggx_rfpx_SegmentIterator.prototype = {
	initialize: function() {
		this._segmentIndex = 0;
	}
	,next: function() {
		++this._segmentIndex;
		return _$UInt_UInt_$Impl_$.gt(this._contour._numberOfSegments,this._segmentIndex);
	}
	,get_current: function() {
		return this._contour._segments[this._segmentIndex];
	}
	,__class__: aggx_rfpx_SegmentIterator
};
var aggx_rfpx_TrueTypeCollection = function() {
};
aggx_rfpx_TrueTypeCollection.__name__ = true;
aggx_rfpx_TrueTypeCollection.create = function(file,pathName) {
	if(pathName == null) {
		pathName = "";
	}
	var fc = new aggx_rfpx_TrueTypeCollection();
	fc.read(file,pathName);
	return fc;
};
aggx_rfpx_TrueTypeCollection.prototype = {
	getFont: function(i) {
		return this._fonts[i];
	}
	,get_fontCount: function() {
		return this._fonts.length;
	}
	,read: function(file,pathName) {
		if(pathName == null) {
			pathName = "";
		}
		if(!aggx_rfpx_data_TTCHeader.isTTC(file)) {
			this._fonts = new Array(1);
			this._fonts[0] = new aggx_rfpx_TrueTypeFont(this);
			this._fonts[0].read(file);
		}
	}
	,getFontName: function() {
		return this._fonts[0].getName();
	}
	,__class__: aggx_rfpx_TrueTypeCollection
};
var aggx_rfpx_TrueTypeFont = function(fc) {
	this._fc = fc;
};
aggx_rfpx_TrueTypeFont.__name__ = true;
aggx_rfpx_TrueTypeFont.prototype = {
	get_ascender: function() {
		return this._hhea._ascender;
	}
	,get_descender: function() {
		return this._hhea._descender;
	}
	,get_lineGap: function() {
		return this._hhea._lineGap;
	}
	,get_unitsPerEm: function() {
		return this._head._unitsPerEm;
	}
	,getGlyph: function(idx) {
		return new aggx_rfpx_Glyph(this._glyf,idx,this._hmtx,this._hhea);
	}
	,getGlyphByCharCode: function(code) {
		var idx = this._cmap.getGlyphIndex(code);
		return new aggx_rfpx_Glyph(this._glyf,idx,this._hmtx,this._hhea);
	}
	,getTableRecord: function(tag) {
		var i = 0;
		var numTables = this._tableRecords.length;
		while(_$UInt_UInt_$Impl_$.gt(numTables,i)) {
			if(this._tableRecords[i]._tag == tag) {
				return this._tableRecords[i];
			}
			++i;
		}
		return null;
	}
	,getTableRecordOffset: function(tag,data,baseOffset) {
		var tr = this.getTableRecord(tag);
		data.set_offset(tr._offset);
		return tr;
	}
	,parseTables: function(data) {
		var offset = data.get_offset();
		this._cmap = new aggx_rfpx_data_CmapTable(this.getTableRecordOffset(1668112752,data,offset),data);
		this._head = new aggx_rfpx_data_HeadTable(this.getTableRecordOffset(1751474532,data,offset),data);
		this._maxp = new aggx_rfpx_data_MaxpTable(this.getTableRecordOffset(1835104368,data,offset),data);
		this._hhea = new aggx_rfpx_data_HheaTable(this.getTableRecordOffset(1751672161,data,offset),data);
		this._hmtx = new aggx_rfpx_data_HmtxTable(this.getTableRecordOffset(1752003704,data,offset),data,this._maxp._numGlyphs,this._hhea._numberOfHMetrics);
		this._name = new aggx_rfpx_data_NameTable(this.getTableRecordOffset(1851878757,data,offset),data);
		this._os2 = new aggx_rfpx_data_Os2Table(this.getTableRecordOffset(1330851634,data,offset),data);
		this._post = new aggx_rfpx_data_PostTable(this.getTableRecordOffset(1886352244,data,offset),data);
		this._loca = new aggx_rfpx_data_LocaTable(this.getTableRecordOffset(1819239265,data,offset),data,this._maxp._numGlyphs,this._head._indexToLocFormat);
		this._glyf = new aggx_rfpx_data_GlyfTable(this.getTableRecordOffset(1735162214,data,offset),data,this._maxp._numGlyphs,this._loca);
	}
	,read: function(data) {
		var numTables = new aggx_rfpx_data_OffsetTable(data)._numTables;
		this._tableRecords = new Array(numTables);
		var i = 0;
		while(_$UInt_UInt_$Impl_$.gt(numTables,i)) {
			this._tableRecords[i] = new aggx_rfpx_data_TableRecord(data);
			++i;
		}
		this.parseTables(data);
	}
	,getName: function() {
		return this._name.fontName;
	}
	,__class__: aggx_rfpx_TrueTypeFont
};
var aggx_rfpx_TrueTypeLoader = function(ttfFileData) {
	this.ttfFileData = ttfFileData;
};
aggx_rfpx_TrueTypeLoader.__name__ = true;
aggx_rfpx_TrueTypeLoader.prototype = {
	load: function(onLoadComplete) {
		onLoadComplete(aggx_rfpx_TrueTypeCollection.create(this.ttfFileData));
	}
	,__class__: aggx_rfpx_TrueTypeLoader
};
var aggx_rfpx_data_CmapFormat0 = function(data,encRecord) {
	this._format = 0;
	var x0 = data.readUInt16();
	this._length = (x0 & 255) << 8 | x0 >> 8 & 255;
	var _g = data;
	_g.set_offset(_g.get_offset() + 2);
	var x01 = data.readUInt16();
	this._language = (x01 & 255) << 8 | x01 >> 8 & 255;
	var _g1 = data;
	_g1.set_offset(_g1.get_offset() + 2);
	var upper = this.getUpper129(encRecord._platformID,encRecord._encodingID,this._language);
	this._glyphIdArray = new Array(256);
	var _g2 = 0;
	while(_g2 < 256) this._glyphIdArray[_g2++] = 0;
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(126,i)) {
		this._glyphIdArray[data.readUInt8()] = i;
		var _g11 = data;
		_g11.set_offset(_g11.get_offset() + 1);
		++i;
	}
	while(_$UInt_UInt_$Impl_$.gt(256,i)) {
		this._glyphIdArray[data.readUInt8()] = HxOverrides.cca(upper,i - 127);
		var _g12 = data;
		_g12.set_offset(_g12.get_offset() + 1);
		++i;
	}
	this._glyphIdArray[0] = 0;
};
aggx_rfpx_data_CmapFormat0.__name__ = true;
aggx_rfpx_data_CmapFormat0.prototype = {
	getUpper129: function(platform,encoding,language) {
		if(platform != 1) {
			return null;
		}
		switch(encoding) {
		case 0:
			if(language == 16) {
				return aggx_rfpx_data_CmapFormat0.UPPER_ICELANDIC;
			} else if(language == 18) {
				return aggx_rfpx_data_CmapFormat0.UPPER_TURKISH;
			} else if(language == 19) {
				return aggx_rfpx_data_CmapFormat0.UPPER_CROATIAN;
			} else if(language == 38) {
				return aggx_rfpx_data_CmapFormat0.UPPER_ROMANIAN;
			} else if(language == 0) {
				return aggx_rfpx_data_CmapFormat0.UPPER_ROMAN;
			} else {
				return null;
			}
			break;
		case 4:
			if(language == 32) {
				return aggx_rfpx_data_CmapFormat0.UPPER_FARSI;
			} else {
				return aggx_rfpx_data_CmapFormat0.UPPER_ARABIC;
			}
			break;
		case 5:
			return aggx_rfpx_data_CmapFormat0.UPPER_HEBREW;
		case 6:
			return aggx_rfpx_data_CmapFormat0.UPPER_GREEK;
		case 7:
			return aggx_rfpx_data_CmapFormat0.UPPER_CYRILLIC;
		case 29:
			return aggx_rfpx_data_CmapFormat0.UPPER_EAST_EUROPEAN_ROMAN;
		}
		return null;
	}
	,__class__: aggx_rfpx_data_CmapFormat0
};
var aggx_rfpx_data_CmapFormat2 = function(data) {
	this._format = 2;
	this._subHeaderKeys = new Array(256);
	var x0 = data.readUInt16();
	this._length = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._language = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(256,i)) {
		var this1 = this._subHeaderKeys;
		var x02 = data.readUInt16();
		this1[i] = (x02 & 255) << 8 | x02 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
};
aggx_rfpx_data_CmapFormat2.__name__ = true;
aggx_rfpx_data_CmapFormat2.prototype = {
	__class__: aggx_rfpx_data_CmapFormat2
};
var aggx_rfpx_data_CmapFormat4 = function(data) {
	this._format = 4;
	this.originalOffset = data.get_offset();
	var x0 = data.readUInt16();
	this._length = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._language = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._segCountX2 = (x02 & 255) << 8 | x02 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x03 = data.readUInt16();
	this._searchRange = (x03 & 255) << 8 | x03 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x04 = data.readUInt16();
	this._entrySelector = (x04 & 255) << 8 | x04 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x05 = data.readUInt16();
	this._rangeShift = (x05 & 255) << 8 | x05 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var segCount = this._segCountX2 >>> 1;
	this._endCount = new Array(segCount);
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(segCount,i)) {
		var this1 = this._endCount;
		var x06 = data.readUInt16();
		this1[i] = (x06 & 255) << 8 | x06 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
	this._reservedPad = 0;
	data.set_offset(data.get_offset() + 2);
	this._startCount = new Array(segCount);
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(segCount,i)) {
		var this2 = this._startCount;
		var x07 = data.readUInt16();
		this2[i] = (x07 & 255) << 8 | x07 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
	this._idDelta = new Array(segCount);
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(segCount,i)) {
		var this3 = this._idDelta;
		var x08 = data.readUInt16();
		this3[i] = ((x08 & 255) << 8 | x08 >> 8 & 255) << 16 >> 16;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
	this._idRangeOffset = new Array(segCount);
	this._idRangeOffsetPtr = data.get_offset() - this.originalOffset;
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(segCount,i)) {
		var this4 = this._idRangeOffset;
		var x09 = data.readUInt16();
		this4[i] = ((x09 & 255) << 8 | x09 >> 8 & 255) << 16 >> 16;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
	var x010 = data.readUInt16();
	this._glyphIndexArray = (x010 & 255) << 8 | x010 >> 8 & 255;
	this._mapData = new types_Data(this._length);
	data.set_offset(this.originalOffset);
	var prevOffsetLength = data.get_offsetLength();
	data.set_offsetLength(this._length);
	this._mapData.writeData(data);
	data.set_offsetLength(prevOffsetLength);
};
aggx_rfpx_data_CmapFormat4.__name__ = true;
aggx_rfpx_data_CmapFormat4.prototype = {
	getGlyphIndex: function(charCode) {
		var glyphIndex = 0;
		var segment = this.findFormat4Segment(charCode);
		if(segment < 0) {
			return 0;
		}
		if(this._idRangeOffset[segment] == 0) {
			glyphIndex = _$UInt_UInt_$Impl_$.toFloat(this._idDelta[segment] + charCode) % _$UInt_UInt_$Impl_$.toFloat(65536) | 0;
		} else {
			var v0 = this._idRangeOffset[segment];
			var v1 = charCode - this._startCount[segment] << 1;
			var previousMemory = aggx_core_memory_MemoryAccess.domainMemory;
			aggx_core_memory_MemoryAccess.domainMemory = this._mapData;
			aggx_core_memory_MemoryAccess.domainMemory.set_offset(v0 + v1 + (this._idRangeOffsetPtr + (segment << 1)));
			var x0 = aggx_core_memory_MemoryAccess.domainMemory.readUInt16();
			var result = (x0 & 255) << 8 | x0 >> 8 & 255;
			aggx_core_memory_MemoryAccess.domainMemory = previousMemory;
			if(result != 0) {
				glyphIndex = _$UInt_UInt_$Impl_$.toFloat(this._idDelta[segment] + result) % _$UInt_UInt_$Impl_$.toFloat(65536) | 0;
			} else {
				glyphIndex = 0;
			}
		}
		return glyphIndex;
	}
	,findFormat4Segment: function(charCode) {
		var segment = -1;
		var segCount = this._segCountX2 >>> 1;
		var i = 0;
		while(_$UInt_UInt_$Impl_$.gt(segCount,i) && _$UInt_UInt_$Impl_$.gt(charCode,this._endCount[i])) ++i;
		if(_$UInt_UInt_$Impl_$.gte(i,segCount)) {
			segment = -1;
		}
		if(_$UInt_UInt_$Impl_$.gt(this._startCount[i],charCode)) {
			segment = -1;
		}
		segment = i;
		return segment;
	}
	,find: function(c) {
		var min = 0;
		var max = (this._segCountX2 >>> 1) - 1;
		var mid = max >>> 1;
		while(_$UInt_UInt_$Impl_$.gt(max,min)) {
			var val = this._endCount[mid];
			if(val == c) {
				break;
			} else if(_$UInt_UInt_$Impl_$.gt(c,val)) {
				min = mid + 1;
			} else if(_$UInt_UInt_$Impl_$.gt(val,c)) {
				max = mid;
			}
			mid = min + max >>> 1;
		}
		return mid;
	}
	,__class__: aggx_rfpx_data_CmapFormat4
};
var aggx_rfpx_data_CmapFormat6 = function(data) {
	this._format = 0;
	var x0 = data.readUInt16();
	this._length = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._language = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._firstCode = (x02 & 255) << 8 | x02 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x03 = data.readUInt16();
	this._entryCount = (x03 & 255) << 8 | x03 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	this._glyphIdArray = new Array(this._entryCount);
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(this._entryCount,i)) {
		var this1 = this._glyphIdArray;
		var x04 = data.readUInt16();
		this1[i] = (x04 & 255) << 8 | x04 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
};
aggx_rfpx_data_CmapFormat6.__name__ = true;
aggx_rfpx_data_CmapFormat6.prototype = {
	__class__: aggx_rfpx_data_CmapFormat6
};
var aggx_rfpx_data_CmapTable = function(record,data) {
	this._tableRecord = record;
	this._formats0 = [];
	this._formats2 = [];
	this._formats4 = [];
	this._formats6 = [];
	var dataPtr = data.get_offset();
	var x0 = data.readUInt16();
	this._version = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._numTables = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var encRecords = new Array(this._numTables);
	var _g = 0;
	var _g1 = this._numTables;
	while(_g < _g1) encRecords[_g++] = new aggx_rfpx_data_EncodingRecord(data);
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(this._numTables,i)) {
		var encRecord = encRecords[i];
		data.set_offset(dataPtr + encRecord._offset);
		var x02 = data.readUInt16();
		data.set_offset(data.get_offset() + 2);
		switch((x02 & 255) << 8 | x02 >> 8 & 255) {
		case 0:
			this._formats0.push(new aggx_rfpx_data_CmapFormat0(data,encRecord));
			break;
		case 2:
			this._formats2.push(new aggx_rfpx_data_CmapFormat2(data));
			break;
		case 4:
			this._formats4.push(new aggx_rfpx_data_CmapFormat4(data));
			break;
		case 6:
			this._formats6.push(new aggx_rfpx_data_CmapFormat6(data));
			break;
		}
		++i;
	}
};
aggx_rfpx_data_CmapTable.__name__ = true;
aggx_rfpx_data_CmapTable.prototype = {
	getGlyphIndex: function(charCode) {
		return this._formats4[0].getGlyphIndex(charCode);
	}
	,__class__: aggx_rfpx_data_CmapTable
};
var aggx_rfpx_data_EncodingRecord = function(data) {
	var x0 = data.readUInt16();
	this._platformID = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._encodingID = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readInt32();
	this._offset = (x02 >>> 0 & 255) << 24 | (x02 >>> 8 & 255) << 16 | (x02 >>> 16 & 255) << 8 | x02 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
};
aggx_rfpx_data_EncodingRecord.__name__ = true;
aggx_rfpx_data_EncodingRecord.prototype = {
	get_offset: function() {
		return this._offset;
	}
	,get_platformID: function() {
		return this._platformID;
	}
	,get_encodingID: function() {
		return this._encodingID;
	}
	,__class__: aggx_rfpx_data_EncodingRecord
};
var aggx_rfpx_data_GlyfTable = function(record,data,numGlyphs,locaTable) {
	var offset = data.get_offset();
	this._tableRecord = record;
	this._glyphRecords = new Array(numGlyphs);
	var i = 0;
	var z = numGlyphs - 1;
	while(_$UInt_UInt_$Impl_$.gt(numGlyphs,i)) {
		if(_$UInt_UInt_$Impl_$.gt(z,i) && _$UInt_UInt_$Impl_$.gt(locaTable.getOffset(i + 1) - locaTable.getOffset(i),0)) {
			data.set_offset(offset + locaTable.getOffset(i));
			this._glyphRecords[i] = new aggx_rfpx_data_GlyphRecord(data);
		} else {
			this._glyphRecords[i] = null;
		}
		++i;
	}
};
aggx_rfpx_data_GlyfTable.__name__ = true;
aggx_rfpx_data_GlyfTable.prototype = {
	getGlyphRecord: function(idx) {
		if(idx < this._glyphRecords.length) {
			return this._glyphRecords[idx];
		} else {
			return null;
		}
	}
	,__class__: aggx_rfpx_data_GlyfTable
};
var aggx_rfpx_data_GlyphDescrComp = function(data) {
	this._components = [];
	var comp;
	while(true) {
		var tmp = this._components;
		var tmp1 = this._components.length;
		comp = new aggx_rfpx_data_GlyphRecordComp(data);
		tmp[tmp1] = comp;
		if(!((comp._flags & 1 << aggx_rfpx_data_GlyphRecordComp.MORE_COMPONENTS) != 0)) {
			break;
		}
	}
};
aggx_rfpx_data_GlyphDescrComp.__name__ = true;
aggx_rfpx_data_GlyphDescrComp.prototype = {
	getComponent: function(idx) {
		return this._components[idx];
	}
	,get_componentsCount: function() {
		return this._components.length;
	}
	,__class__: aggx_rfpx_data_GlyphDescrComp
};
var aggx_rfpx_data_GlyphDescrSimple = function(data,numberOfContours) {
	this._endPtsOfContours = new Array(numberOfContours);
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(numberOfContours,i)) {
		var this1 = this._endPtsOfContours;
		var x0 = data.readUInt16();
		this1[i] = (x0 & 255) << 8 | x0 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
	var x01 = data.readUInt16();
	this._instructionLength = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	this._instructions = new Array(this._instructionLength);
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(this._instructionLength,i)) {
		this._instructions[i] = data.readInt8();
		data.set_offset(data.get_offset() + 1);
		++i;
	}
	this._numberOfPoints = this._endPtsOfContours[this._endPtsOfContours.length - 1] + 1;
	var count = 0;
	var c = 0;
	this._tags = new Array(this._numberOfPoints);
	var _g = 0;
	var _g1 = this._numberOfPoints;
	while(_g < _g1) this._tags[_g++] = 0;
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(this._numberOfPoints,i)) {
		c = data.readUInt8();
		this._tags[i++] = c;
		data.set_offset(data.get_offset() + 1);
		if((c & 8) != 0) {
			count = data.readUInt8();
			data.set_offset(data.get_offset() + 1);
			while(_$UInt_UInt_$Impl_$.gt(count,0)) {
				this._tags[i++] = c;
				--count;
			}
		}
	}
	this._xCoordinates = new Array(this._numberOfPoints);
	this._yCoordinates = new Array(this._numberOfPoints);
	var x = 0;
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(this._numberOfPoints,i)) {
		var f = this._tags[i];
		var y = 0;
		if((f & 2) != 0) {
			y = data.readUInt8();
			data.set_offset(data.get_offset() + 1);
			if((f & 16) == 0) {
				y = -y;
			}
		} else if((f & 16) == 0) {
			var x02 = data.readUInt16();
			y = ((x02 & 255) << 8 | x02 >> 8 & 255) << 16 >> 16;
			data.set_offset(data.get_offset() + 2);
		}
		x += y;
		this._xCoordinates[i] = x;
		++i;
	}
	x = 0;
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(this._numberOfPoints,i)) {
		var f1 = this._tags[i];
		var y1 = 0;
		if((f1 & 4) != 0) {
			y1 = data.readUInt8();
			data.set_offset(data.get_offset() + 1);
			if((f1 & 32) == 0) {
				y1 = -y1;
			}
		} else if((f1 & 32) == 0) {
			var x03 = data.readUInt16();
			y1 = ((x03 & 255) << 8 | x03 >> 8 & 255) << 16 >> 16;
			data.set_offset(data.get_offset() + 2);
		}
		x += y1;
		this._yCoordinates[i] = x;
		++i;
	}
};
aggx_rfpx_data_GlyphDescrSimple.__name__ = true;
aggx_rfpx_data_GlyphDescrSimple.prototype = {
	get_numberOfPoints: function() {
		return this._numberOfPoints;
	}
	,get_numberOfContours: function() {
		return this._endPtsOfContours.length;
	}
	,getContourPoints: function(contourIndex,pts,transform) {
		var _from = 0;
		var _to = this._endPtsOfContours[contourIndex];
		if(_$UInt_UInt_$Impl_$.gt(contourIndex,0)) {
			_from = this._endPtsOfContours[contourIndex - 1] + 1;
		}
		var rx = aggx_core_memory_Ref.getFloat();
		var ry = aggx_core_memory_Ref.getFloat();
		while(_$UInt_UInt_$Impl_$.gte(_to,_from)) {
			var x = this._xCoordinates[_from];
			var y = this._yCoordinates[_from];
			if(transform != null) {
				rx.value = x;
				ry.value = y;
				transform.transform(rx,ry);
				x = rx.value | 0;
				y = ry.value | 0;
			}
			pts.push(new aggx_rfpx_GlyphPoint(x,y,this._tags[_from]));
			++_from;
		}
		aggx_core_memory_Ref.putFloat(rx);
		aggx_core_memory_Ref.putFloat(ry);
	}
	,__class__: aggx_rfpx_data_GlyphDescrSimple
};
var aggx_rfpx_data_GlyphRecord = function(data) {
	var x0 = data.readUInt16();
	this._numberOfContours = ((x0 & 255) << 8 | x0 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._xMin = ((x01 & 255) << 8 | x01 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._yMin = ((x02 & 255) << 8 | x02 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x03 = data.readUInt16();
	this._xMax = ((x03 & 255) << 8 | x03 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x04 = data.readUInt16();
	this._yMax = ((x04 & 255) << 8 | x04 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	if(this._numberOfContours > 0) {
		this._simpleDescr = new aggx_rfpx_data_GlyphDescrSimple(data,this._numberOfContours);
		this._isSimple = true;
	} else if(this._numberOfContours < 0) {
		this._compositeDescr = new aggx_rfpx_data_GlyphDescrComp(data);
		this._isSimple = false;
	} else {
		throw new js__$Boot_HaxeError("Empty glyph");
	}
};
aggx_rfpx_data_GlyphRecord.__name__ = true;
aggx_rfpx_data_GlyphRecord.prototype = {
	get_isSimple: function() {
		return this._isSimple;
	}
	,get_simpleDescr: function() {
		return this._simpleDescr;
	}
	,get_compositeDescr: function() {
		return this._compositeDescr;
	}
	,get_xMin: function() {
		return this._xMin;
	}
	,get_yMin: function() {
		return this._yMin;
	}
	,get_xMax: function() {
		return this._xMax;
	}
	,get_yMax: function() {
		return this._yMax;
	}
	,get_numberOfContours: function() {
		return this._numberOfContours;
	}
	,__class__: aggx_rfpx_data_GlyphRecord
};
var aggx_rfpx_data_GlyphRecordComp = function(data) {
	this._xscale = 1.0;
	this._yscale = 1.0;
	this._scale01 = 0.0;
	this._scale10 = 0.0;
	this._xtranslate = 0;
	this._ytranslate = 0;
	this._point1 = 0;
	this._point2 = 0;
	var x0 = data.readUInt16();
	this._flags = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._glyphIndex = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	if((this._flags & 1 << aggx_rfpx_data_GlyphRecordComp.ARG_1_AND_2_ARE_WORDS) != 0) {
		var x02 = data.readUInt16();
		this._argument1 = ((x02 & 255) << 8 | x02 >> 8 & 255) << 16 >> 16;
		data.set_offset(data.get_offset() + 2);
		var x03 = data.readUInt16();
		this._argument2 = ((x03 & 255) << 8 | x03 >> 8 & 255) << 16 >> 16;
		data.set_offset(data.get_offset() + 2);
	} else {
		this._argument1 = data.readInt8();
		data.set_offset(data.get_offset() + 1);
		this._argument2 = data.readUInt8();
		data.set_offset(data.get_offset() + 1);
	}
	if((this._flags & 1 << aggx_rfpx_data_GlyphRecordComp.ARGS_ARE_XY_VALUES) != 0) {
		this._xtranslate = this._argument1;
		this._ytranslate = this._argument2;
	} else {
		this._point1 = this._argument1;
		this._point2 = this._argument2;
	}
	if((this._flags & 1 << aggx_rfpx_data_GlyphRecordComp.WE_HAVE_A_SCALE) != 0) {
		this._xscale = this._yscale = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
	} else if((this._flags & 1 << aggx_rfpx_data_GlyphRecordComp.WE_HAVE_AN_X_AND_Y_SCALE) != 0) {
		this._xscale = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
		this._yscale = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
	} else if((this._flags & 1 << aggx_rfpx_data_GlyphRecordComp.WE_HAVE_A_TWO_BY_TWO) != 0) {
		this._xscale = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
		this._scale01 = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
		this._scale10 = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
		this._yscale = aggx_rfpx_data_GlyphRecordComp.readF2Dot14(data);
	}
};
aggx_rfpx_data_GlyphRecordComp.__name__ = true;
aggx_rfpx_data_GlyphRecordComp.readF2Dot14 = function(data) {
	var major = data.readUInt8();
	data.set_offset(data.get_offset() + 1);
	var minor = data.readUInt8();
	data.set_offset(data.get_offset() + 1);
	var mantissa = major >> 6;
	if(mantissa >= 2) {
		mantissa -= 4;
	}
	return mantissa + (minor + ((major & 63) << 8)) / 16384.0;
};
aggx_rfpx_data_GlyphRecordComp.prototype = {
	get_flags: function() {
		return this._flags;
	}
	,get_glyphIndex: function() {
		return this._glyphIndex;
	}
	,get_tx: function() {
		return this._xtranslate;
	}
	,get_ty: function() {
		return this._ytranslate;
	}
	,get_transformer: function() {
		var m = aggx_core_geometry_AffineTransformer.scaler(this._xscale,this._yscale);
		m.multiply(aggx_core_geometry_AffineTransformer.translator(this._xtranslate,this._ytranslate));
		return m;
	}
	,__class__: aggx_rfpx_data_GlyphRecordComp
};
var aggx_rfpx_data_HeadTable = function(record,data) {
	this._tableRecord = record;
	var x0 = data.readInt32();
	this._version = (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x01 = data.readInt32();
	this._fontRevision = (x01 & 255) << 24 | (x01 >> 8 & 255) << 16 | (x01 >> 16 & 255) << 8 | x01 >> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x02 = data.readInt32();
	this._checkSumAdjustment = (x02 >>> 0 & 255) << 24 | (x02 >>> 8 & 255) << 16 | (x02 >>> 16 & 255) << 8 | x02 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x03 = data.readInt32();
	this._magicNumber = (x03 >>> 0 & 255) << 24 | (x03 >>> 8 & 255) << 16 | (x03 >>> 16 & 255) << 8 | x03 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x04 = data.readUInt16();
	this._flags = (x04 & 255) << 8 | x04 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x05 = data.readUInt16();
	this._unitsPerEm = (x05 & 255) << 8 | x05 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	this._created = data.readFloat64();
	data.set_offset(data.get_offset() + 8);
	this._modified = data.readFloat64();
	data.set_offset(data.get_offset() + 8);
	var x06 = data.readUInt16();
	this._xMin = ((x06 & 255) << 8 | x06 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x07 = data.readUInt16();
	this._yMin = ((x07 & 255) << 8 | x07 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x08 = data.readUInt16();
	this._xMax = ((x08 & 255) << 8 | x08 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x09 = data.readUInt16();
	this._yMax = ((x09 & 255) << 8 | x09 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x010 = data.readUInt16();
	this._macStyle = (x010 & 255) << 8 | x010 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x011 = data.readUInt16();
	this._lowestRecPPEM = (x011 & 255) << 8 | x011 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x012 = data.readUInt16();
	this._fontDirectionHint = ((x012 & 255) << 8 | x012 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x013 = data.readUInt16();
	this._indexToLocFormat = ((x013 & 255) << 8 | x013 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x014 = data.readUInt16();
	this._glyphDataFormat = ((x014 & 255) << 8 | x014 >> 8 & 255) << 16 >> 16;
};
aggx_rfpx_data_HeadTable.__name__ = true;
aggx_rfpx_data_HeadTable.prototype = {
	get_indexToLocFormat: function() {
		return this._indexToLocFormat;
	}
	,get_unitsPerEm: function() {
		return this._unitsPerEm;
	}
	,__class__: aggx_rfpx_data_HeadTable
};
var aggx_rfpx_data_HheaTable = function(record,data) {
	this._tableRecord = record;
	var x0 = data.readInt32();
	this._version = (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x01 = data.readUInt16();
	this._ascender = ((x01 & 255) << 8 | x01 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._descender = ((x02 & 255) << 8 | x02 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x03 = data.readUInt16();
	this._lineGap = ((x03 & 255) << 8 | x03 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x04 = data.readUInt16();
	this._advanceWidthMax = (x04 & 255) << 8 | x04 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x05 = data.readUInt16();
	this._minLeftSideBearing = ((x05 & 255) << 8 | x05 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x06 = data.readUInt16();
	this._minRightSideBearing = ((x06 & 255) << 8 | x06 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x07 = data.readUInt16();
	this._xMaxExtent = ((x07 & 255) << 8 | x07 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x08 = data.readUInt16();
	this._caretSlopeRise = ((x08 & 255) << 8 | x08 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x09 = data.readUInt16();
	this._caretSlopeRun = ((x09 & 255) << 8 | x09 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x010 = data.readUInt16();
	this._caretOffset = ((x010 & 255) << 8 | x010 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	data.set_offset(data.get_offset() + 8);
	var x011 = data.readUInt16();
	this._metricDataFormat = ((x011 & 255) << 8 | x011 >> 8 & 255) << 16 >> 16;
	data.set_offset(data.get_offset() + 2);
	var x012 = data.readUInt16();
	this._numberOfHMetrics = (x012 & 255) << 8 | x012 >> 8 & 255;
};
aggx_rfpx_data_HheaTable.__name__ = true;
aggx_rfpx_data_HheaTable.prototype = {
	get_numberOfHMetrics: function() {
		return this._numberOfHMetrics;
	}
	,get_ascender: function() {
		return this._ascender;
	}
	,get_descender: function() {
		return this._descender;
	}
	,get_lineGap: function() {
		return this._lineGap;
	}
	,__class__: aggx_rfpx_data_HheaTable
};
var aggx_rfpx_data_HmtxTable = function(record,data,numGlyphs,numberOfHMetrics) {
	this._tableRecord = record;
	this._hMetrics = new Array(numberOfHMetrics);
	var i = 0;
	while(_$UInt_UInt_$Impl_$.gt(numberOfHMetrics,i)) {
		var x0 = data.readUInt16();
		data.set_offset(data.get_offset() + 2);
		var x01 = data.readUInt16();
		data.set_offset(data.get_offset() + 2);
		this._hMetrics[i] = new aggx_rfpx_data_LongHorMetric((x0 & 255) << 8 | x0 >> 8 & 255,((x01 & 255) << 8 | x01 >> 8 & 255) << 16 >> 16);
		++i;
	}
	var lsbCount = numGlyphs - numberOfHMetrics;
	this._leftSideBearing = [];
	i = 0;
	while(_$UInt_UInt_$Impl_$.gt(lsbCount,i)) {
		var tmp = this._leftSideBearing;
		var x02 = data.readUInt16();
		tmp[i] = ((x02 & 255) << 8 | x02 >> 8 & 255) << 16 >> 16;
		data.set_offset(data.get_offset() + 2);
		++i;
	}
};
aggx_rfpx_data_HmtxTable.__name__ = true;
aggx_rfpx_data_HmtxTable.prototype = {
	getLSB: function(idx) {
		var lsb = 0;
		if(_$UInt_UInt_$Impl_$.gt(this._hMetrics.length,idx)) {
			lsb = this._hMetrics[idx]._lsb;
		} else {
			lsb = this._leftSideBearing[idx - this._hMetrics.length];
		}
		return lsb;
	}
	,getLHM: function(idx) {
		var lhm = null;
		if(_$UInt_UInt_$Impl_$.gt(this._hMetrics.length,idx)) {
			lhm = this._hMetrics[idx];
		} else {
			lhm = this._hMetrics[this._hMetrics.length - 1];
		}
		return lhm;
	}
	,__class__: aggx_rfpx_data_HmtxTable
};
var aggx_rfpx_data_LangTagRecord = function(len,ofs) {
	this._length = len;
	this._offset = ofs;
};
aggx_rfpx_data_LangTagRecord.__name__ = true;
aggx_rfpx_data_LangTagRecord.prototype = {
	__class__: aggx_rfpx_data_LangTagRecord
};
var aggx_rfpx_data_LocaTable = function(record,data,numGlyphs,offsetsType) {
	this._offsets = new Array(numGlyphs);
	var i = 0;
	if(offsetsType == 0) {
		while(_$UInt_UInt_$Impl_$.gt(numGlyphs,i)) {
			var this1 = this._offsets;
			var x0 = data.readUInt16();
			this1[i] = ((x0 & 255) << 8 | x0 >> 8 & 255) * 2;
			data.set_offset(data.get_offset() + 2);
			++i;
		}
	} else {
		while(_$UInt_UInt_$Impl_$.gt(numGlyphs,i)) {
			var this2 = this._offsets;
			var x01 = data.readInt32();
			this2[i] = (x01 >>> 0 & 255) << 24 | (x01 >>> 8 & 255) << 16 | (x01 >>> 16 & 255) << 8 | x01 >>> 24 & 255;
			data.set_offset(data.get_offset() + 4);
			++i;
		}
	}
};
aggx_rfpx_data_LocaTable.__name__ = true;
aggx_rfpx_data_LocaTable.prototype = {
	getOffset: function(idx) {
		return this._offsets[idx];
	}
	,__class__: aggx_rfpx_data_LocaTable
};
var aggx_rfpx_data_LongHorMetric = function(advWidth,leftSb) {
	this._advanceWidth = advWidth;
	this._lsb = leftSb;
};
aggx_rfpx_data_LongHorMetric.__name__ = true;
aggx_rfpx_data_LongHorMetric.prototype = {
	get_advanceWidth: function() {
		return this._advanceWidth;
	}
	,get_lsb: function() {
		return this._lsb;
	}
	,__class__: aggx_rfpx_data_LongHorMetric
};
var aggx_rfpx_data_MaxpTable = function(record,data) {
	this._tableRecord = record;
	var x0 = data.readInt32();
	this._version = (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x01 = data.readUInt16();
	this._numGlyphs = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	if(this._version == 65536) {
		var x02 = data.readUInt16();
		this._maxPoints = (x02 & 255) << 8 | x02 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x03 = data.readUInt16();
		this._maxContours = (x03 & 255) << 8 | x03 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x04 = data.readUInt16();
		this._maxCompositePoints = (x04 & 255) << 8 | x04 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x05 = data.readUInt16();
		this._maxCompositeContours = (x05 & 255) << 8 | x05 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x06 = data.readUInt16();
		this._maxZones = (x06 & 255) << 8 | x06 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x07 = data.readUInt16();
		this._maxTwilightPoints = (x07 & 255) << 8 | x07 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x08 = data.readUInt16();
		this._maxStorage = (x08 & 255) << 8 | x08 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x09 = data.readUInt16();
		this._maxFunctionDefs = (x09 & 255) << 8 | x09 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x010 = data.readUInt16();
		this._maxInstructionDefs = (x010 & 255) << 8 | x010 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x011 = data.readUInt16();
		this._maxStackElements = (x011 & 255) << 8 | x011 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x012 = data.readUInt16();
		this._maxSizeOfInstructions = (x012 & 255) << 8 | x012 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x013 = data.readUInt16();
		this._maxComponentElements = (x013 & 255) << 8 | x013 >> 8 & 255;
		data.set_offset(data.get_offset() + 2);
		var x014 = data.readUInt16();
		this._maxComponentDepth = (x014 & 255) << 8 | x014 >> 8 & 255;
	}
};
aggx_rfpx_data_MaxpTable.__name__ = true;
aggx_rfpx_data_MaxpTable.prototype = {
	get_numGlyphs: function() {
		return this._numGlyphs;
	}
	,__class__: aggx_rfpx_data_MaxpTable
};
var aggx_rfpx_data_NameRecord = function(data) {
	var x0 = data.readUInt16();
	this._platformID = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._encodingID = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._languageID = (x02 & 255) << 8 | x02 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x03 = data.readUInt16();
	this._nameID = (x03 & 255) << 8 | x03 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x04 = data.readUInt16();
	this._length = (x04 & 255) << 8 | x04 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x05 = data.readUInt16();
	this._offset = (x05 & 255) << 8 | x05 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
};
aggx_rfpx_data_NameRecord.__name__ = true;
aggx_rfpx_data_NameRecord.prototype = {
	readString: function(data) {
		var sb = "";
		var i = 0;
		var len;
		var c;
		data.set_offset(data.get_offset() + this._offset);
		if(this._platformID == 0) {
			i = 0;
			len = this._length >>> 1;
			while(_$UInt_UInt_$Impl_$.gt(len,i)) {
				var x0 = data.readUInt16();
				c = (x0 & 255) << 8 | x0 >> 8 & 255;
				sb += String.fromCodePoint(c);
				var _g = data;
				_g.set_offset(_g.get_offset() + 2);
				++i;
			}
		} else if(this._platformID == 1) {
			i = 0;
			while(_$UInt_UInt_$Impl_$.gt(this._length,i)) {
				c = data.readUInt8();
				sb += String.fromCodePoint(c);
				var _g1 = data;
				_g1.set_offset(_g1.get_offset() + 1);
				++i;
			}
		} else if(this._platformID == 2) {
			i = 0;
			while(_$UInt_UInt_$Impl_$.gt(this._length,i)) {
				c = data.readUInt8();
				sb += String.fromCodePoint(c);
				var _g2 = data;
				_g2.set_offset(_g2.get_offset() + 1);
				++i;
			}
		} else if(this._platformID == 3) {
			i = 0;
			len = this._length >>> 1;
			while(_$UInt_UInt_$Impl_$.gt(len,i)) {
				var x01 = data.readUInt16();
				c = (x01 & 255) << 8 | x01 >> 8 & 255;
				sb += String.fromCodePoint(c);
				var _g3 = data;
				_g3.set_offset(_g3.get_offset() + 2);
				++i;
			}
		}
		this._record = sb;
	}
	,isFontName: function() {
		if(this._languageID == 0 && this._nameID == 4) {
			return true;
		}
		return false;
	}
	,__class__: aggx_rfpx_data_NameRecord
};
var aggx_rfpx_data_NameTable = function(record,data) {
	this.fontName = "";
	this._tableRecord = record;
	var dataPtr = data.get_offset();
	var x0 = data.readUInt16();
	this._format = (x0 & 255) << 8 | x0 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x01 = data.readUInt16();
	this._count = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._stringOffset = (x02 & 255) << 8 | x02 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var strDataPtr = dataPtr + this._stringOffset;
	this._nameRecord = new Array(this._count);
	var i = 0;
	var nameRecord;
	while(_$UInt_UInt_$Impl_$.gt(this._count,i)) {
		var this1 = this._nameRecord;
		nameRecord = new aggx_rfpx_data_NameRecord(data);
		this1[i] = nameRecord;
		++i;
	}
	if(this._format == 1) {
		var x03 = data.readUInt16();
		this._langTagCount = (x03 & 255) << 8 | x03 >> 8 & 255;
		this._langTagRecord = new Array(this._langTagCount);
		i = 0;
		while(_$UInt_UInt_$Impl_$.gt(this._langTagCount,i)) {
			var x04 = data.readUInt16();
			data.set_offset(data.get_offset() + 2);
			var x05 = data.readUInt16();
			data.set_offset(data.get_offset() + 2);
			this._langTagRecord[i] = new aggx_rfpx_data_LangTagRecord((x04 & 255) << 8 | x04 >> 8 & 255,(x05 & 255) << 8 | x05 >> 8 & 255);
			++i;
		}
	}
	var offset = data.get_offset();
	var _g = 0;
	var _g1 = this._count;
	while(_g < _g1) {
		var nameRecord1 = this._nameRecord[_g++];
		data.set_offset(strDataPtr);
		nameRecord1.readString(data);
		if(nameRecord1.isFontName()) {
			this.fontName = nameRecord1._record;
		}
	}
	data.set_offset(offset);
};
aggx_rfpx_data_NameTable.__name__ = true;
aggx_rfpx_data_NameTable.prototype = {
	__class__: aggx_rfpx_data_NameTable
};
var aggx_rfpx_data_OffsetTable = function(data) {
	var x0 = data.readInt32();
	this._sfntVersion = (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x01 = data.readUInt16();
	this._numTables = (x01 & 255) << 8 | x01 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x02 = data.readUInt16();
	this._searchRange = (x02 & 255) << 8 | x02 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x03 = data.readUInt16();
	this._entrySelector = (x03 & 255) << 8 | x03 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
	var x04 = data.readUInt16();
	this._rangeShift = (x04 & 255) << 8 | x04 >> 8 & 255;
	data.set_offset(data.get_offset() + 2);
};
aggx_rfpx_data_OffsetTable.__name__ = true;
aggx_rfpx_data_OffsetTable.prototype = {
	toString: function() {
		return "OffsetTable{version: " + this._sfntVersion + " numTables: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this._numTables)) + "}";
	}
	,get_numTables: function() {
		return this._numTables;
	}
	,__class__: aggx_rfpx_data_OffsetTable
};
var aggx_rfpx_data_Os2Table = function(record,ptr) {
	this._tableRecord = record;
	var x0 = ptr.readUInt16();
	this._version = (x0 & 255) << 8 | x0 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x01 = ptr.readUInt16();
	this._avgCharWidth = ((x01 & 255) << 8 | x01 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x02 = ptr.readUInt16();
	this._weightClass = (x02 & 255) << 8 | x02 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x03 = ptr.readUInt16();
	this._widthClass = (x03 & 255) << 8 | x03 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x04 = ptr.readUInt16();
	this._type = (x04 & 255) << 8 | x04 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x05 = ptr.readUInt16();
	this._subscriptXSize = ((x05 & 255) << 8 | x05 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x06 = ptr.readUInt16();
	this._subscriptYSize = ((x06 & 255) << 8 | x06 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x07 = ptr.readUInt16();
	this._subscriptXOffset = ((x07 & 255) << 8 | x07 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x08 = ptr.readUInt16();
	this._subscriptYOffset = ((x08 & 255) << 8 | x08 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x09 = ptr.readUInt16();
	this._superscriptXSize = ((x09 & 255) << 8 | x09 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x010 = ptr.readUInt16();
	this._superscriptYSize = ((x010 & 255) << 8 | x010 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x011 = ptr.readUInt16();
	this._superscriptXOffset = ((x011 & 255) << 8 | x011 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x012 = ptr.readUInt16();
	this._superscriptYOffset = ((x012 & 255) << 8 | x012 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x013 = ptr.readUInt16();
	this._strikeoutSize = ((x013 & 255) << 8 | x013 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x014 = ptr.readUInt16();
	this._strikeoutPosition = ((x014 & 255) << 8 | x014 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x015 = ptr.readUInt16();
	this._familyClass = ((x015 & 255) << 8 | x015 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	this._panose = new aggx_rfpx_data_Panose(ptr);
	var x016 = ptr.readInt32();
	this._unicodeRange1 = (x016 >>> 0 & 255) << 24 | (x016 >>> 8 & 255) << 16 | (x016 >>> 16 & 255) << 8 | x016 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x017 = ptr.readInt32();
	this._unicodeRange2 = (x017 >>> 0 & 255) << 24 | (x017 >>> 8 & 255) << 16 | (x017 >>> 16 & 255) << 8 | x017 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x018 = ptr.readInt32();
	this._unicodeRange3 = (x018 >>> 0 & 255) << 24 | (x018 >>> 8 & 255) << 16 | (x018 >>> 16 & 255) << 8 | x018 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x019 = ptr.readInt32();
	this._unicodeRange4 = (x019 >>> 0 & 255) << 24 | (x019 >>> 8 & 255) << 16 | (x019 >>> 16 & 255) << 8 | x019 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x020 = ptr.readInt32();
	this._vendorID = (x020 & 255) << 24 | (x020 >> 8 & 255) << 16 | (x020 >> 16 & 255) << 8 | x020 >> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x021 = ptr.readUInt16();
	this._selection = (x021 & 255) << 8 | x021 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x022 = ptr.readInt32();
	this._rirstCharIndex = (x022 >>> 0 & 255) << 24 | (x022 >>> 8 & 255) << 16 | (x022 >>> 16 & 255) << 8 | x022 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x023 = ptr.readInt32();
	this._lastCharIndex = (x023 >>> 0 & 255) << 24 | (x023 >>> 8 & 255) << 16 | (x023 >>> 16 & 255) << 8 | x023 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x024 = ptr.readUInt16();
	this._typoAscender = ((x024 & 255) << 8 | x024 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x025 = ptr.readUInt16();
	this._typoDescender = ((x025 & 255) << 8 | x025 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x026 = ptr.readUInt16();
	this._typoLineGap = ((x026 & 255) << 8 | x026 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x027 = ptr.readUInt16();
	this._winAscent = (x027 & 255) << 8 | x027 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x028 = ptr.readUInt16();
	this._winDescent = (x028 & 255) << 8 | x028 >> 8 & 255;
	ptr.set_offset(ptr.get_offset() + 2);
	var x029 = ptr.readInt32();
	this._codePageRange1 = (x029 >>> 0 & 255) << 24 | (x029 >>> 8 & 255) << 16 | (x029 >>> 16 & 255) << 8 | x029 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x030 = ptr.readInt32();
	this._codePageRange2 = (x030 >>> 0 & 255) << 24 | (x030 >>> 8 & 255) << 16 | (x030 >>> 16 & 255) << 8 | x030 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
};
aggx_rfpx_data_Os2Table.__name__ = true;
aggx_rfpx_data_Os2Table.prototype = {
	__class__: aggx_rfpx_data_Os2Table
};
var aggx_rfpx_data_Panose = function(ptr) {
	this._familyType = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._serifStyle = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._weight = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._proportion = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._contrast = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._strokeVariation = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._armStyle = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._letterform = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._midline = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
	this._height = ptr.readUInt8();
	ptr.set_offset(ptr.get_offset() + 1);
};
aggx_rfpx_data_Panose.__name__ = true;
aggx_rfpx_data_Panose.prototype = {
	__class__: aggx_rfpx_data_Panose
};
var aggx_rfpx_data_PostTable = function(record,ptr) {
	this._tableRecord = record;
	var x0 = ptr.readInt32();
	this._version = (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x01 = ptr.readInt32();
	this._italicAngle = (x01 & 255) << 24 | (x01 >> 8 & 255) << 16 | (x01 >> 16 & 255) << 8 | x01 >> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x02 = ptr.readUInt16();
	this._underlinePosition = ((x02 & 255) << 8 | x02 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x03 = ptr.readUInt16();
	this._underlineThickness = ((x03 & 255) << 8 | x03 >> 8 & 255) << 16 >> 16;
	ptr.set_offset(ptr.get_offset() + 2);
	var x04 = ptr.readInt32();
	this._isFixedPitch = (x04 >>> 0 & 255) << 24 | (x04 >>> 8 & 255) << 16 | (x04 >>> 16 & 255) << 8 | x04 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x05 = ptr.readInt32();
	this._minMemType42 = (x05 >>> 0 & 255) << 24 | (x05 >>> 8 & 255) << 16 | (x05 >>> 16 & 255) << 8 | x05 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x06 = ptr.readInt32();
	this._maxMemType42 = (x06 >>> 0 & 255) << 24 | (x06 >>> 8 & 255) << 16 | (x06 >>> 16 & 255) << 8 | x06 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x07 = ptr.readInt32();
	this._minMemType1 = (x07 >>> 0 & 255) << 24 | (x07 >>> 8 & 255) << 16 | (x07 >>> 16 & 255) << 8 | x07 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	var x08 = ptr.readInt32();
	this._maxMemType1 = (x08 >>> 0 & 255) << 24 | (x08 >>> 8 & 255) << 16 | (x08 >>> 16 & 255) << 8 | x08 >>> 24 & 255;
	ptr.set_offset(ptr.get_offset() + 4);
	if(this._version == 131072) {
		var x09 = ptr.readUInt16();
		this._numGlyphs = (x09 & 255) << 8 | x09 >> 8 & 255;
		ptr.set_offset(ptr.get_offset() + 2);
		this._glyphNameIndex = new Array(this._numGlyphs);
		var i = 0;
		while(_$UInt_UInt_$Impl_$.gt(this._numGlyphs,i)) {
			var this1 = this._glyphNameIndex;
			var x010 = ptr.readUInt16();
			this1[i] = (x010 & 255) << 8 | x010 >> 8 & 255;
			ptr.set_offset(ptr.get_offset() + 2);
			++i;
		}
	}
};
aggx_rfpx_data_PostTable.__name__ = true;
aggx_rfpx_data_PostTable.prototype = {
	highestGlyphNameIndex: function() {
		var high = 0;
		var i = 0;
		while(_$UInt_UInt_$Impl_$.gt(this._numGlyphs,i)) {
			var value2 = this._glyphNameIndex[i];
			high = _$UInt_UInt_$Impl_$.gt(high,value2) ? high : value2;
			++i;
		}
		return high;
	}
	,__class__: aggx_rfpx_data_PostTable
};
var aggx_rfpx_data_TTCHeader = function(data) {
	var x0 = data.readInt32();
	this._version = (x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255;
};
aggx_rfpx_data_TTCHeader.__name__ = true;
aggx_rfpx_data_TTCHeader.isTTC = function(data) {
	var x0 = data.readInt32();
	return ((x0 & 255) << 24 | (x0 >> 8 & 255) << 16 | (x0 >> 16 & 255) << 8 | x0 >> 24 & 255) == aggx_rfpx_data_TTCHeader.TTCTag;
};
aggx_rfpx_data_TTCHeader.prototype = {
	__class__: aggx_rfpx_data_TTCHeader
};
var aggx_rfpx_data_TableRecord = function(data) {
	var x0 = data.readInt32();
	this._tag = (x0 >>> 0 & 255) << 24 | (x0 >>> 8 & 255) << 16 | (x0 >>> 16 & 255) << 8 | x0 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x01 = data.readInt32();
	this._checkSum = (x01 >>> 0 & 255) << 24 | (x01 >>> 8 & 255) << 16 | (x01 >>> 16 & 255) << 8 | x01 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x02 = data.readInt32();
	this._offset = (x02 >>> 0 & 255) << 24 | (x02 >>> 8 & 255) << 16 | (x02 >>> 16 & 255) << 8 | x02 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
	var x03 = data.readInt32();
	this._length = (x03 >>> 0 & 255) << 24 | (x03 >>> 8 & 255) << 16 | (x03 >>> 16 & 255) << 8 | x03 >>> 24 & 255;
	data.set_offset(data.get_offset() + 4);
};
aggx_rfpx_data_TableRecord.__name__ = true;
aggx_rfpx_data_TableRecord.prototype = {
	toString: function() {
		return "TableRecord {tag: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this._tag)) + " offset: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this._offset)) + " length: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this._length)) + "}";
	}
	,get_tag: function() {
		return this._tag;
	}
	,get_offset: function() {
		return this._offset;
	}
	,get_length: function() {
		return this._length;
	}
	,__class__: aggx_rfpx_data_TableRecord
};
var aggx_rfpx_data_TableTags = function() { };
aggx_rfpx_data_TableTags.__name__ = true;
aggx_rfpx_data_TableTags.getName = function(tag) {
	if(aggx_rfpx_data_TableTags.tableNames == null) {
		var _g = new haxe_ds_IntMap();
		_g.h[1111577413] = "BASE";
		_g.h[1128678944] = "CFF";
		_g.h[1146308935] = "DSIG";
		_g.h[1161970772] = "EBDT";
		_g.h[1161972803] = "EBLC";
		_g.h[1161974595] = "EBSC";
		_g.h[1195656518] = "GDEF";
		_g.h[1196445523] = "GPOS";
		_g.h[1196643650] = "GSUB";
		_g.h[1246975046] = "JSTF";
		_g.h[1280594760] = "LTSH";
		_g.h[1296909912] = "MMFX";
		_g.h[1296913220] = "MMSD";
		_g.h[1346587732] = "PCLT";
		_g.h[1447316824] = "VDMX";
		_g.h[1668112752] = "cmap";
		_g.h[1668707360] = "cvt";
		_g.h[1718642541] = "fpgm";
		_g.h[1734439792] = "gasp";
		_g.h[1735162214] = "glyf";
		_g.h[1751412088] = "hdmx";
		_g.h[1751474532] = "head";
		_g.h[1751672161] = "hhea";
		_g.h[1752003704] = "hmtx";
		_g.h[1801810542] = "kern";
		_g.h[1819239265] = "loca";
		_g.h[1835104368] = "maxp";
		_g.h[1851878757] = "name";
		_g.h[1886545264] = "prep";
		_g.h[1886352244] = "post";
		_g.h[1986553185] = "vhea";
		_g.h[1986884728] = "vmtx";
		aggx_rfpx_data_TableTags.tableNames = _g;
	}
	return aggx_rfpx_data_TableTags.tableNames.h[tag];
};
var aggx_typography_FontEngine = function(ttc,scanline,rasterizer) {
	this._flipY = true;
	this._fontCollection = ttc;
	this._currentFontIndex = 0;
	this.currentFont = ttc.getFont(this._currentFontIndex);
	this.rasterizer = rasterizer;
	this.scanline = scanline;
	this._typefaceCache = new aggx_typography_TypefaceCache(this.currentFont);
	this._path = new aggx_vectorial_VectorPath();
	this._curve = new aggx_vectorial_converters_ConvCurve(this._path);
	var _this = this._curve;
	var _this1 = _this._curve3;
	_this1._curveInc._scale = 4.0;
	_this1._curveDiv._approximationScale = 4.0;
	var _this2 = _this._curve4;
	_this2._curveInc._scale = 4.0;
	_this2._curveDiv._approximationScale = 4.0;
	this._stroke = new aggx_vectorial_converters_ConvStroke(this._curve);
};
aggx_typography_FontEngine.__name__ = true;
aggx_typography_FontEngine.prototype = {
	preCacheFaces: function(fromCharCode,toCharCode) {
		while(_$UInt_UInt_$Impl_$.gt(toCharCode,fromCharCode)) {
			var face = new aggx_typography_Typeface(this.currentFont.getGlyphByCharCode(fromCharCode),fromCharCode);
			this._typefaceCache.cache(face);
			++fromCharCode;
		}
	}
	,getScale: function(fontSize) {
		return fontSize / _$UInt_UInt_$Impl_$.toFloat(this.currentFont._head._unitsPerEm);
	}
	,vectorizeCharacter: function(charCode,fontSize,dx,dy) {
		this._path.removeAll();
		var scale = fontSize / _$UInt_UInt_$Impl_$.toFloat(this.currentFont._head._unitsPerEm);
		var face = this._typefaceCache.getFace(charCode);
		face.getOutline(this._path);
		var transform = aggx_core_geometry_AffineTransformer.scaler(scale,scale);
		transform.multiply(aggx_core_geometry_AffineTransformer.translator(dx,dy));
		this._path.transformAllPaths(transform);
		return face;
	}
	,getFace: function(charCode) {
		return this._typefaceCache.getFace(charCode);
	}
	,vectorizeString: function(string,fontSize,dx,dy) {
		this._path.removeAll();
		var i = 0;
		var c = string.length;
		var x = 0.;
		var scale = fontSize / _$UInt_UInt_$Impl_$.toFloat(this.currentFont._head._unitsPerEm);
		var y = this.currentFont._hhea._ascender * scale;
		while(_$UInt_UInt_$Impl_$.gt(c,i)) {
			var face = this._typefaceCache.getFace(HxOverrides.cca(string,i));
			face.getOutline(this._path);
			var transform = aggx_core_geometry_AffineTransformer.scaler(scale,scale);
			transform.multiply(aggx_core_geometry_AffineTransformer.translator(x + dx,y + dy));
			this._path.transformAllPaths(transform);
			x += face._glyph._advanceWidth * scale;
			++i;
		}
	}
	,measureString: function(string,fontSize,vector,kern) {
		if(kern == null) {
			kern = 0.0;
		}
		var scale = fontSize / _$UInt_UInt_$Impl_$.toFloat(this.currentFont._head._unitsPerEm);
		var x = 0;
		var y = this.currentFont._hhea._ascender * scale;
		var _g = 0;
		var _g1 = string.length;
		while(_g < _g1) x += this._typefaceCache.getFace(HxOverrides.cca(string,_g++))._glyph._advanceWidth * scale + kern;
		vector.setXY(x,y);
	}
	,renderString: function(string,fontSize,dx,dy,renderer,kern,vector) {
		if(kern == null) {
			kern = 0.0;
		}
		this.renderStringInternal(this._curve,string,fontSize,dx,dy,renderer,kern,vector);
	}
	,renderStringStroke: function(string,fontSize,dx,dy,renderer,width,kern,vector) {
		if(kern == null) {
			kern = 0.0;
		}
		var _this = this._stroke._gen._stroker;
		_this._width = width * fontSize / 100 * 0.5;
		if(_this._width < 0) {
			_this._widthAbs = -_this._width;
			_this._widthSign = -1;
		} else {
			_this._widthAbs = _this._width;
			_this._widthSign = 1;
		}
		_this._widthEps = _this._width / 1024.0;
		this.renderStringInternal(this._stroke,string,fontSize,dx,dy,renderer,kern,vector);
	}
	,renderStringInternal: function(path,string,fontSize,dx,dy,renderer,kern,vector) {
		if(kern == null) {
			kern = 0.0;
		}
		if(this.rasterizer == null) {
			this.rasterizer = new aggx_rasterizer_ScanlineRasterizer();
		}
		if(this.scanline == null) {
			this.scanline = new aggx_rasterizer_Scanline();
		}
		this.rasterizer.reset();
		this.rasterizer.gamma(new aggx_rasterizer_GammaPower(1.0));
		var i = 0;
		var c = string.length;
		var x = 0.;
		var scale = fontSize / _$UInt_UInt_$Impl_$.toFloat(this.currentFont._head._unitsPerEm);
		var y = this.currentFont._hhea._ascender * scale;
		while(_$UInt_UInt_$Impl_$.gt(c,i)) {
			var face = this._typefaceCache.getFace(HxOverrides.cca(string,i));
			var transform = aggx_core_geometry_AffineTransformer.scaler(scale,scale);
			transform.multiply(aggx_core_geometry_AffineTransformer.translator(x + dx,y + dy));
			this._path.removeAll();
			face.getOutline(this._path);
			this._path.transformAllPaths(transform);
			console.log("src/aggx/typography/FontEngine.hx:171:","char: " + HxOverrides.substr(string,i,1) + " x: " + x + " advance: " + face._glyph._advanceWidth * scale + " kern: " + kern);
			x += face._glyph._advanceWidth * scale + kern;
			this.rasterizer.addPath(path);
			++i;
		}
		aggx_renderer_SolidScanlineRenderer.renderScanlines(this.rasterizer,this.scanline,renderer);
		if(vector != null) {
			vector.setXY(x,y);
		}
	}
	,get_path: function() {
		return this._path;
	}
	,__class__: aggx_typography_FontEngine
};
var aggx_typography_Typeface = function(glyph,code) {
	this._charCode = code;
	this._glyph = glyph;
	this._flipY = true;
	this._path = new aggx_vectorial_VectorPath();
	this.constructOutline();
};
aggx_typography_Typeface.__name__ = true;
aggx_typography_Typeface.prototype = {
	constructOutline: function() {
		var x1;
		var y1;
		var x2;
		var y2;
		this._path.removeAll();
		var numberOfContours = this._glyph._numberOfContours;
		var p;
		var n = 0;
		while(_$UInt_UInt_$Impl_$.gt(numberOfContours,n)) {
			var contourSegments = new aggx_rfpx_SegmentIterator(this._glyph._outline[n]);
			if(contourSegments == null) {
				++n;
				continue;
			}
			p = contourSegments._contour._segments[contourSegments._segmentIndex].getPoint(0);
			x1 = p.x;
			y1 = p.y;
			if(this._flipY) {
				y1 = -y1;
			}
			this._path.moveTo(x1,y1);
			while(contourSegments.next()) {
				var segment = contourSegments._contour._segments[contourSegments._segmentIndex];
				if(segment._type == 1) {
					p = segment.getPoint(0);
					x1 = p.x;
					y1 = p.y;
					if(this._flipY) {
						y1 = -y1;
					}
					this._path.lineTo(x1,y1);
				} else if(segment._type == 2) {
					var b = segment.getPoint(0);
					var c = segment.getPoint(1);
					x1 = b.x;
					y1 = b.y;
					x2 = c.x;
					y2 = c.y;
					if(this._flipY) {
						y1 = -y1;
						y2 = -y2;
					}
					this._path.curve3(x1,y1,x2,y2);
				}
			}
			++n;
		}
	}
	,getOutline: function(path) {
		path.concatPath(this._path);
	}
	,get_charCode: function() {
		return this._charCode;
	}
	,get_glyph: function() {
		return this._glyph;
	}
	,__class__: aggx_typography_Typeface
};
var aggx_typography_TypefaceCache = function(font) {
	this._faces = new Array(256);
	this._font = font;
};
aggx_typography_TypefaceCache.__name__ = true;
aggx_typography_TypefaceCache.prototype = {
	cache: function(face) {
		var msb = face._charCode >>> 8 & 255;
		if(this._faces[msb] == null) {
			this._faces[msb] = new Array(256);
		}
		var lsb = face._charCode & 255;
		if(this._faces[msb][lsb] == null) {
			this._faces[msb][lsb] = face;
		}
	}
	,getFace: function(charCode) {
		var face = null;
		var msb = charCode >>> 8 & 255;
		if(this._faces[msb] != null) {
			face = this._faces[msb][charCode & 255];
		}
		if(face == null) {
			face = new aggx_typography_Typeface(this._font.getGlyphByCharCode(charCode),charCode);
			this.cache(face);
		}
		return face;
	}
	,__class__: aggx_typography_TypefaceCache
};
var aggx_vectorial_BezierArcSvg = function() {
	this._radius = new aggx_core_geometry_Vector2D();
	this._end = new aggx_core_geometry_Vector2D();
	this._start = new aggx_core_geometry_Vector2D();
};
aggx_vectorial_BezierArcSvg.__name__ = true;
aggx_vectorial_BezierArcSvg.calculateVectorAngle = function(ux,uy,vx,vy) {
	var ta = Math.atan2(uy,ux);
	var tb = Math.atan2(vy,vx);
	if(tb >= ta) {
		return tb - ta;
	}
	return 6.28318530717958647692 - (ta - tb);
};
aggx_vectorial_BezierArcSvg.prototype = {
	init: function(x0,y0,rx,ry,angle,isLargeArc,isSweepArc,x2,y2) {
		this._start.setXY(x0,y0);
		this._end.setXY(x2,y2);
		this._radius.setXY(rx,ry);
		this._isLargeArc = isLargeArc;
		this._angle = angle;
		this._isSweepArc = isSweepArc;
	}
	,addToPath: function(storage) {
		if(aggx_core_geometry_Vector2D.distance(this._start,this._end) < 1.0e-14) {
			return;
		}
		if(Math.abs(this._radius.x) <= 1.0e-30 || Math.abs(this._radius.y) <= 1.0e-30) {
			storage.lineTo(this._end.x,this._end.y);
			return;
		}
		var sinPhi = Math.sin(this._angle * 0.01745329251994329576);
		var cosPhi = Math.cos(this._angle * 0.01745329251994329576);
		var x1dash = cosPhi * (this._start.x - this._end.x) / 2.0 + sinPhi * (this._start.y - this._end.y) / 2.0;
		var y1dash = -sinPhi * (this._start.x - this._end.x) / 2.0 + cosPhi * (this._start.y - this._end.y) / 2.0;
		var root;
		var numerator = this._radius.x * this._radius.x * this._radius.y * this._radius.y - this._radius.x * this._radius.x * y1dash * y1dash - this._radius.y * this._radius.y * x1dash * x1dash;
		var rx = this._radius.x;
		var ry = this._radius.y;
		if(numerator < 0.0) {
			var s = Math.sqrt(1.0 - numerator / (this._radius.x * this._radius.x * this._radius.y * this._radius.y));
			rx *= s;
			ry *= s;
			root = 0.0;
		} else {
			root = this._isLargeArc && this._isSweepArc || !this._isLargeArc && !this._isSweepArc ? -1.0 : 1.0;
			root *= Math.sqrt(numerator / (this._radius.x * this._radius.x * y1dash * y1dash + this._radius.y * this._radius.y * x1dash * x1dash));
		}
		var cxdash = root * rx * y1dash / ry;
		var cydash = -root * ry * x1dash / rx;
		var cx = cosPhi * cxdash - sinPhi * cydash + (this._start.x + this._end.x) / 2.0;
		var cy = sinPhi * cxdash + cosPhi * cydash + (this._start.y + this._end.y) / 2.0;
		var theta1 = aggx_vectorial_BezierArcSvg.calculateVectorAngle(1.0,0.0,(x1dash - cxdash) / rx,(y1dash - cydash) / ry);
		var dtheta = aggx_vectorial_BezierArcSvg.calculateVectorAngle((x1dash - cxdash) / rx,(y1dash - cydash) / ry,(-x1dash - cxdash) / rx,(-y1dash - cydash) / ry);
		if(this._isSweepArc && dtheta < 0) {
			dtheta += 2.0 * Math.PI;
		} else if(!this._isSweepArc && dtheta > 0) {
			dtheta -= 2.0 * Math.PI;
		}
		var segments = Math.ceil(Math.abs(dtheta / (Math.PI / 2.0)));
		var delta = dtheta / segments;
		var t = 2.6666666666666665 * Math.sin(delta / 4.0) * Math.sin(delta / 4.0) / Math.sin(delta / 2.0);
		var startX = this._start.x;
		var startY = this._start.y;
		var _g = 0;
		while(_g < segments) {
			++_g;
			var cosTheta1 = Math.cos(theta1);
			var sinTheta1 = Math.sin(theta1);
			var theta2 = theta1 + delta;
			var cosTheta2 = Math.cos(theta2);
			var sinTheta2 = Math.sin(theta2);
			var endpointX = cosPhi * rx * cosTheta2 - sinPhi * ry * sinTheta2 + cx;
			var endpointY = sinPhi * rx * cosTheta2 + cosPhi * ry * sinTheta2 + cy;
			storage.curve4(startX + t * (-cosPhi * rx * sinTheta1 - sinPhi * ry * cosTheta1),startY + t * (-sinPhi * rx * sinTheta1 + cosPhi * ry * cosTheta1),endpointX + t * (cosPhi * rx * sinTheta2 + sinPhi * ry * cosTheta2),endpointY + t * (sinPhi * rx * sinTheta2 - cosPhi * ry * cosTheta2),endpointX,endpointY);
			theta1 = theta2;
			startX = endpointX;
			startY = endpointY;
		}
	}
	,__class__: aggx_vectorial_BezierArcSvg
};
var aggx_vectorial_IVertexSource = function() { };
aggx_vectorial_IVertexSource.__name__ = true;
aggx_vectorial_IVertexSource.prototype = {
	__class__: aggx_vectorial_IVertexSource
};
var aggx_vectorial_CubicCurve = function(x1,y1,x2,y2,x3,y3,x4,y4,am) {
	if(am == null) {
		am = 1;
	}
	this._approximationMethod = am;
	if(x1 != null && y1 != null && x2 != null && y2 != null && x3 != null && y3 != null) {
		this.init(x1,y1,x2,y2,x3,y3,x4,y4);
	}
	this._curveDiv = new aggx_vectorial_CubicCurveFitterDiv();
	this._curveInc = new aggx_vectorial_CubicCurveFitterInc();
};
aggx_vectorial_CubicCurve.__name__ = true;
aggx_vectorial_CubicCurve.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_CubicCurve.prototype = {
	get_approximationScale: function() {
		return this._curveInc._scale;
	}
	,set_approximationScale: function(value) {
		this._curveInc._scale = value;
		this._curveDiv._approximationScale = value;
		return value;
	}
	,get_approximationMethod: function() {
		return this._approximationMethod;
	}
	,set_approximationMethod: function(value) {
		return this._approximationMethod = value;
	}
	,get_angleTolerance: function() {
		return this._curveDiv._angleTolerance;
	}
	,set_angleTolerance: function(value) {
		return this._curveDiv._angleTolerance = value;
	}
	,get_cuspLimit: function() {
		return this._curveDiv._cuspLimit;
	}
	,set_cuspLimit: function(value) {
		return this._curveDiv._cuspLimit = value;
	}
	,init: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		if(this._approximationMethod == aggx_vectorial_CubicCurve.CURVE_INC) {
			this._curveInc.init(x1,y1,x2,y2,x3,y3,x4,y4);
		} else {
			this._curveDiv.init(x1,y1,x2,y2,x3,y3,x4,y4);
		}
	}
	,reset: function() {
		this._curveInc.reset();
		this._curveDiv.reset();
	}
	,rewind: function(pathId) {
		if(this._approximationMethod == aggx_vectorial_CubicCurve.CURVE_INC) {
			this._curveInc.rewind(pathId);
		} else {
			this._curveDiv.rewind(pathId);
		}
	}
	,getVertex: function(x,y) {
		if(this._approximationMethod == aggx_vectorial_CubicCurve.CURVE_INC) {
			return this._curveInc.getVertex(x,y);
		} else {
			return this._curveDiv.getVertex(x,y);
		}
	}
	,__class__: aggx_vectorial_CubicCurve
};
var aggx_vectorial_CubicCurveFitterDiv = function(x1,y1,x2,y2,x3,y3,x4,y4) {
	this._angleTolerance = 0.0;
	this._approximationScale = 1.0;
	this._cuspLimit = 0.0;
	this._count = 0;
	if(x1 != null && y1 != null && x2 != null && y2 != null && x3 != null && y3 != null && x4 != null && y4 != null) {
		this.init(x1,y1,x2,y2,x3,y3,x4,y4);
	}
};
aggx_vectorial_CubicCurveFitterDiv.__name__ = true;
aggx_vectorial_CubicCurveFitterDiv.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_CubicCurveFitterDiv.prototype = {
	get_approximationScale: function() {
		return this._approximationScale;
	}
	,set_approximationScale: function(value) {
		return this._approximationScale = value;
	}
	,get_angleTolerance: function() {
		return this._angleTolerance;
	}
	,set_angleTolerance: function(value) {
		return this._angleTolerance = value;
	}
	,get_cuspLimit: function() {
		return this._cuspLimit;
	}
	,set_cuspLimit: function(value) {
		return this._cuspLimit = value;
	}
	,init: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		this._points = [];
		this._distanceToleranceSquare = 0.5 / this._approximationScale;
		this._distanceToleranceSquare *= this._distanceToleranceSquare;
		this.bezier(x1,y1,x2,y2,x3,y3,x4,y4);
		this._count = 0;
	}
	,recursiveBezier: function(x1,y1,x2,y2,x3,y3,x4,y4,level) {
		if(level > aggx_vectorial_CubicCurveFitterDiv.CURVE_RECURSION_LIMIT) {
			return;
		}
		var x12 = (x1 + x2) / 2;
		var y12 = (y1 + y2) / 2;
		var x23 = (x2 + x3) / 2;
		var y23 = (y2 + y3) / 2;
		var x34 = (x3 + x4) / 2;
		var y34 = (y3 + y4) / 2;
		var x123 = (x12 + x23) / 2;
		var y123 = (y12 + y23) / 2;
		var x234 = (x23 + x34) / 2;
		var y234 = (y23 + y34) / 2;
		var x1234 = (x123 + x234) / 2;
		var y1234 = (y123 + y234) / 2;
		var dx = x4 - x1;
		var dy = y4 - y1;
		var d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx);
		var d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx);
		var da1 = 0.0;
		var da2 = 0.0;
		var k = 0.0;
		switch(((d2 > aggx_vectorial_CubicCurveFitterDiv.CURVE_COLLINEARITY_EPSILON ? 1 : 0) << 1) + (d3 > aggx_vectorial_CubicCurveFitterDiv.CURVE_COLLINEARITY_EPSILON ? 1 : 0)) {
		case 0:
			k = dx * dx + dy * dy;
			if(k == 0) {
				var dx1 = x2 - x1;
				var dy1 = y2 - y1;
				d2 = dx1 * dx1 + dy1 * dy1;
				var dx2 = x3 - x4;
				var dy2 = y3 - y4;
				d3 = dx2 * dx2 + dy2 * dy2;
			} else {
				k = 1 / k;
				da1 = x2 - x1;
				da2 = y2 - y1;
				d2 = k * (da1 * dx + da2 * dy);
				da1 = x3 - x1;
				da2 = y3 - y1;
				d3 = k * (da1 * dx + da2 * dy);
				if(d2 > 0 && d2 < 1 && d3 > 0 && d3 < 1) {
					return;
				}
				if(d2 <= 0) {
					var dx3 = x1 - x2;
					var dy3 = y1 - y2;
					d2 = dx3 * dx3 + dy3 * dy3;
				} else if(d2 >= 1) {
					var dx4 = x4 - x2;
					var dy4 = y4 - y2;
					d2 = dx4 * dx4 + dy4 * dy4;
				} else {
					var dx5 = x1 + d2 * dx - x2;
					var dy5 = y1 + d2 * dy - y2;
					d2 = dx5 * dx5 + dy5 * dy5;
				}
				if(d3 <= 0) {
					var dx6 = x1 - x3;
					var dy6 = y1 - y3;
					d3 = dx6 * dx6 + dy6 * dy6;
				} else if(d3 >= 1) {
					var dx7 = x4 - x3;
					var dy7 = y4 - y3;
					d3 = dx7 * dx7 + dy7 * dy7;
				} else {
					var dx8 = x1 + d3 * dx - x3;
					var dy8 = y1 + d3 * dy - y3;
					d3 = dx8 * dx8 + dy8 * dy8;
				}
			}
			if(d2 > d3) {
				if(d2 < this._distanceToleranceSquare) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x2,y2);
					return;
				}
			} else if(d3 < this._distanceToleranceSquare) {
				this._points[this._points.length] = new aggx_core_geometry_Coord(x3,y3);
				return;
			}
			break;
		case 1:
			if(d3 * d3 <= this._distanceToleranceSquare * (dx * dx + dy * dy)) {
				if(this._angleTolerance < aggx_vectorial_CubicCurveFitterDiv.CURVE_ANGLE_TOLERANCE_EPSILON) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x23,y23);
					return;
				}
				da1 = Math.abs(Math.atan2(y4 - y3,x4 - x3) - Math.atan2(y3 - y2,x3 - x2));
				if(da1 >= 3.14159265358979323846) {
					da1 = 6.28318530717958647692 - da1;
				}
				if(da1 < this._angleTolerance) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x2,y2);
					this._points[this._points.length] = new aggx_core_geometry_Coord(x3,y3);
					return;
				}
				if(this._cuspLimit != 0.0) {
					if(da1 > this._cuspLimit) {
						this._points[this._points.length] = new aggx_core_geometry_Coord(x3,y3);
						return;
					}
				}
			}
			break;
		case 2:
			if(d2 * d2 <= this._distanceToleranceSquare * (dx * dx + dy * dy)) {
				if(this._angleTolerance < aggx_vectorial_CubicCurveFitterDiv.CURVE_ANGLE_TOLERANCE_EPSILON) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x23,y23);
					return;
				}
				da1 = Math.abs(Math.atan2(y3 - y2,x3 - x2) - Math.atan2(y2 - y1,x2 - x1));
				if(da1 >= 3.14159265358979323846) {
					da1 = 6.28318530717958647692 - da1;
				}
				if(da1 < this._angleTolerance) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x2,y2);
					this._points[this._points.length] = new aggx_core_geometry_Coord(x3,y3);
					return;
				}
				if(this._cuspLimit != 0.0) {
					if(da1 > this._cuspLimit) {
						this._points[this._points.length] = new aggx_core_geometry_Coord(x2,y2);
						return;
					}
				}
			}
			break;
		case 3:
			if((d2 + d3) * (d2 + d3) <= this._distanceToleranceSquare * (dx * dx + dy * dy)) {
				if(this._angleTolerance < aggx_vectorial_CubicCurveFitterDiv.CURVE_ANGLE_TOLERANCE_EPSILON) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x23,y23);
					return;
				}
				k = Math.atan2(y3 - y2,x3 - x2);
				da1 = Math.abs(k - Math.atan2(y2 - y1,x2 - x1));
				da2 = Math.abs(Math.atan2(y4 - y3,x4 - x3) - k);
				if(da1 >= 3.14159265358979323846) {
					da1 = 6.28318530717958647692 - da1;
				}
				if(da2 >= 3.14159265358979323846) {
					da2 = 6.28318530717958647692 - da2;
				}
				if(da1 + da2 < this._angleTolerance) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x23,y23);
					return;
				}
				if(this._cuspLimit != 0.0) {
					if(da1 > this._cuspLimit) {
						this._points[this._points.length] = new aggx_core_geometry_Coord(x2,y2);
						return;
					}
					if(da2 > this._cuspLimit) {
						this._points[this._points.length] = new aggx_core_geometry_Coord(x3,y3);
						return;
					}
				}
			}
			break;
		}
		this.recursiveBezier(x1,y1,x12,y12,x123,y123,x1234,y1234,level + 1);
		this.recursiveBezier(x1234,y1234,x234,y234,x34,y34,x4,y4,level + 1);
	}
	,bezier: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		this._points[this._points.length] = new aggx_core_geometry_Coord(x1,y1);
		this.recursiveBezier(x1,y1,x2,y2,x3,y3,x4,y4,0);
		this._points[this._points.length] = new aggx_core_geometry_Coord(x4,y4);
	}
	,reset: function() {
		this._points = [];
		this._count = 0;
	}
	,rewind: function(i) {
		this._count = 0;
	}
	,getVertex: function(x,y) {
		var cmd = 0;
		if(this._count < this._points.length) {
			var p = this._points[this._count++];
			x.value = p.x;
			y.value = p.y;
			cmd = this._count == 1 ? 1 : 2;
		}
		return cmd;
	}
	,__class__: aggx_vectorial_CubicCurveFitterDiv
};
var aggx_vectorial_CubicCurveFitterInc = function(x1,y1,x2,y2,x3,y3,x4,y4) {
	this._numSteps = 0;
	this._scale = 1.0;
	this._step = 0;
	if(x1 != null && y1 != null && x2 != null && y2 != null && x3 != null && y3 != null && x4 != null && y4 != null) {
		this.init(x1,y1,x2,y2,x3,y3,x4,y4);
	}
};
aggx_vectorial_CubicCurveFitterInc.__name__ = true;
aggx_vectorial_CubicCurveFitterInc.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_CubicCurveFitterInc.prototype = {
	get_approximationScale: function() {
		return this._scale;
	}
	,set_approximationScale: function(value) {
		return this._scale = value;
	}
	,get_angleTolerance: function() {
		return 0.0;
	}
	,set_angleTolerance: function(value) {
		return value;
	}
	,get_cuspLimit: function() {
		return 0.0;
	}
	,set_cuspLimit: function(value) {
		return value;
	}
	,init: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		this._startX = x1;
		this._startY = y1;
		this._endX = x4;
		this._endY = y4;
		var dx1 = x2 - x1;
		var dy1 = y2 - y1;
		var dx2 = x3 - x2;
		var dy2 = y3 - y2;
		var dx3 = x4 - x3;
		var dy3 = y4 - y3;
		this._numSteps = (Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2) + Math.sqrt(dx3 * dx3 + dy3 * dy3)) * 0.25 * this._scale | 0;
		if(this._numSteps < 4) {
			this._numSteps = 4;
		}
		var subdivide_step = 1.0 / this._numSteps;
		var subdivide_step2 = subdivide_step * subdivide_step;
		var subdivide_step3 = subdivide_step * subdivide_step * subdivide_step;
		var pre1 = 3.0 * subdivide_step;
		var pre2 = 3.0 * subdivide_step2;
		var pre4 = 6.0 * subdivide_step2;
		var pre5 = 6.0 * subdivide_step3;
		var tmp1x = x1 - x2 * 2.0 + x3;
		var tmp1y = y1 - y2 * 2.0 + y3;
		var tmp2x = (x2 - x3) * 3.0 - x1 + x4;
		var tmp2y = (y2 - y3) * 3.0 - y1 + y4;
		this._fxSaved = this._fx = x1;
		this._fySaved = this._fy = y1;
		this._dfxSaved = this._dfx = (x2 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdivide_step3;
		this._dfySaved = this._dfy = (y2 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdivide_step3;
		this._ddfxSaved = this._ddfx = tmp1x * pre4 + tmp2x * pre5;
		this._ddfySaved = this._ddfy = tmp1y * pre4 + tmp2y * pre5;
		this._dddfx = tmp2x * pre5;
		this._dddfy = tmp2y * pre5;
		this._step = this._numSteps;
	}
	,reset: function() {
		this._numSteps = 0;
		this._step = -1;
	}
	,rewind: function(pathId) {
		if(this._numSteps == 0) {
			this._step = -1;
			return;
		}
		this._step = this._numSteps;
		this._fx = this._fxSaved;
		this._fy = this._fySaved;
		this._dfx = this._dfxSaved;
		this._dfy = this._dfySaved;
		this._ddfx = this._ddfxSaved;
		this._ddfy = this._ddfySaved;
	}
	,getVertex: function(x,y) {
		if(this._step < 0) {
			return 0;
		}
		if(this._step == this._numSteps) {
			x.value = this._startX;
			y.value = this._startY;
			--this._step;
			return 1;
		}
		if(this._step == 0) {
			x.value = this._endX;
			y.value = this._endY;
			--this._step;
			return 2;
		}
		this._fx += this._dfx;
		this._fy += this._dfy;
		this._dfx += this._ddfx;
		this._dfy += this._ddfy;
		this._ddfx += this._dddfx;
		this._ddfy += this._dddfy;
		x.value = this._fx;
		y.value = this._fy;
		--this._step;
		return 2;
	}
	,__class__: aggx_vectorial_CubicCurveFitterInc
};
var aggx_vectorial_IDistanceProvider = function() { };
aggx_vectorial_IDistanceProvider.__name__ = true;
aggx_vectorial_IDistanceProvider.prototype = {
	__class__: aggx_vectorial_IDistanceProvider
};
var aggx_vectorial_InnerJoin = function() { };
aggx_vectorial_InnerJoin.__name__ = true;
var aggx_vectorial_LineCap = function() { };
aggx_vectorial_LineCap.__name__ = true;
var aggx_vectorial_LineJoin = function() { };
aggx_vectorial_LineJoin.__name__ = true;
var aggx_vectorial_MathStroke = function() {
	this._width = 0.5;
	this._widthAbs = 0.5;
	this._widthEps = 0.00048828125;
	this._widthSign = 1;
	this._miterLimit = 4.0;
	this._innerMiterLimit = 1.01;
	this._approximationScale = 1.0;
	this._lineCap = 0;
	this._lineJoin = 0;
	this._innerJoin = 1;
};
aggx_vectorial_MathStroke.__name__ = true;
aggx_vectorial_MathStroke.prototype = {
	get_width: function() {
		return this._width * 2.0;
	}
	,set_width: function(value) {
		this._width = value * 0.5;
		if(this._width < 0) {
			this._widthAbs = -this._width;
			this._widthSign = -1;
		} else {
			this._widthAbs = this._width;
			this._widthSign = 1;
		}
		this._widthEps = this._width / 1024.0;
		return this._width;
	}
	,get_lineCap: function() {
		return this._lineCap;
	}
	,set_lineCap: function(value) {
		return this._lineCap = value;
	}
	,get_lineJoin: function() {
		return this._lineJoin;
	}
	,set_lineJoin: function(value) {
		return this._lineJoin = value;
	}
	,get_innerJoin: function() {
		return this._innerJoin;
	}
	,set_innerJoin: function(value) {
		return this._innerJoin = value;
	}
	,get_miterLimit: function() {
		return this._miterLimit;
	}
	,set_miterLimit: function(value) {
		return this._miterLimit = value;
	}
	,get_innerMiterLimit: function() {
		return this._innerMiterLimit;
	}
	,set_innerMiterLimit: function(value) {
		return this._innerMiterLimit = value;
	}
	,get_approximationScale: function() {
		return this._approximationScale;
	}
	,set_approximationScale: function(value) {
		return this._approximationScale = value;
	}
	,set_miterLimitTheta: function(value) {
		this._miterLimit = 1.0 / Math.sin(value * 0.5);
		return value;
	}
	,addVertex: function(vc,x,y) {
		vc[vc.length] = new aggx_core_geometry_Coord(x,y);
	}
	,calcArc: function(vc,x,y,dx1,dy1,dx2,dy2) {
		var a1 = Math.atan2(dy1 * this._widthSign,dx1 * this._widthSign);
		var a2 = Math.atan2(dy2 * this._widthSign,dx2 * this._widthSign);
		var da = a1 - a2;
		var i;
		var n;
		da = Math.acos(this._widthAbs / (this._widthAbs + 0.125 / this._approximationScale)) * 2;
		vc[vc.length] = new aggx_core_geometry_Coord(x + dx1,y + dy1);
		if(this._widthSign > 0) {
			if(a1 > a2) {
				a2 += 6.28318530717958647692;
			}
			n = (a2 - a1) / da | 0;
			da = (a2 - a1) / (n + 1);
			a1 += da;
			i = 0;
			while(i < n) {
				vc[vc.length] = new aggx_core_geometry_Coord(x + Math.cos(a1) * this._width,y + Math.sin(a1) * this._width);
				a1 += da;
				++i;
			}
		} else {
			if(a1 < a2) {
				a2 -= 6.28318530717958647692;
			}
			n = (a1 - a2) / da | 0;
			da = (a1 - a2) / (n + 1);
			a1 -= da;
			i = 0;
			while(i < n) {
				vc[vc.length] = new aggx_core_geometry_Coord(x + Math.cos(a1) * this._width,y + Math.sin(a1) * this._width);
				a1 -= da;
				++i;
			}
		}
		vc[vc.length] = new aggx_core_geometry_Coord(x + dx2,y + dy2);
	}
	,calcMiter: function(vc,v0,v1,v2,dx1,dy1,dx2,dy2,lj,mlimit,dbevel) {
		var xi = v1.x;
		var yi = v1.y;
		var di = 1.0;
		var lim = this._widthAbs * mlimit;
		var miter_limit_exceeded = true;
		var intersection_failed = true;
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = xi;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = xi;
		var ax = v0.x + dx1;
		var ay = v0.y - dy1;
		var bx = v1.x + dx1;
		var by = v1.y - dy1;
		var cx = v1.x + dx2;
		var cy = v1.y - dy2;
		var dx = v2.x + dx2;
		var dy = v2.y - dy2;
		var __res = false;
		var __den = (bx - ax) * (dy - cy) - (by - ay) * (dx - cx);
		if(!(Math.abs(__den) < 1.0e-30)) {
			var r = ((ay - cy) * (dx - cx) - (ax - cx) * (dy - cy)) / __den;
			_this.value = ax + r * (bx - ax);
			_this1.value = ay + r * (by - ay);
			__res = true;
		}
		if(__res) {
			var x1 = v1.x;
			var y1 = v1.y;
			xi = aggx_core_memory_Ref.putFloat(_this).value;
			yi = aggx_core_memory_Ref.putFloat(_this1).value;
			var __dx = xi - x1;
			var __dy = yi - y1;
			di = Math.sqrt(__dx * __dx + __dy * __dy);
			if(di <= lim) {
				vc[vc.length] = new aggx_core_geometry_Coord(xi,yi);
				miter_limit_exceeded = false;
			}
			intersection_failed = false;
		} else {
			var x2 = v1.x + dx1;
			var y2 = v1.y - dy1;
			var x21 = v1.x;
			var y21 = v1.y;
			var x22 = v2.x;
			var y22 = v2.y;
			if((x2 - x21) * (y21 - v0.y) - (y2 - y21) * (x21 - v0.x) < 0.0 == (x2 - x22) * (y22 - v1.y) - (y2 - y22) * (x22 - v1.x) < 0.0) {
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
				miter_limit_exceeded = false;
			}
		}
		if(miter_limit_exceeded) {
			switch(lj) {
			case 1:
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx2,v1.y - dy2);
				break;
			case 4:
				this.calcArc(vc,v1.x,v1.y,dx1,-dy1,dx2,-dy2);
				break;
			default:
				if(intersection_failed) {
					mlimit *= this._widthSign;
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1 + dy1 * mlimit,v1.y - dy1 + dx1 * mlimit);
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx2 - dy2 * mlimit,v1.y - dy2 - dx2 * mlimit);
				} else {
					var x11 = v1.x + dx1;
					var y11 = v1.y - dy1;
					var x23 = v1.x + dx2;
					var y23 = v1.y - dy2;
					di = (lim - dbevel) / (di - dbevel);
					vc[vc.length] = new aggx_core_geometry_Coord(x11 + (xi - x11) * di,y11 + (yi - y11) * di);
					vc[vc.length] = new aggx_core_geometry_Coord(x23 + (xi - x23) * di,y23 + (yi - y23) * di);
				}
			}
		}
	}
	,calcCap: function(vc,v0,v1,len) {
		if(vc.length > 0) {
			vc.length = 0;
		}
		var dx1 = (v1.y - v0.y) / len;
		var dy1 = (v1.x - v0.x) / len;
		var dx2 = 0.0;
		var dy2 = 0.0;
		dx1 *= this._width;
		dy1 *= this._width;
		if(this._lineCap != 2) {
			if(this._lineCap == 1) {
				dx2 = dy1 * this._widthSign;
				dy2 = dx1 * this._widthSign;
			}
			vc[vc.length] = new aggx_core_geometry_Coord(v0.x - dx1 - dx2,v0.y + dy1 - dy2);
			vc[vc.length] = new aggx_core_geometry_Coord(v0.x + dx1 - dx2,v0.y - dy1 - dy2);
		} else {
			var da = Math.acos(this._widthAbs / (this._widthAbs + 0.125 / this._approximationScale)) * 2;
			var a1;
			var i;
			var n = 3.14159265358979323846 / da | 0;
			da = 3.14159265358979323846 / (n + 1);
			vc[vc.length] = new aggx_core_geometry_Coord(v0.x - dx1,v0.y + dy1);
			if(this._widthSign > 0) {
				a1 = Math.atan2(dy1,-dx1);
				a1 += da;
				i = 0;
				while(i < n) {
					vc[vc.length] = new aggx_core_geometry_Coord(v0.x + Math.cos(a1) * this._width,v0.y + Math.sin(a1) * this._width);
					a1 += da;
					++i;
				}
			} else {
				a1 = Math.atan2(-dy1,dx1);
				i = 0;
				while(i < n) {
					vc[vc.length] = new aggx_core_geometry_Coord(v0.x + Math.cos(a1) * this._width,v0.y + Math.sin(a1) * this._width);
					a1 -= da;
					++i;
				}
			}
			vc[vc.length] = new aggx_core_geometry_Coord(v0.x + dx1,v0.y - dy1);
		}
	}
	,calcJoin: function(vc,v0,v1,v2,len1,len2) {
		var dx1 = this._width * (v1.y - v0.y) / len1;
		var dy1 = this._width * (v1.x - v0.x) / len1;
		var dx2 = this._width * (v2.y - v1.y) / len2;
		var dy2 = this._width * (v2.x - v1.x) / len2;
		if(vc.length > 0) {
			vc.length = 0;
		}
		var x2 = v1.x;
		var y2 = v1.y;
		var cp = (v2.x - x2) * (y2 - v0.y) - (v2.y - y2) * (x2 - v0.x);
		if(cp != 0 && cp > 0 == this._width > 0) {
			var limit = (len1 < len2 ? len1 : len2) / this._widthAbs;
			if(limit < this._innerMiterLimit) {
				limit = this._innerMiterLimit;
			}
			switch(this._innerJoin) {
			case 1:
				this.calcMiter(vc,v0,v1,v2,dx1,dy1,dx2,dy2,1,limit,0);
				break;
			case 2:case 3:
				cp = (dx1 - dx2) * (dx1 - dx2) + (dy1 - dy2) * (dy1 - dy2);
				if(cp < len1 * len1 && cp < len2 * len2) {
					this.calcMiter(vc,v0,v1,v2,dx1,dy1,dx2,dy2,1,limit,0);
				} else if(this._innerJoin == 2) {
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x,v1.y);
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx2,v1.y - dy2);
				} else {
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x,v1.y);
					this.calcArc(vc,v1.x,v1.y,dx2,-dy2,dx1,-dy1);
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x,v1.y);
					vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx2,v1.y - dy2);
				}
				break;
			default:
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx2,v1.y - dy2);
			}
		} else {
			var dx = (dx1 + dx2) / 2;
			var dy = (dy1 + dy2) / 2;
			var dbevel = Math.sqrt(dx * dx + dy * dy);
			if(this._lineJoin == 2 || this._lineJoin == 3) {
				if(this._approximationScale * (this._widthAbs - dbevel) < this._widthEps) {
					var _this = aggx_core_memory_Ref.getFloat();
					_this.value = dx;
					var _this1 = aggx_core_memory_Ref.getFloat();
					_this1.value = dy;
					var ax = v0.x + dx1;
					var ay = v0.y - dy1;
					var bx = v1.x + dx1;
					var by = v1.y - dy1;
					var cx = v1.x + dx2;
					var cy = v1.y - dy2;
					var dx3 = v2.x + dx2;
					var dy3 = v2.y - dy2;
					var __res = false;
					var __den = (bx - ax) * (dy3 - cy) - (by - ay) * (dx3 - cx);
					if(!(Math.abs(__den) < 1.0e-30)) {
						var r = ((ay - cy) * (dx3 - cx) - (ax - cx) * (dy3 - cy)) / __den;
						_this.value = ax + r * (bx - ax);
						_this1.value = ay + r * (by - ay);
						__res = true;
					}
					if(__res) {
						var x = aggx_core_memory_Ref.putFloat(_this).value;
						var y = aggx_core_memory_Ref.putFloat(_this1).value;
						vc[vc.length] = new aggx_core_geometry_Coord(x,y);
					} else {
						vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
					}
					return;
				}
			}
			switch(this._lineJoin) {
			case 0:case 1:case 4:
				this.calcMiter(vc,v0,v1,v2,dx1,dy1,dx2,dy2,this._lineJoin,this._miterLimit,dbevel);
				break;
			case 2:
				this.calcArc(vc,v1.x,v1.y,dx1,-dy1,dx2,-dy2);
				break;
			default:
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx1,v1.y - dy1);
				vc[vc.length] = new aggx_core_geometry_Coord(v1.x + dx2,v1.y - dy2);
			}
		}
	}
	,__class__: aggx_vectorial_MathStroke
};
var aggx_vectorial_generators_IMarkerGenerator = function() { };
aggx_vectorial_generators_IMarkerGenerator.__name__ = true;
aggx_vectorial_generators_IMarkerGenerator.prototype = {
	__class__: aggx_vectorial_generators_IMarkerGenerator
};
var aggx_vectorial_NullMarkers = function() {
};
aggx_vectorial_NullMarkers.__name__ = true;
aggx_vectorial_NullMarkers.__interfaces__ = [aggx_vectorial_generators_IMarkerGenerator];
aggx_vectorial_NullMarkers.prototype = {
	removeAll: function() {
	}
	,addVertex: function(x,y,cmd) {
	}
	,prepareSrc: function() {
	}
	,rewind: function(pathId) {
	}
	,getVertex: function(x,y) {
		return 0;
	}
	,__class__: aggx_vectorial_NullMarkers
};
var aggx_vectorial_PathCommands = function() { };
aggx_vectorial_PathCommands.__name__ = true;
var aggx_vectorial_PathFlags = function() { };
aggx_vectorial_PathFlags.__name__ = true;
var aggx_vectorial_PathUtils = function() { };
aggx_vectorial_PathUtils.__name__ = true;
aggx_vectorial_PathUtils.isVertex = function(c) {
	if(c >= 1) {
		return c < 15;
	} else {
		return false;
	}
};
aggx_vectorial_PathUtils.isDrawing = function(c) {
	if(c >= 2) {
		return c < 15;
	} else {
		return false;
	}
};
aggx_vectorial_PathUtils.isStop = function(c) {
	return c == 0;
};
aggx_vectorial_PathUtils.isMoveTo = function(c) {
	return c == 1;
};
aggx_vectorial_PathUtils.isLineTo = function(c) {
	return c == 2;
};
aggx_vectorial_PathUtils.isCurve = function(c) {
	if(c != 3) {
		return c == 4;
	} else {
		return true;
	}
};
aggx_vectorial_PathUtils.isCurve3 = function(c) {
	return c == 3;
};
aggx_vectorial_PathUtils.isCurve4 = function(c) {
	return c == 4;
};
aggx_vectorial_PathUtils.isEndPoly = function(c) {
	return (c & 15) == 15;
};
aggx_vectorial_PathUtils.isClose = function(c) {
	return (c & -49) == 79;
};
aggx_vectorial_PathUtils.isNextPoly = function(c) {
	if(!(c == 0 || c == 1)) {
		return (c & 15) == 15;
	} else {
		return true;
	}
};
aggx_vectorial_PathUtils.isCW = function(c) {
	return (c & 32) != 0;
};
aggx_vectorial_PathUtils.isCCW = function(c) {
	return (c & 16) != 0;
};
aggx_vectorial_PathUtils.isOriented = function(c) {
	return (c & 48) != 0;
};
aggx_vectorial_PathUtils.isClosed = function(c) {
	return (c & 64) != 0;
};
aggx_vectorial_PathUtils.getCloseFlag = function(c) {
	return c & 64;
};
aggx_vectorial_PathUtils.clearOrientation = function(c) {
	return c & -49;
};
aggx_vectorial_PathUtils.getOrientation = function(c) {
	return c & 48;
};
aggx_vectorial_PathUtils.setOrientation = function(c,o) {
	return c & -49 | o;
};
aggx_vectorial_PathUtils.shortenPath = function(vs,s,closed) {
	if(closed == null) {
		closed = 0;
	}
	var vsSize = vs._storage.length;
	if(s > 0.0 && vsSize > 1) {
		var d;
		var n = vsSize - 2;
		while(n != 0) {
			d = vs._storage[n].dist;
			if(d > s) {
				break;
			}
			vs._storage.pop();
			s -= d;
			--n;
		}
		if(vsSize < 2) {
			vs._storage = [];
		} else {
			n = vsSize - 1;
			var prev = vs._storage[n - 1];
			var last = vs._storage[n];
			d = (prev.dist - s) / prev.dist;
			last.x = prev.x + (last.x - prev.x) * d;
			last.y = prev.y + (last.y - prev.y) * d;
			if(!prev.calc(last)) {
				vs._storage.pop();
			}
			vs.close(closed != 0);
		}
	}
};
var aggx_vectorial_QuadCurve = function(x1,y1,x2,y2,x3,y3,am) {
	if(am == null) {
		am = 1;
	}
	this._approximationMethod = am;
	if(x1 != null && y1 != null && x2 != null && y2 != null && x3 != null && y3 != null) {
		this.init(x1,y1,x2,y2,x3,y3);
	}
	this._curveDiv = new aggx_vectorial_QuadCurveFitterDiv();
	this._curveInc = new aggx_vectorial_QuadCurveFitterInc();
};
aggx_vectorial_QuadCurve.__name__ = true;
aggx_vectorial_QuadCurve.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_QuadCurve.prototype = {
	get_approximationScale: function() {
		return this._curveInc._scale;
	}
	,set_approximationScale: function(value) {
		this._curveInc._scale = value;
		this._curveDiv._approximationScale = value;
		return value;
	}
	,get_approximationMethod: function() {
		return this._approximationMethod;
	}
	,set_approximationMethod: function(value) {
		return this._approximationMethod = value;
	}
	,get_angleTolerance: function() {
		return this._curveDiv._angleTolerance;
	}
	,set_angleTolerance: function(value) {
		return this._curveDiv._angleTolerance = value;
	}
	,get_cuspLimit: function() {
		return 0.0;
	}
	,set_cuspLimit: function(value) {
		return value;
	}
	,reset: function() {
		this._curveInc.reset();
		this._curveDiv.reset();
	}
	,init: function(x1,y1,x2,y2,x3,y3) {
		if(this._approximationMethod == aggx_vectorial_QuadCurve.CURVE_INC) {
			this._curveInc.init(x1,y1,x2,y2,x3,y3);
		} else {
			this._curveDiv.init(x1,y1,x2,y2,x3,y3);
		}
	}
	,rewind: function(pathId) {
		if(this._approximationMethod == aggx_vectorial_QuadCurve.CURVE_INC) {
			this._curveInc.rewind(pathId);
		} else {
			this._curveDiv.rewind(pathId);
		}
	}
	,getVertex: function(x,y) {
		if(this._approximationMethod == aggx_vectorial_QuadCurve.CURVE_INC) {
			return this._curveInc.getVertex(x,y);
		}
		return this._curveDiv.getVertex(x,y);
	}
	,__class__: aggx_vectorial_QuadCurve
};
var aggx_vectorial_QuadCurveFitterDiv = function(x1,y1,x2,y2,x3,y3) {
	this._angleTolerance = 0.0;
	this._approximationScale = 1.0;
	this._count = 0;
	if(x1 != null && y1 != null && x2 != null && y2 != null && x3 != null && y3 != null) {
		this.init(x1,y1,x2,y2,x3,y3);
	}
};
aggx_vectorial_QuadCurveFitterDiv.__name__ = true;
aggx_vectorial_QuadCurveFitterDiv.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_QuadCurveFitterDiv.prototype = {
	get_approximationScale: function() {
		return this._approximationScale;
	}
	,set_approximationScale: function(value) {
		return this._approximationScale = value;
	}
	,get_angleTolerance: function() {
		return this._angleTolerance;
	}
	,set_angleTolerance: function(value) {
		return this._angleTolerance = value;
	}
	,get_cuspLimit: function() {
		return 0.0;
	}
	,set_cuspLimit: function(value) {
		return value;
	}
	,init: function(x1,y1,x2,y2,x3,y3) {
		this._points = [];
		this._distanceToleranceSquare = 0.5 / this._approximationScale;
		this._distanceToleranceSquare *= this._distanceToleranceSquare;
		this.bezier(x1,y1,x2,y2,x3,y3);
		this._count = 0;
	}
	,bezier: function(x1,y1,x2,y2,x3,y3) {
		this._points[this._points.length] = new aggx_core_geometry_Coord(x1,y1);
		this.recursiveBezier(x1,y1,x2,y2,x3,y3,0);
		this._points[this._points.length] = new aggx_core_geometry_Coord(x3,y3);
	}
	,recursiveBezier: function(x1,y1,x2,y2,x3,y3,level) {
		if(level > aggx_vectorial_QuadCurveFitterDiv.CURVE_RECURSION_LIMIT) {
			return;
		}
		var x12 = (x1 + x2) / 2;
		var y12 = (y1 + y2) / 2;
		var x23 = (x2 + x3) / 2;
		var y23 = (y2 + y3) / 2;
		var x123 = (x12 + x23) / 2;
		var y123 = (y12 + y23) / 2;
		var dx = x3 - x1;
		var dy = y3 - y1;
		var d = Math.abs((x2 - x3) * dy - (y2 - y3) * dx);
		var da;
		if(d > aggx_vectorial_QuadCurveFitterDiv.CURVE_COLLINEARITY_EPSILON) {
			if(d * d <= this._distanceToleranceSquare * (dx * dx + dy * dy)) {
				if(this._angleTolerance < aggx_vectorial_QuadCurveFitterDiv.CURVE_ANGLE_TOLERANCE_EPSILON) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x123,y123);
					return;
				}
				da = Math.abs(Math.atan2(y3 - y2,x3 - x2) - Math.atan2(y2 - y1,x2 - x1));
				if(da >= 3.14159265358979323846) {
					da = 6.28318530717958647692 - da;
				}
				if(da < this._angleTolerance) {
					this._points[this._points.length] = new aggx_core_geometry_Coord(x123,y123);
					return;
				}
			}
		} else {
			da = dx * dx + dy * dy;
			if(da == 0) {
				var dx1 = x2 - x1;
				var dy1 = y2 - y1;
				d = dx1 * dx1 + dy1 * dy1;
			} else {
				d = ((x2 - x1) * dx + (y2 - y1) * dy) / da;
				if(d > 0 && d < 1) {
					return;
				}
				if(d <= 0) {
					var dx2 = x1 - x2;
					var dy2 = y1 - y2;
					d = dx2 * dx2 + dy2 * dy2;
				} else if(d >= 1) {
					var dx3 = x3 - x2;
					var dy3 = y3 - y2;
					d = dx3 * dx3 + dy3 * dy3;
				} else {
					var dx4 = x1 + d * dx - x2;
					var dy4 = y1 + d * dy - y2;
					d = dx4 * dx4 + dy4 * dy4;
				}
			}
			if(d < this._distanceToleranceSquare) {
				this._points[this._points.length] = new aggx_core_geometry_Coord(x2,y2);
				return;
			}
		}
		this.recursiveBezier(x1,y1,x12,y12,x123,y123,level + 1);
		this.recursiveBezier(x123,y123,x23,y23,x3,y3,level + 1);
	}
	,reset: function() {
		this._points = [];
		this._count = 0;
	}
	,rewind: function(pathId) {
		this._count = 0;
	}
	,getVertex: function(x,y) {
		if(this._count >= this._points.length) {
			return 0;
		}
		var p = this._points[this._count++];
		x.value = p.x;
		y.value = p.y;
		if(this._count == 1) {
			return 1;
		} else {
			return 2;
		}
	}
	,__class__: aggx_vectorial_QuadCurveFitterDiv
};
var aggx_vectorial_QuadCurveFitterInc = function(x1,y1,x2,y2,x3,y3) {
	this._numSteps = 0;
	this._scale = 1.0;
	this._step = 0;
	if(x1 != null && y1 != null && x2 != null && y2 != null && x3 != null && y3 != null) {
		this.init(x1,y1,x2,y2,x3,y3);
	}
};
aggx_vectorial_QuadCurveFitterInc.__name__ = true;
aggx_vectorial_QuadCurveFitterInc.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_QuadCurveFitterInc.prototype = {
	get_approximationScale: function() {
		return this._scale;
	}
	,set_approximationScale: function(value) {
		return this._scale = value;
	}
	,get_angleTolerance: function() {
		return 0.0;
	}
	,set_angleTolerance: function(value) {
		return value;
	}
	,get_cuspLimit: function() {
		return 0.0;
	}
	,set_cuspLimit: function(value) {
		return value;
	}
	,init: function(x1,y1,x2,y2,x3,y3) {
		this._startX = x1;
		this._startY = y1;
		this._endX = x3;
		this._endY = y3;
		var dx1 = x2 - x1;
		var dy1 = y2 - y1;
		var dx2 = x3 - x2;
		var dy2 = y3 - y2;
		this._numSteps = (Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2)) * 0.25 * this._scale | 0;
		if(this._numSteps < 4) {
			this._numSteps = 4;
		}
		var subdivide_step = 1.0 / this._numSteps;
		var subdivide_step2 = subdivide_step * subdivide_step;
		var tmpx = (x1 - x2 * 2.0 + x3) * subdivide_step2;
		var tmpy = (y1 - y2 * 2.0 + y3) * subdivide_step2;
		this._fxSaved = this._fx = x1;
		this._fySaved = this._fy = y1;
		this._dfxSaved = this._dfx = tmpx + (x2 - x1) * (2.0 * subdivide_step);
		this._dfySaved = this._dfy = tmpy + (y2 - y1) * (2.0 * subdivide_step);
		this._ddfx = tmpx * 2.0;
		this._ddfy = tmpy * 2.0;
		this._step = this._numSteps;
	}
	,reset: function() {
		this._numSteps = 0;
		this._step = -1;
	}
	,rewind: function(pathId) {
		if(this._numSteps == 0) {
			this._step = -1;
			return;
		}
		this._step = this._numSteps;
		this._fx = this._fxSaved;
		this._fy = this._fySaved;
		this._dfx = this._dfxSaved;
		this._dfy = this._dfySaved;
	}
	,getVertex: function(x,y) {
		if(this._step < 0) {
			return 0;
		}
		if(this._step == this._numSteps) {
			x.value = this._startX;
			y.value = this._startY;
			--this._step;
			return 1;
		}
		if(this._step == 0) {
			x.value = this._endX;
			y.value = this._endY;
			--this._step;
			return 2;
		}
		this._fx += this._dfx;
		this._fy += this._dfy;
		this._dfx += this._ddfx;
		this._dfy += this._ddfy;
		x.value = this._fx;
		y.value = this._fy;
		--this._step;
		return 2;
	}
	,__class__: aggx_vectorial_QuadCurveFitterInc
};
var aggx_vectorial_VectorPath = function(vertices) {
	this._svgArc = new aggx_vectorial_BezierArcSvg();
	if(vertices == null) {
		this._vertices = new aggx_vectorial_VertexBlockStorage();
	} else {
		this._vertices = vertices;
	}
};
aggx_vectorial_VectorPath.__name__ = true;
aggx_vectorial_VectorPath.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_VectorPath.prototype = {
	set_vertices: function(vertices) {
		this._vertices = vertices;
		return this._vertices;
	}
	,get_vertices: function() {
		return this._vertices;
	}
	,toString: function() {
		return this._vertices.toString();
	}
	,removeAll: function() {
		var _this = this._vertices;
		_this._coordsX = [];
		_this._coordsY = [];
		_this._commands = [];
		_this._verticesCount = 0;
		this._vertextIterator = 0;
	}
	,freeAll: function() {
		this._vertices.freeAll();
		this._vertextIterator = 0;
	}
	,startNewPath: function() {
		var _this = this._vertices;
		var cmd = 0;
		if(_this._verticesCount != 0) {
			cmd = _this._commands[_this._verticesCount - 1];
		}
		if(cmd != 0) {
			this._vertices.addVertex(0.0,0.0,0);
		}
		return this._vertices._verticesCount;
	}
	,addVertex: function(x,y,cmd) {
		this._vertices.addVertex(x,y,cmd);
	}
	,save: function(data) {
		this._vertices.save(data);
	}
	,load: function(data) {
		this._vertices.load(data);
		this._vertextIterator = 0;
	}
	,relToAbs: function(x,y) {
		if(this._vertices._verticesCount != 0) {
			var x2 = aggx_core_memory_Ref.getFloat();
			var y2 = aggx_core_memory_Ref.getFloat();
			var _this = this._vertices;
			var c;
			if(_this._verticesCount != 0) {
				var idx = _this._verticesCount - 1;
				x2.value = _this._coordsX[idx];
				y2.value = _this._coordsY[idx];
				c = _this._commands[idx];
			} else {
				c = 0;
			}
			if(c >= 1 && c < 15) {
				x.value += x2.value;
				y.value += y2.value;
			}
			aggx_core_memory_Ref.putFloat(x2);
			aggx_core_memory_Ref.putFloat(y2);
		}
	}
	,moveTo: function(x,y) {
		this._vertices.addVertex(x,y,1);
	}
	,moveRel: function(dx,dy) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy;
		this.relToAbs(_this,_this1);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,1);
	}
	,lineTo: function(x,y) {
		this._vertices.addVertex(x,y,2);
	}
	,lineRel: function(dx,dy) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy;
		this.relToAbs(_this,_this1);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,2);
	}
	,hlineTo: function(x) {
		var _this = this._vertices;
		this._vertices.addVertex(x,_this._verticesCount != 0 ? _this._coordsY[_this._verticesCount - 1] : 0.0,2);
	}
	,hlineRel: function(dx) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = 0.0;
		this.relToAbs(_this,_this1);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,2);
	}
	,vlineTo: function(y) {
		var _this = this._vertices;
		this._vertices.addVertex(_this._verticesCount != 0 ? _this._coordsX[_this._verticesCount - 1] : 0.0,y,2);
	}
	,vlineRel: function(dy) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = 0.0;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy;
		this.relToAbs(_this,_this1);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,2);
	}
	,curve3: function(x_ctrl,y_ctrl,x_to,y_to) {
		this._vertices.addVertex(x_ctrl,y_ctrl,3);
		this._vertices.addVertex(x_to,y_to,3);
	}
	,curve3Rel: function(dx_ctrl,dy_ctrl,dx_to,dy_to) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx_ctrl;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy_ctrl;
		var _this2 = aggx_core_memory_Ref.getFloat();
		_this2.value = dx_to;
		var _this3 = aggx_core_memory_Ref.getFloat();
		_this3.value = dy_to;
		this.relToAbs(_this,_this1);
		this.relToAbs(_this2,_this3);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,3);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this2).value,aggx_core_memory_Ref.putFloat(_this3).value,3);
	}
	,curve3To: function(x_to,y_to) {
		var x0 = aggx_core_memory_Ref.getFloat();
		var y0 = aggx_core_memory_Ref.getFloat();
		var _this = this._vertices;
		var c;
		if(_this._verticesCount != 0) {
			var idx = _this._verticesCount - 1;
			x0.value = _this._coordsX[idx];
			y0.value = _this._coordsY[idx];
			c = _this._commands[idx];
		} else {
			c = 0;
		}
		if(c >= 1 && c < 15) {
			var x_ctrl = aggx_core_memory_Ref.getFloat();
			var y_ctrl = aggx_core_memory_Ref.getFloat();
			var _this1 = this._vertices;
			var cmd;
			if(_$UInt_UInt_$Impl_$.gt(_this1._verticesCount,1)) {
				var idx1 = _this1._verticesCount - 2;
				x_ctrl.value = _this1._coordsX[idx1];
				y_ctrl.value = _this1._coordsY[idx1];
				cmd = _this1._commands[idx1];
			} else {
				cmd = 0;
			}
			if(cmd == 3 || cmd == 4) {
				x_ctrl.value = x0.value + x0.value - x_ctrl.value;
				y_ctrl.value = y0.value + y0.value - y_ctrl.value;
			} else {
				x_ctrl.value = x0.value;
				y_ctrl.value = y0.value;
			}
			this.curve3(aggx_core_memory_Ref.putFloat(x_ctrl).value,aggx_core_memory_Ref.putFloat(y_ctrl).value,x_to,y_to);
		}
		aggx_core_memory_Ref.putFloat(x0);
		aggx_core_memory_Ref.putFloat(y0);
	}
	,curve3RelTo: function(dx_to,dy_to) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx_to;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy_to;
		this.relToAbs(_this,_this1);
		this.curve3To(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value);
	}
	,curve4: function(x_ctrl1,y_ctrl1,x_ctrl2,y_ctrl2,x_to,y_to) {
		this._vertices.addVertex(x_ctrl1,y_ctrl1,4);
		this._vertices.addVertex(x_ctrl2,y_ctrl2,4);
		this._vertices.addVertex(x_to,y_to,4);
	}
	,curve4Rel: function(dx_ctrl1,dy_ctrl1,dx_ctrl2,dy_ctrl2,dx_to,dy_to) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx_ctrl1;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy_ctrl1;
		var _this2 = aggx_core_memory_Ref.getFloat();
		_this2.value = dx_ctrl2;
		var _this3 = aggx_core_memory_Ref.getFloat();
		_this3.value = dy_ctrl2;
		var _this4 = aggx_core_memory_Ref.getFloat();
		_this4.value = dx_to;
		var _this5 = aggx_core_memory_Ref.getFloat();
		_this5.value = dy_to;
		this.relToAbs(_this,_this1);
		this.relToAbs(_this2,_this3);
		this.relToAbs(_this4,_this5);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,4);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this2).value,aggx_core_memory_Ref.putFloat(_this3).value,4);
		this._vertices.addVertex(aggx_core_memory_Ref.putFloat(_this4).value,aggx_core_memory_Ref.putFloat(_this5).value,4);
	}
	,curve4To: function(x_ctrl2,y_ctrl2,x_to,y_to) {
		var x0 = aggx_core_memory_Ref.getFloat();
		var y0 = aggx_core_memory_Ref.getFloat();
		var _this = this._vertices;
		var c;
		if(_this._verticesCount != 0) {
			var idx = _this._verticesCount - 1;
			x0.value = _this._coordsX[idx];
			y0.value = _this._coordsY[idx];
			c = _this._commands[idx];
		} else {
			c = 0;
		}
		if(c >= 1 && c < 15) {
			var x_ctrl1 = aggx_core_memory_Ref.getFloat();
			var y_ctrl1 = aggx_core_memory_Ref.getFloat();
			var _this1 = this._vertices;
			var cmd;
			if(_$UInt_UInt_$Impl_$.gt(_this1._verticesCount,1)) {
				var idx1 = _this1._verticesCount - 2;
				x_ctrl1.value = _this1._coordsX[idx1];
				y_ctrl1.value = _this1._coordsY[idx1];
				cmd = _this1._commands[idx1];
			} else {
				cmd = 0;
			}
			if(cmd == 3 || cmd == 4) {
				x_ctrl1.value = x0.value + x0.value - x_ctrl1.value;
				y_ctrl1.value = y0.value + y0.value - y_ctrl1.value;
			} else {
				x_ctrl1.value = x0.value;
				y_ctrl1.value = y0.value;
			}
			this.curve4(aggx_core_memory_Ref.putFloat(x_ctrl1).value,aggx_core_memory_Ref.putFloat(y_ctrl1).value,x_ctrl2,y_ctrl2,x_to,y_to);
		}
		aggx_core_memory_Ref.putFloat(x0);
		aggx_core_memory_Ref.putFloat(y0);
	}
	,curve4RelTo: function(dx_ctrl2,dy_ctrl2,dx_to,dy_to) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx_ctrl2;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy_ctrl2;
		var _this2 = aggx_core_memory_Ref.getFloat();
		_this2.value = dx_to;
		var _this3 = aggx_core_memory_Ref.getFloat();
		_this3.value = dy_to;
		this.relToAbs(_this,_this1);
		this.relToAbs(_this2,_this3);
		this.curve4To(aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value,aggx_core_memory_Ref.putFloat(_this2).value,aggx_core_memory_Ref.putFloat(_this3).value);
	}
	,arcImpl: function(x0,y0,rx,ry,angle,isLargeArc,isSweep,x,y) {
		this._svgArc.init(x0.value,y0.value,rx,ry,angle,isLargeArc,isSweep,x,y);
		this._svgArc.addToPath(this);
	}
	,arc: function(rx,ry,angle,isLargeArc,isSweep,x,y) {
		var x0 = aggx_core_memory_Ref.getFloat();
		var y0 = aggx_core_memory_Ref.getFloat();
		var _this = this._vertices;
		var c;
		if(_this._verticesCount != 0) {
			var idx = _this._verticesCount - 1;
			x0.value = _this._coordsX[idx];
			y0.value = _this._coordsY[idx];
			c = _this._commands[idx];
		} else {
			c = 0;
		}
		if(c >= 1 && c < 15) {
			this.arcImpl(x0,y0,rx,ry,angle,isLargeArc,isSweep,x,y);
		} else {
			this.moveTo(x,y);
		}
		aggx_core_memory_Ref.putFloat(x0);
		aggx_core_memory_Ref.putFloat(y0);
	}
	,arcRel: function(rx,ry,angle,isLargeArc,isSweep,dx,dy) {
		var _this = aggx_core_memory_Ref.getFloat();
		_this.value = dx;
		var _this1 = aggx_core_memory_Ref.getFloat();
		_this1.value = dy;
		this.relToAbs(_this,_this1);
		this.arc(rx,ry,angle,isLargeArc,isSweep,aggx_core_memory_Ref.putFloat(_this).value,aggx_core_memory_Ref.putFloat(_this1).value);
	}
	,endPoly: function(flags) {
		var _this = this._vertices;
		var cmd = 0;
		if(_this._verticesCount != 0) {
			cmd = _this._commands[_this._verticesCount - 1];
		}
		var c = cmd;
		if(c >= 1 && c < 15) {
			this._vertices.addVertex(0.0,0.0,15 | flags);
		}
	}
	,closePolygon: function(flags) {
		if(flags == null) {
			flags = 0;
		}
		var _this = this._vertices;
		var cmd = 0;
		if(_this._verticesCount != 0) {
			cmd = _this._commands[_this._verticesCount - 1];
		}
		var c = cmd;
		if(c >= 1 && c < 15) {
			this._vertices.addVertex(0.0,0.0,15 | (64 | flags));
		}
	}
	,concatPath: function(vs,pathId) {
		if(pathId == null) {
			pathId = 0;
		}
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		var cmd;
		vs.rewind(pathId);
		while(true) {
			cmd = vs.getVertex(x,y);
			if(!(cmd != 0)) {
				break;
			}
			this._vertices.addVertex(x.value,y.value,cmd);
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,joinPath: function(vs,pathId) {
		if(pathId == null) {
			pathId = 0;
		}
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		vs.rewind(pathId);
		var cmd = vs.getVertex(x,y);
		if(cmd != 0) {
			if(cmd >= 1 && cmd < 15) {
				var x0 = aggx_core_memory_Ref.getFloat();
				var y0 = aggx_core_memory_Ref.getFloat();
				var _this = this._vertices;
				var cmd0;
				if(_this._verticesCount != 0) {
					var idx = _this._verticesCount - 1;
					x0.value = _this._coordsX[idx];
					y0.value = _this._coordsY[idx];
					cmd0 = _this._commands[idx];
				} else {
					cmd0 = 0;
				}
				if(cmd0 >= 1 && cmd0 < 15) {
					var __dx = x0.value - x.value;
					var __dy = y0.value - y.value;
					if(Math.sqrt(__dx * __dx + __dy * __dy) > 1.0e-14) {
						if(cmd == 1) {
							cmd = 2;
						}
						this._vertices.addVertex(x.value,y.value,cmd);
					}
				} else {
					if(cmd0 == 0) {
						cmd = 1;
					} else if(cmd == 1) {
						cmd = 2;
					}
					this._vertices.addVertex(x.value,y.value,cmd);
				}
				aggx_core_memory_Ref.putFloat(x0);
				aggx_core_memory_Ref.putFloat(y0);
			}
			while(true) {
				cmd = vs.getVertex(x,y);
				if(!(cmd != 0)) {
					break;
				}
				this._vertices.addVertex(x.value,y.value,cmd == 1 ? 2 : cmd);
			}
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,getLastVertex: function(x,y) {
		var _this = this._vertices;
		if(_this._verticesCount != 0) {
			var idx = _this._verticesCount - 1;
			x.value = _this._coordsX[idx];
			y.value = _this._coordsY[idx];
			return _this._commands[idx];
		} else {
			return 0;
		}
	}
	,getPrevVertex: function(x,y) {
		var _this = this._vertices;
		if(_$UInt_UInt_$Impl_$.gt(_this._verticesCount,1)) {
			var idx = _this._verticesCount - 2;
			x.value = _this._coordsX[idx];
			y.value = _this._coordsY[idx];
			return _this._commands[idx];
		} else {
			return 0;
		}
	}
	,getVertex: function(x,y) {
		if(_$UInt_UInt_$Impl_$.gte(this._vertextIterator,this._vertices._verticesCount)) {
			return 0;
		}
		var _this = this._vertices;
		var idx = this._vertextIterator;
		x.value = _this._coordsX[idx];
		y.value = _this._coordsY[idx];
		var cmd = _this._commands[idx];
		this._vertextIterator++;
		return cmd;
	}
	,getVertexByIndex: function(idx,x,y) {
		var _this = this._vertices;
		x.value = _this._coordsX[idx];
		y.value = _this._coordsY[idx];
		return _this._commands[idx];
	}
	,getCommand: function(idx) {
		return this._vertices._commands[idx];
	}
	,modifyVertex: function(idx,x,y,cmd) {
		var _this = this._vertices;
		_this._coordsX[idx] = x;
		_this._coordsY[idx] = y;
		if(cmd != null) {
			_this._commands[idx] = cmd;
		}
	}
	,modifyCommand: function(idx,cmd) {
		this._vertices._commands[idx] = cmd;
	}
	,rewind: function(pathId) {
		this._vertextIterator = pathId;
	}
	,transform: function(trans,pathId) {
		if(pathId == null) {
			pathId = 0;
		}
		var numVer = this._vertices._verticesCount;
		var i = pathId;
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		while(_$UInt_UInt_$Impl_$.gt(numVer,i)) {
			var _this = this._vertices;
			x.value = _this._coordsX[pathId];
			y.value = _this._coordsY[pathId];
			var cmd = _this._commands[pathId];
			if(cmd == 0) {
				break;
			}
			if(cmd >= 1 && cmd < 15) {
				trans.transform(x,y);
				var _this1 = this._vertices;
				_this1._coordsX[pathId] = x.value;
				_this1._coordsY[pathId] = y.value;
			}
			++i;
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,transformAllPaths: function(trans) {
		var idx = 0;
		var numVer = this._vertices._verticesCount;
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		while(_$UInt_UInt_$Impl_$.gt(numVer,idx)) {
			var _this = this._vertices;
			x.value = _this._coordsX[idx];
			y.value = _this._coordsY[idx];
			var c = _this._commands[idx];
			if(c >= 1 && c < 15) {
				trans.transform(x,y);
				var _this1 = this._vertices;
				_this1._coordsX[idx] = x.value;
				_this1._coordsY[idx] = y.value;
			}
			++idx;
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,perceivePolygonOrientation: function(start,end) {
		var np = end - start;
		var area = 0.0;
		var i = 0;
		var x1 = aggx_core_memory_Ref.getFloat();
		var y1 = aggx_core_memory_Ref.getFloat();
		var x2 = aggx_core_memory_Ref.getFloat();
		var y2 = aggx_core_memory_Ref.getFloat();
		while(i < np) {
			var _this = this._vertices;
			var idx = start + i;
			x1.value = _this._coordsX[idx];
			y1.value = _this._coordsY[idx];
			var _this1 = this._vertices;
			var idx1 = start + (i + 1) % np;
			x2.value = _this1._coordsX[idx1];
			y2.value = _this1._coordsY[idx1];
			area += x1.value * y2.value - y1.value * x2.value;
			++i;
		}
		aggx_core_memory_Ref.putFloat(x1);
		aggx_core_memory_Ref.putFloat(y1);
		aggx_core_memory_Ref.putFloat(x2);
		aggx_core_memory_Ref.putFloat(y2);
		if(area < 0.0) {
			return 32;
		} else {
			return 16;
		}
	}
	,invertPolygon: function(start,end) {
		var _end = end;
		if(end == null) {
			while(true) {
				var tmp;
				if(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,start)) {
					var c = this._vertices._commands[start];
					tmp = !(c >= 1 && c < 15);
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				++start;
			}
			while(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,start + 1) && this._vertices._commands[start] == 1 && this._vertices._commands[start + 1] == 1) ++start;
			_end = start + 1;
			while(true) {
				var tmp1;
				if(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,end)) {
					var c1 = this._vertices._commands[_end];
					tmp1 = !(c1 == 0 || c1 == 1 || (c1 & 15) == 15);
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
				++_end;
			}
		}
		var tmp_cmd = this._vertices._commands[start];
		--_end;
		var i = start;
		while(_$UInt_UInt_$Impl_$.gt(_end,i)) {
			this._vertices._commands[i] = this._vertices._commands[i + 1];
			++i;
		}
		this._vertices._commands[_end] = tmp_cmd;
		while(_$UInt_UInt_$Impl_$.gt(_end,start)) this._vertices.swapVertices(start++,_end--);
	}
	,arrangePolygonOrientation: function(start,orientation) {
		if(orientation == 0) {
			return start;
		}
		while(true) {
			var tmp;
			if(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,start)) {
				var c = this._vertices._commands[start];
				tmp = !(c >= 1 && c < 15);
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++start;
		}
		while(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,start + 1) && this._vertices._commands[start] == 1 && this._vertices._commands[start + 1] == 1) ++start;
		var end = start + 1;
		while(true) {
			var tmp1;
			if(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,end)) {
				var c1 = this._vertices._commands[end];
				tmp1 = !(c1 == 0 || c1 == 1 || (c1 & 15) == 15);
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			++end;
		}
		if(_$UInt_UInt_$Impl_$.gt(end - start,2)) {
			if(this.perceivePolygonOrientation(start,end) != orientation) {
				this.invertPolygon(start,end);
				var cmd;
				while(true) {
					var tmp2;
					if(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,end)) {
						cmd = this._vertices._commands[end];
						tmp2 = (cmd & 15) == 15;
					} else {
						tmp2 = false;
					}
					if(!tmp2) {
						break;
					}
					this._vertices._commands[end++] = cmd & -49 | orientation;
				}
			}
		}
		return end;
	}
	,arrangeOrientations: function(start,orientation) {
		if(orientation != 0) {
			while(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,start)) {
				start = this.arrangePolygonOrientation(start,orientation);
				if(this._vertices._commands[start] == 0) {
					++start;
					break;
				}
			}
		}
		return start;
	}
	,arrangeOrientationsAllPaths: function(orientation) {
		if(orientation != 0) {
			var start = 0;
			while(_$UInt_UInt_$Impl_$.gt(this._vertices._verticesCount,start)) start = this.arrangeOrientations(start,orientation);
		}
	}
	,flipX: function(x1,x2) {
		var i = 0;
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		var z = this._vertices._verticesCount;
		while(_$UInt_UInt_$Impl_$.gt(z,i)) {
			var _this = this._vertices;
			x.value = _this._coordsX[i];
			y.value = _this._coordsY[i];
			var cmd = _this._commands[i];
			if(cmd >= 1 && cmd < 15) {
				var _this1 = this._vertices;
				_this1._coordsX[i] = x2 - x.value + x1;
				_this1._coordsY[i] = y.value;
			}
			++i;
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,flipY: function(y1,y2) {
		var i = 0;
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		var z = this._vertices._verticesCount;
		while(_$UInt_UInt_$Impl_$.gt(z,i)) {
			var _this = this._vertices;
			x.value = _this._coordsX[i];
			y.value = _this._coordsY[i];
			var cmd = _this._commands[i];
			if(cmd >= 1 && cmd < 15) {
				var _this1 = this._vertices;
				_this1._coordsX[i] = x.value;
				_this1._coordsY[i] = y2 - y.value + y1;
			}
			++i;
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,translate: function(dx,dy,pathId) {
		var num_ver = this._vertices._verticesCount;
		var i = pathId;
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		while(_$UInt_UInt_$Impl_$.gt(num_ver,i)) {
			var _this = this._vertices;
			x.value = _this._coordsX[pathId];
			y.value = _this._coordsY[pathId];
			var cmd = _this._commands[pathId];
			if(cmd == 0) {
				break;
			}
			if(cmd >= 1 && cmd < 15) {
				x.value += dx;
				y.value += dy;
				var _this1 = this._vertices;
				_this1._coordsX[pathId] = x.value;
				_this1._coordsY[pathId] = y.value;
			}
			++i;
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,translateAllPaths: function(dx,dy) {
		var idx = 0;
		var num_ver = this._vertices._verticesCount;
		var x = aggx_core_memory_Ref.getFloat();
		var y = aggx_core_memory_Ref.getFloat();
		while(_$UInt_UInt_$Impl_$.gt(num_ver,idx)) {
			var _this = this._vertices;
			x.value = _this._coordsX[idx];
			y.value = _this._coordsY[idx];
			var c = _this._commands[idx];
			if(c >= 1 && c < 15) {
				x.value += dx;
				y.value += dy;
				var _this1 = this._vertices;
				_this1._coordsX[idx] = x.value;
				_this1._coordsY[idx] = y.value;
			}
			++idx;
		}
		aggx_core_memory_Ref.putFloat(x);
		aggx_core_memory_Ref.putFloat(y);
	}
	,get_lastX: function() {
		var _this = this._vertices;
		if(_this._verticesCount != 0) {
			return _this._coordsX[_this._verticesCount - 1];
		} else {
			return 0.0;
		}
	}
	,get_lastY: function() {
		var _this = this._vertices;
		if(_this._verticesCount != 0) {
			return _this._coordsY[_this._verticesCount - 1];
		} else {
			return 0.0;
		}
	}
	,get_verticesCount: function() {
		return this._vertices._verticesCount;
	}
	,__class__: aggx_vectorial_VectorPath
};
var aggx_vectorial_VertexBlockStorage = function() {
	this._coordsX = [];
	this._coordsY = [];
	this._commands = [];
	this._verticesCount = 0;
};
aggx_vectorial_VertexBlockStorage.__name__ = true;
aggx_vectorial_VertexBlockStorage.prototype = {
	save: function(data) {
		data.preallocate(4 + 8 * this._verticesCount + this._verticesCount);
		data.writeUInt32(this._verticesCount);
		var _g = 0;
		var _g1 = this._verticesCount;
		while(_g < _g1) data.writeFloat32(this._coordsX[_g++]);
		var _g2 = 0;
		var _g3 = this._verticesCount;
		while(_g2 < _g3) data.writeFloat32(this._coordsY[_g2++]);
		var _g4 = 0;
		var _g5 = this._verticesCount;
		while(_g4 < _g5) data.writeUInt8(this._commands[_g4++]);
	}
	,load: function(data) {
		this._verticesCount = data.readUInt32();
		this._coordsX = [];
		var _g = 0;
		var _g1 = this._verticesCount;
		while(_g < _g1) {
			++_g;
			this._coordsX.push(data.readFloat32());
		}
		this._coordsY = [];
		var _g2 = 0;
		var _g3 = this._verticesCount;
		while(_g2 < _g3) {
			++_g2;
			this._coordsY.push(data.readFloat32());
		}
		this._commands = [];
		var _g4 = 0;
		var _g5 = this._verticesCount;
		while(_g4 < _g5) {
			++_g4;
			this._commands.push(data.readUInt8());
		}
	}
	,toString: function() {
		var buf_b = "";
		var _g = 0;
		var _g1 = this._verticesCount;
		while(_g < _g1) {
			var i = _g++;
			buf_b += Std.string("{" + this._coordsX[i] + ", " + this._coordsY[i] + "} -> " + this._commands[i] + "\n");
		}
		return buf_b;
	}
	,get_lastCommand: function() {
		var cmd = 0;
		if(this._verticesCount != 0) {
			cmd = this._commands[this._verticesCount - 1];
		}
		return cmd;
	}
	,get_lastX: function() {
		if(this._verticesCount != 0) {
			return this._coordsX[this._verticesCount - 1];
		} else {
			return 0.0;
		}
	}
	,get_lastY: function() {
		if(this._verticesCount != 0) {
			return this._coordsY[this._verticesCount - 1];
		} else {
			return 0.0;
		}
	}
	,get_verticesCount: function() {
		return this._verticesCount;
	}
	,removeAll: function() {
		this._coordsX = [];
		this._coordsY = [];
		this._commands = [];
		this._verticesCount = 0;
	}
	,freeAll: function() {
		this._coordsX = [];
		this._coordsY = [];
		this._commands = [];
		this._verticesCount = 0;
	}
	,addVertex: function(x,y,cmd) {
		this._coordsX.push(x);
		this._coordsY.push(y);
		this._commands.push(cmd);
		this._verticesCount++;
	}
	,modifyVertex: function(idx,x,y,cmd) {
		this._coordsX[idx] = x;
		this._coordsY[idx] = y;
		if(cmd != null) {
			this._commands[idx] = cmd;
		}
	}
	,modifyCommand: function(idx,cmd) {
		this._commands[idx] = cmd;
	}
	,swapVertices: function(v1,v2) {
		var v0 = this._coordsX[v1];
		this._coordsX[v1] = this._coordsX[v2];
		this._coordsX[v2] = v0;
		v0 = this._coordsY[v1];
		this._coordsY[v1] = this._coordsY[v2];
		this._coordsY[v2] = v0;
		var c = this._commands[v1];
		this._commands[v1] = this._commands[v2];
		this._commands[v2] = c;
	}
	,getLastVertex: function(x,y) {
		if(this._verticesCount != 0) {
			var idx = this._verticesCount - 1;
			x.value = this._coordsX[idx];
			y.value = this._coordsY[idx];
			return this._commands[idx];
		} else {
			return 0;
		}
	}
	,getPrevVertex: function(x,y) {
		if(_$UInt_UInt_$Impl_$.gt(this._verticesCount,1)) {
			var idx = this._verticesCount - 2;
			x.value = this._coordsX[idx];
			y.value = this._coordsY[idx];
			return this._commands[idx];
		} else {
			return 0;
		}
	}
	,getVertex: function(idx,x,y) {
		x.value = this._coordsX[idx];
		y.value = this._coordsY[idx];
		return this._commands[idx];
	}
	,getCommand: function(idx) {
		return this._commands[idx];
	}
	,__class__: aggx_vectorial_VertexBlockStorage
};
var aggx_vectorial_VertexDistance = function(x_,y_) {
	this.x = x_;
	this.y = y_;
	this.dist = 0.0;
};
aggx_vectorial_VertexDistance.__name__ = true;
aggx_vectorial_VertexDistance.__interfaces__ = [aggx_vectorial_IDistanceProvider];
aggx_vectorial_VertexDistance.prototype = {
	calc: function(val) {
		var __dx = val.x - this.x;
		var __dy = val.y - this.y;
		var ret = (this.dist = Math.sqrt(__dx * __dx + __dy * __dy)) > 1.0e-14;
		if(!ret) {
			this.dist = 1e+014;
		}
		return ret;
	}
	,__class__: aggx_vectorial_VertexDistance
};
var aggx_vectorial_VertexSequence = function() {
	this._storage = [];
};
aggx_vectorial_VertexSequence.__name__ = true;
aggx_vectorial_VertexSequence.prototype = {
	get_size: function() {
		return this._storage.length;
	}
	,add: function(vd) {
		if(this._storage.length > 1) {
			if(!this._storage[this._storage.length - 2].calc(this._storage[this._storage.length - 1])) {
				this._storage.pop();
			}
		}
		this._storage.push(vd);
	}
	,removeAll: function() {
		this._storage = [];
	}
	,removeLast: function() {
		this._storage.pop();
	}
	,modifyLast: function(v) {
		this._storage.pop();
		this._storage.push(v);
	}
	,prev: function(idx) {
		return this._storage[_$UInt_UInt_$Impl_$.toFloat(idx + this._storage.length - 1) % _$UInt_UInt_$Impl_$.toFloat(this._storage.length) | 0];
	}
	,curr: function(idx) {
		return this._storage[idx];
	}
	,next: function(idx) {
		return this._storage[_$UInt_UInt_$Impl_$.toFloat(idx + this._storage.length + 1) % _$UInt_UInt_$Impl_$.toFloat(this._storage.length) | 0];
	}
	,close: function(closed) {
		while(this._storage.length > 1) {
			if(this._storage[this._storage.length - 2].calc(this._storage[this._storage.length - 1])) {
				break;
			}
			var t = this._storage[this._storage.length - 1];
			this._storage.pop();
			this._storage.pop();
			this._storage.push(t);
		}
		if(closed) {
			while(this._storage.length > 1) {
				if(this._storage[this._storage.length - 1].calc(this._storage[0])) {
					break;
				}
				this._storage.pop();
			}
		}
	}
	,get: function(i) {
		return this._storage[i];
	}
	,set: function(i,val) {
		this._storage[i] = val;
	}
	,__class__: aggx_vectorial_VertexSequence
};
var aggx_vectorial_converters_ConvAdaptorVcgen = function(vs,markers) {
	this._startY = 0.0;
	this._startX = 0.0;
	this._source = vs;
	this._status = 0;
	if(markers == null) {
		markers = new aggx_vectorial_NullMarkers();
	}
	this._markers = markers;
};
aggx_vectorial_converters_ConvAdaptorVcgen.__name__ = true;
aggx_vectorial_converters_ConvAdaptorVcgen.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_converters_ConvAdaptorVcgen.prototype = {
	attach: function(source) {
		this._source = source;
	}
	,get_generator: function() {
		return this._generator;
	}
	,get_markers: function() {
		return this._markers;
	}
	,rewind: function(pathId) {
		this._source.rewind(pathId);
		this._status = 0;
	}
	,getVertex: function(x,y) {
		var cmd = 0;
		var done = false;
		while(!done) switch(this._status) {
		case 0:
			this._markers.removeAll();
			var _this = aggx_core_memory_Ref.getFloat();
			_this.value = this._startX;
			var _this1 = aggx_core_memory_Ref.getFloat();
			_this1.value = this._startY;
			this._lastCmd = this._source.getVertex(_this,_this1);
			this._startX = aggx_core_memory_Ref.putFloat(_this).value;
			this._startY = aggx_core_memory_Ref.putFloat(_this1).value;
			this._status = 1;
			break;
		case 1:
			if(this._lastCmd == 0) {
				return 0;
			}
			this._generator.removeAll();
			this._generator.addVertex(this._startX,this._startY,1);
			this._markers.addVertex(this._startX,this._startY,1);
			while(true) {
				cmd = this._source.getVertex(x,y);
				if(cmd >= 1 && cmd < 15) {
					this._lastCmd = cmd;
					if(cmd == 1) {
						this._startX = x.value;
						this._startY = y.value;
						break;
					}
					this._generator.addVertex(x.value,y.value,cmd);
					this._markers.addVertex(x.value,y.value,2);
				} else {
					if(cmd == 0) {
						this._lastCmd = 0;
						break;
					}
					if((cmd & 15) == 15) {
						this._generator.addVertex(x.value,y.value,cmd);
						break;
					}
				}
			}
			this._generator.rewind(0);
			this._status = 2;
			break;
		case 2:
			cmd = this._generator.getVertex(x,y);
			if(cmd == 0) {
				this._status = 1;
			} else {
				done = true;
			}
			break;
		}
		return cmd;
	}
	,__class__: aggx_vectorial_converters_ConvAdaptorVcgen
};
var aggx_vectorial_converters_ConvCurve = function(source) {
	this._source = source;
	this._curve3 = new aggx_vectorial_QuadCurve();
	this._curve4 = new aggx_vectorial_CubicCurve();
	this._lastX = 0;
	this._lastY = 0;
};
aggx_vectorial_converters_ConvCurve.__name__ = true;
aggx_vectorial_converters_ConvCurve.__interfaces__ = [aggx_vectorial_IVertexSource];
aggx_vectorial_converters_ConvCurve.prototype = {
	attach: function(source) {
		this._source = source;
	}
	,get_approximationScale: function() {
		return this._curve4._curveInc._scale;
	}
	,set_approximationScale: function(value) {
		var _this = this._curve3;
		_this._curveInc._scale = value;
		_this._curveDiv._approximationScale = value;
		var _this1 = this._curve4;
		_this1._curveInc._scale = value;
		_this1._curveDiv._approximationScale = value;
		return value;
	}
	,get_approximationMethod: function() {
		return this._curve4._approximationMethod;
	}
	,set_approximationMethod: function(value) {
		this._curve3._approximationMethod = value;
		this._curve4._approximationMethod = value;
		return value;
	}
	,get_angleTolerance: function() {
		return this._curve4._curveDiv._angleTolerance;
	}
	,set_angleTolerance: function(value) {
		this._curve3._curveDiv._angleTolerance = value;
		this._curve4._curveDiv._angleTolerance = value;
		return value;
	}
	,get_cuspLimit: function() {
		return this._curve4._curveDiv._cuspLimit;
	}
	,set_cuspLimit: function(value) {
		this._curve4._curveDiv._cuspLimit = value;
		return value;
	}
	,rewind: function(pathId) {
		this._source.rewind(pathId);
		this._lastX = 0.0;
		this._lastY = 0.0;
		this._curve3.reset();
		this._curve4.reset();
	}
	,getVertex: function(x,y) {
		if(this._curve3.getVertex(x,y) != 0) {
			this._lastX = x.value;
			this._lastY = y.value;
			return 2;
		}
		var _this = this._curve4;
		if((_this._approximationMethod == aggx_vectorial_CubicCurve.CURVE_INC ? _this._curveInc.getVertex(x,y) : _this._curveDiv.getVertex(x,y)) != 0) {
			this._lastX = x.value;
			this._lastY = y.value;
			return 2;
		}
		var ct2_x = aggx_core_memory_Ref.getFloat();
		var ct2_y = aggx_core_memory_Ref.getFloat();
		var end_x = aggx_core_memory_Ref.getFloat();
		var end_y = aggx_core_memory_Ref.getFloat();
		var cmd = this._source.getVertex(x,y);
		switch(cmd) {
		case 3:
			this._source.getVertex(end_x,end_y);
			this._curve3.init(this._lastX,this._lastY,x.value,y.value,end_x.value,end_y.value);
			aggx_core_memory_Ref.putFloat(ct2_x);
			aggx_core_memory_Ref.putFloat(ct2_y);
			aggx_core_memory_Ref.putFloat(end_x);
			aggx_core_memory_Ref.putFloat(end_y);
			this._curve3.getVertex(x,y);
			this._curve3.getVertex(x,y);
			cmd = 2;
			break;
		case 4:
			this._source.getVertex(ct2_x,ct2_y);
			this._source.getVertex(end_x,end_y);
			this._curve4.init(this._lastX,this._lastY,x.value,y.value,ct2_x.value,ct2_y.value,end_x.value,end_y.value);
			aggx_core_memory_Ref.putFloat(ct2_x);
			aggx_core_memory_Ref.putFloat(ct2_y);
			aggx_core_memory_Ref.putFloat(end_x);
			aggx_core_memory_Ref.putFloat(end_y);
			var _this1 = this._curve4;
			if(_this1._approximationMethod == aggx_vectorial_CubicCurve.CURVE_INC) {
				_this1._curveInc.getVertex(x,y);
			} else {
				_this1._curveDiv.getVertex(x,y);
			}
			var _this2 = this._curve4;
			if(_this2._approximationMethod == aggx_vectorial_CubicCurve.CURVE_INC) {
				_this2._curveInc.getVertex(x,y);
			} else {
				_this2._curveDiv.getVertex(x,y);
			}
			cmd = 2;
			break;
		}
		this._lastX = x.value;
		this._lastY = y.value;
		return cmd;
	}
	,__class__: aggx_vectorial_converters_ConvCurve
};
var aggx_vectorial_converters_ConvStroke = function(vs,markers) {
	aggx_vectorial_converters_ConvAdaptorVcgen.call(this,vs,markers);
	this._generator = this._gen = new aggx_vectorial_generators_VcgenStroke();
};
aggx_vectorial_converters_ConvStroke.__name__ = true;
aggx_vectorial_converters_ConvStroke.__super__ = aggx_vectorial_converters_ConvAdaptorVcgen;
aggx_vectorial_converters_ConvStroke.prototype = $extend(aggx_vectorial_converters_ConvAdaptorVcgen.prototype,{
	get_width: function() {
		return this._gen._stroker._width * 2.0;
	}
	,set_width: function(value) {
		var _this = this._gen._stroker;
		_this._width = value * 0.5;
		if(_this._width < 0) {
			_this._widthAbs = -_this._width;
			_this._widthSign = -1;
		} else {
			_this._widthAbs = _this._width;
			_this._widthSign = 1;
		}
		_this._widthEps = _this._width / 1024.0;
		return _this._width;
	}
	,get_lineCap: function() {
		return this._gen._stroker._lineCap;
	}
	,set_lineCap: function(value) {
		return this._gen._stroker._lineCap = value;
	}
	,get_lineJoin: function() {
		return this._gen._stroker._lineJoin;
	}
	,set_lineJoin: function(value) {
		return this._gen._stroker._lineJoin = value;
	}
	,get_innerJoin: function() {
		return this._gen._stroker._innerJoin;
	}
	,set_innerJoin: function(value) {
		return this._gen._stroker._innerJoin = value;
	}
	,get_miterLimit: function() {
		return this._gen._stroker._miterLimit;
	}
	,set_miterLimit: function(value) {
		return this._gen._stroker._miterLimit = value;
	}
	,get_innerMiterLimit: function() {
		return this._gen._stroker._innerMiterLimit;
	}
	,set_innerMiterLimit: function(value) {
		return this._gen._stroker._innerMiterLimit = value;
	}
	,get_approximationScale: function() {
		return this._gen._stroker._approximationScale;
	}
	,set_approximationScale: function(value) {
		return this._gen._stroker._approximationScale = value;
	}
	,set_miterLimitTheta: function(value) {
		return this._gen._stroker._miterLimit = value;
	}
	,get_shorten: function() {
		return this._gen._shorten;
	}
	,set_shorten: function(value) {
		return this._gen._shorten = value;
	}
	,__class__: aggx_vectorial_converters_ConvStroke
});
var aggx_vectorial_generators_ICurveGenerator = function() { };
aggx_vectorial_generators_ICurveGenerator.__name__ = true;
aggx_vectorial_generators_ICurveGenerator.prototype = {
	__class__: aggx_vectorial_generators_ICurveGenerator
};
var aggx_vectorial_generators_VcgenStroke = function() {
	this._stroker = new aggx_vectorial_MathStroke();
	this._srcVertices = new aggx_vectorial_VertexSequence();
	this._outVertices = [];
	this._outVertexIndex = 0;
	this._srcVertexIndex = 0;
	this._status = 0;
	this._isClosed = 0;
	this._shorten = 0.0;
};
aggx_vectorial_generators_VcgenStroke.__name__ = true;
aggx_vectorial_generators_VcgenStroke.__interfaces__ = [aggx_vectorial_IVertexSource,aggx_vectorial_generators_ICurveGenerator];
aggx_vectorial_generators_VcgenStroke.prototype = {
	get_width: function() {
		return this._stroker._width * 2.0;
	}
	,set_width: function(value) {
		var _this = this._stroker;
		_this._width = value * 0.5;
		if(_this._width < 0) {
			_this._widthAbs = -_this._width;
			_this._widthSign = -1;
		} else {
			_this._widthAbs = _this._width;
			_this._widthSign = 1;
		}
		_this._widthEps = _this._width / 1024.0;
		return _this._width;
	}
	,get_lineCap: function() {
		return this._stroker._lineCap;
	}
	,set_lineCap: function(value) {
		return this._stroker._lineCap = value;
	}
	,get_lineJoin: function() {
		return this._stroker._lineJoin;
	}
	,set_lineJoin: function(value) {
		return this._stroker._lineJoin = value;
	}
	,get_innerJoin: function() {
		return this._stroker._innerJoin;
	}
	,set_innerJoin: function(value) {
		return this._stroker._innerJoin = value;
	}
	,get_miterLimit: function() {
		return this._stroker._miterLimit;
	}
	,set_miterLimit: function(value) {
		return this._stroker._miterLimit = value;
	}
	,get_innerMiterLimit: function() {
		return this._stroker._innerMiterLimit;
	}
	,set_innerMiterLimit: function(value) {
		return this._stroker._innerMiterLimit = value;
	}
	,get_approximationScale: function() {
		return this._stroker._approximationScale;
	}
	,set_approximationScale: function(value) {
		return this._stroker._approximationScale = value;
	}
	,set_miterLimitTheta: function(value) {
		return this._stroker._miterLimit = value;
	}
	,get_shorten: function() {
		return this._shorten;
	}
	,set_shorten: function(value) {
		return this._shorten = value;
	}
	,removeAll: function() {
		this._srcVertices._storage = [];
		this._isClosed = 0;
		this._status = 0;
	}
	,addVertex: function(x,y,cmd) {
		this._status = 0;
		if(cmd == 1) {
			var _this = this._srcVertices;
			var v = new aggx_vectorial_VertexDistance(x,y);
			_this._storage.pop();
			_this._storage.push(v);
		} else if(cmd >= 1 && cmd < 15) {
			var _this1 = this._srcVertices;
			var vd = new aggx_vectorial_VertexDistance(x,y);
			if(_this1._storage.length > 1) {
				if(!_this1._storage[_this1._storage.length - 2].calc(_this1._storage[_this1._storage.length - 1])) {
					_this1._storage.pop();
				}
			}
			_this1._storage.push(vd);
		} else {
			this._isClosed = cmd & 64;
		}
	}
	,rewind: function(pathId) {
		if(this._status == 0) {
			this._srcVertices.close(this._isClosed != 0);
			aggx_vectorial_PathUtils.shortenPath(this._srcVertices,this._shorten,this._isClosed);
			if(this._srcVertices._storage.length < 3) {
				this._isClosed = 0;
			}
		}
		this._status = 1;
		this._srcVertexIndex = 0;
		this._outVertexIndex = 0;
	}
	,getVertex: function(x,y) {
		var cmd = 2;
		while(cmd != 0) switch(this._status) {
		case 0:
			this.rewind(0);
			this._status = 1;
			break;
		case 1:
			if(this._srcVertices._storage.length < 2 + (this._isClosed != 0 ? 1 : 0)) {
				cmd = 0;
			} else {
				this._status = this._isClosed != 0 ? 4 : 2;
				cmd = 1;
				this._srcVertexIndex = 0;
				this._outVertexIndex = 0;
			}
			break;
		case 2:
			this._stroker.calcCap(this._outVertices,this._srcVertices._storage[0],this._srcVertices._storage[1],this._srcVertices._storage[0].dist);
			this._srcVertexIndex = 1;
			this._prevStatus = 4;
			this._status = 7;
			this._outVertexIndex = 0;
			break;
		case 3:
			this._stroker.calcCap(this._outVertices,this._srcVertices._storage[this._srcVertices._storage.length - 1],this._srcVertices._storage[this._srcVertices._storage.length - 2],this._srcVertices._storage[this._srcVertices._storage.length - 2].dist);
			this._prevStatus = 6;
			this._status = 7;
			this._outVertexIndex = 0;
			break;
		case 4:
			var proceed = true;
			if(this._isClosed != 0) {
				if(this._srcVertexIndex >= this._srcVertices._storage.length) {
					this._prevStatus = 5;
					this._status = 8;
					proceed = false;
				}
			} else if(this._srcVertexIndex >= this._srcVertices._storage.length - 1) {
				this._status = 3;
				proceed = false;
			}
			if(proceed) {
				var _this = this._srcVertices;
				var _this1 = this._srcVertices;
				var _this2 = this._srcVertices;
				this._stroker.calcJoin(this._outVertices,_this._storage[_$UInt_UInt_$Impl_$.toFloat(this._srcVertexIndex + _this._storage.length - 1) % _$UInt_UInt_$Impl_$.toFloat(_this._storage.length) | 0],this._srcVertices._storage[this._srcVertexIndex],_this1._storage[_$UInt_UInt_$Impl_$.toFloat(this._srcVertexIndex + _this1._storage.length + 1) % _$UInt_UInt_$Impl_$.toFloat(_this1._storage.length) | 0],_this2._storage[_$UInt_UInt_$Impl_$.toFloat(this._srcVertexIndex + _this2._storage.length - 1) % _$UInt_UInt_$Impl_$.toFloat(_this2._storage.length) | 0].dist,this._srcVertices._storage[this._srcVertexIndex].dist);
				++this._srcVertexIndex;
				this._prevStatus = this._status;
				this._status = 7;
				this._outVertexIndex = 0;
			}
			break;
		case 5:
			this._status = 6;
			cmd = 1;
			break;
		case 6:
			if(this._srcVertexIndex <= (this._isClosed == 0 ? 1 : 0)) {
				this._status = 9;
				this._prevStatus = 10;
			} else {
				--this._srcVertexIndex;
				var _this3 = this._srcVertices;
				var _this4 = this._srcVertices;
				var _this5 = this._srcVertices;
				this._stroker.calcJoin(this._outVertices,_this3._storage[_$UInt_UInt_$Impl_$.toFloat(this._srcVertexIndex + _this3._storage.length + 1) % _$UInt_UInt_$Impl_$.toFloat(_this3._storage.length) | 0],this._srcVertices._storage[this._srcVertexIndex],_this4._storage[_$UInt_UInt_$Impl_$.toFloat(this._srcVertexIndex + _this4._storage.length - 1) % _$UInt_UInt_$Impl_$.toFloat(_this4._storage.length) | 0],this._srcVertices._storage[this._srcVertexIndex].dist,_this5._storage[_$UInt_UInt_$Impl_$.toFloat(this._srcVertexIndex + _this5._storage.length - 1) % _$UInt_UInt_$Impl_$.toFloat(_this5._storage.length) | 0].dist);
				this._prevStatus = this._status;
				this._status = 7;
				this._outVertexIndex = 0;
			}
			break;
		case 7:
			if(this._outVertexIndex >= this._outVertices.length) {
				this._status = this._prevStatus;
			} else {
				var c = this._outVertices[this._outVertexIndex++];
				x.value = c.x;
				y.value = c.y;
				return cmd;
			}
			break;
		case 8:
			this._status = this._prevStatus;
			return 95;
		case 9:
			this._status = this._prevStatus;
			return 111;
		case 10:
			cmd = 0;
			break;
		}
		return cmd;
	}
	,__class__: aggx_vectorial_generators_VcgenStroke
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if(((o) instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_tls_SecureContext = function() { };
js_node_tls_SecureContext.__name__ = true;
var types_Color4F = function(r,g,b,a) {
	if(a == null) {
		a = 1.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(g == null) {
		g = 0.0;
	}
	if(r == null) {
		r = 0.0;
	}
	this.a = 1.0;
	this.b = 0.0;
	this.g = 0.0;
	this.r = 0.0;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
types_Color4F.__name__ = true;
types_Color4F.prototype = {
	setRGBA: function(r,g,b,a) {
		if(a == null) {
			a = 1.0;
		}
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,set: function(other) {
		this.r = other.r;
		this.g = other.g;
		this.b = other.b;
		this.a = other.a;
	}
	,isEqual: function(other) {
		if(Math.abs(this.a - other.a) < 0.00390625 && Math.abs(this.r - other.r) < 0.00390625 && Math.abs(this.g - other.g) < 0.00390625) {
			return Math.abs(this.b - other.b) < 0.00390625;
		} else {
			return false;
		}
	}
	,isNotEqual: function(other) {
		if(!(Math.abs(this.a - other.a) >= 0.00390625 || Math.abs(this.r - other.r) >= 0.00390625 || Math.abs(this.g - other.g) >= 0.00390625)) {
			return Math.abs(this.b - other.b) >= 0.00390625;
		} else {
			return true;
		}
	}
	,toString: function() {
		return "{" + this.r + ", " + this.g + ", " + this.b + ", " + this.a + "}";
	}
	,__class__: types_Color4F
};
var types_Data = function(sizeInBytes) {
	this.dataView = null;
	this.float64Array = null;
	this.float32Array = null;
	this.uint32Array = null;
	this.int32Array = null;
	this.uint16Array = null;
	this.int16Array = null;
	this.uint8Array = null;
	this.int8Array = null;
	this._allocedLength = 0;
	this._offsetLength = 0;
	this._offset = 0;
	if(sizeInBytes != 0) {
		this._offsetLength = sizeInBytes;
		this._offset = 0;
		this.set_arrayBuffer(new ArrayBuffer(sizeInBytes));
	}
	this._allocedLength = sizeInBytes;
};
types_Data.__name__ = true;
types_Data.prototype = {
	get_allocedLength: function() {
		return this._allocedLength;
	}
	,set_offset: function(value) {
		if(value == null) {
			this._offset = 0;
		} else {
			this._offset = value;
		}
		return this._offset;
	}
	,get_offset: function() {
		return this._offset;
	}
	,set_offsetLength: function(value) {
		this._offsetLength = value;
		return this._offsetLength;
	}
	,get_offsetLength: function() {
		return this._offsetLength;
	}
	,resetOffset: function() {
		this._offset = 0;
		this._offsetLength = this.get_allocedLength();
	}
	,set_arrayBuffer: function(value) {
		this.arrayBuffer = value;
		this._allocedLength = value.byteLength;
		this._offsetLength = this._allocedLength;
		this._offset = 0;
		this.remakeViews();
		return value;
	}
	,remakeViews: function() {
		var length = this.arrayBuffer.byteLength;
		this.int8Array = new Int8Array(this.arrayBuffer);
		this.uint8Array = new Uint8Array(this.arrayBuffer);
		var truncated2Mult = (length - length % 2) / 2 | 0;
		this.int16Array = new Int16Array(this.arrayBuffer,0,truncated2Mult);
		this.uint16Array = new Uint16Array(this.arrayBuffer,0,truncated2Mult);
		var truncated4Mult = (length - length % 4) / 4 | 0;
		this.int32Array = new Int32Array(this.arrayBuffer,0,truncated4Mult);
		this.uint32Array = new Uint32Array(this.arrayBuffer,0,truncated4Mult);
		this.float32Array = new Float32Array(this.arrayBuffer,0,truncated4Mult);
		this.float64Array = new Float64Array(this.arrayBuffer,0,(length - length % 8) / 8 | 0);
		this.dataView = new DataView(this.arrayBuffer);
	}
	,writeData: function(data) {
		var subarrayView = data.uint8Array.subarray(data._offset,data._offset + data._offsetLength);
		this.uint8Array.set(subarrayView,this.get_offset());
	}
	,writeInt: function(value,targetDataType) {
		switch(targetDataType._hx_index) {
		case 0:
			this.writeInt8(value);
			break;
		case 1:
			this.writeUInt8(value);
			break;
		case 2:
			this.writeInt16(value);
			break;
		case 3:
			this.writeUInt16(value);
			break;
		case 4:
			this.writeInt32(value);
			break;
		case 5:
			this.writeUInt32(value);
			break;
		case 6:
			this.writeFloat32(value);
			break;
		case 7:
			this.writeFloat64(value);
			break;
		}
	}
	,writeIntArray: function(array,dataType) {
		var dataSize = types_DataTypeUtils.dataTypeByteSize(dataType);
		var prevOffset = this._offset;
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			this.writeInt(array[_g++],dataType);
			this._offset += dataSize;
		}
		this._offset = prevOffset;
	}
	,writeInt8: function(value) {
		this.int8Array[this._offset] = value;
	}
	,writeUInt8: function(value) {
		this.uint8Array[this._offset] = value;
	}
	,writeInt16: function(value) {
		if(this._offset % 2 == 0) {
			this.int16Array[this._offset / 2 | 0] = value;
		} else {
			this.dataView.setInt16(this._offset,value,true);
		}
	}
	,writeUInt16: function(value) {
		if(this._offset % 2 == 0) {
			this.uint16Array[this._offset / 2 | 0] = value;
		} else {
			this.dataView.setUint16(this._offset,value,true);
		}
	}
	,writeInt32: function(value) {
		if(this._offset % 4 == 0) {
			this.int32Array[this.get_offset() / 4 | 0] = value;
		} else {
			this.dataView.setInt32(this._offset,value,true);
		}
	}
	,writeUInt32: function(value) {
		if(this._offset % 4 == 0) {
			this.uint32Array[this._offset / 4 | 0] = value;
		} else {
			this.dataView.setUint32(this._offset,value,true);
		}
	}
	,readInt: function(targetDataType) {
		switch(targetDataType._hx_index) {
		case 0:
			return this.readInt8();
		case 1:
			return this.readUInt8();
		case 2:
			return this.readInt16();
		case 3:
			return this.readUInt16();
		case 4:
			return this.readInt32();
		case 5:
			return this.readUInt32();
		case 6:
			return this.readFloat32() | 0;
		case 7:
			return this.readFloat64() | 0;
		}
	}
	,readIntArray: function(count,dataType) {
		var dataSize = types_DataTypeUtils.dataTypeByteSize(dataType);
		var prevOffset = this.get_offset();
		var currentOffset = prevOffset;
		var array = [];
		var _g = 0;
		while(_g < count) {
			++_g;
			this.set_offset(currentOffset);
			array.push(this.readInt(dataType));
			currentOffset += dataSize;
		}
		this.set_offset(prevOffset);
		return array;
	}
	,readInt8: function() {
		return this.int8Array[this._offset];
	}
	,readUInt8: function() {
		return this.uint8Array[this._offset];
	}
	,readInt16: function() {
		if(this._offset % 2 == 0) {
			return this.int16Array[this._offset / 2 | 0];
		} else {
			return this.dataView.getInt16(this._offset,true);
		}
	}
	,readUInt16: function() {
		if(this._offset % 2 == 0) {
			return this.uint16Array[this._offset / 2 | 0];
		} else {
			return this.dataView.getUint16(this._offset,true);
		}
	}
	,readInt32: function() {
		if(this._offset % 4 == 0) {
			return this.int32Array[this._offset / 4 | 0];
		} else {
			return this.dataView.getInt32(this._offset,true);
		}
	}
	,readUInt32: function() {
		if(this._offset % 4 == 0) {
			return this.uint32Array[this._offset / 4 | 0];
		} else {
			return this.dataView.getUint32(this._offset,true);
		}
	}
	,writeFloat: function(value,targetDataType) {
		switch(targetDataType._hx_index) {
		case 0:
			this.writeInt8(value | 0);
			break;
		case 1:
			this.writeUInt8(value | 0);
			break;
		case 2:
			this.writeInt16(value | 0);
			break;
		case 3:
			this.writeUInt16(value | 0);
			break;
		case 4:
			this.writeInt32(value | 0);
			break;
		case 5:
			this.writeUInt32(value | 0);
			break;
		case 6:
			this.writeFloat32(value);
			break;
		case 7:
			this.writeFloat64(value);
			break;
		}
	}
	,writeFloatArray: function(array,dataType) {
		var dataSize = types_DataTypeUtils.dataTypeByteSize(dataType);
		var prevOffset = this._offset;
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			this.writeFloat(array[_g++],dataType);
			this._offset += dataSize;
		}
		this._offset = prevOffset;
	}
	,writeFloat32: function(value) {
		if(this._offset % 4 == 0) {
			this.float32Array[this._offset / 4 | 0] = value;
		} else {
			this.dataView.setFloat32(this._offset,value,true);
		}
	}
	,writeFloat64: function(value) {
		if(this._offset % 8 == 0) {
			this.float64Array[this._offset / 8 | 0] = value;
		} else {
			this.dataView.setFloat64(this._offset,value,true);
		}
	}
	,readFloat: function(targetDataType) {
		switch(targetDataType._hx_index) {
		case 0:
			return this.readInt8();
		case 1:
			return this.readUInt8();
		case 2:
			return this.readInt16();
		case 3:
			return this.readUInt16();
		case 4:
			return this.readInt32();
		case 5:
			return this.readUInt32();
		case 6:
			return this.readFloat32();
		case 7:
			return this.readFloat64();
		}
	}
	,readFloatArray: function(count,dataType) {
		var dataSize = types_DataTypeUtils.dataTypeByteSize(dataType);
		var prevOffset = this.get_offset();
		var currentOffset = prevOffset;
		var array = [];
		var _g = 0;
		while(_g < count) {
			++_g;
			this.set_offset(currentOffset);
			array.push(this.readFloat(dataType));
			currentOffset += dataSize;
		}
		this.set_offset(prevOffset);
		return array;
	}
	,readFloat32: function() {
		if(this._offset % 4 == 0) {
			return this.float32Array[this._offset / 4 | 0];
		} else {
			return this.dataView.getFloat32(this._offset,true);
		}
	}
	,readFloat64: function() {
		if(this._offset % 8 == 0) {
			return this.float64Array[this._offset / 8 | 0];
		} else {
			return this.dataView.getFloat64(this._offset,true);
		}
	}
	,toString: function(dataType) {
		if(dataType == null) {
			dataType = types_DataType.DataTypeInt32;
		}
		var output = "";
		output = "[";
		var view = null;
		switch(dataType._hx_index) {
		case 0:
			view = this.int8Array;
			break;
		case 1:
			view = this.uint8Array;
			break;
		case 2:
			view = this.uint16Array;
			break;
		case 3:
			view = this.uint16Array;
			break;
		case 4:
			view = this.int32Array;
			break;
		case 5:
			view = this.uint32Array;
			break;
		case 6:
			view = this.float32Array;
			break;
		case 7:
			view = this.float64Array;
			break;
		}
		var count = this.arrayBuffer.byteLength / types_DataTypeUtils.dataTypeByteSize(dataType) | 0;
		if(count > 0) {
			output = "[" + view[0];
		}
		var _g = 1;
		while(_g < count) {
			output += ", ";
			output += view[_g++];
		}
		output += "]";
		return output;
	}
	,resize: function(newSize) {
		var newBuffer = new ArrayBuffer(newSize);
		var prevBuffer = this.arrayBuffer;
		var prevBufferView = this.uint8Array;
		var prevOffset = this._offset;
		var prevOffsetLength = this._offsetLength;
		this.set_arrayBuffer(newBuffer);
		if(prevBuffer != null) {
			if(newSize < prevBuffer.byteLength) {
				this.uint8Array.set(prevBufferView.subarray(0,newSize));
			} else {
				this.uint8Array.set(prevBufferView);
			}
		}
		this._allocedLength = newSize;
		this._offsetLength = prevOffsetLength;
		this._offset = prevOffset;
	}
	,trim: function() {
		if(this.arrayBuffer == null) {
			return;
		}
		var newBuffer = new ArrayBuffer(this.get_offsetLength());
		var prevBufferView = this.uint8Array;
		var prevOffset = this.get_offset();
		var prevOffsetLength = this.get_offsetLength();
		this.set_arrayBuffer(newBuffer);
		this.uint8Array.set(prevBufferView.subarray(prevOffset,prevOffset + prevOffsetLength));
	}
	,__class__: types_Data
};
var types_DataStringTools = function() { };
types_DataStringTools.__name__ = true;
types_DataStringTools.readString = function(data) {
	return types_DataStringTools.decodeArrayBuffer(data.arrayBuffer);
};
types_DataStringTools.writeString = function(data,string) {
	data.uint8Array.set(types_DataStringTools.encodeToUint8Array(string),data.get_offset());
};
types_DataStringTools.sizeInBytes = function(string) {
	var byteLen = 0;
	var _g = 0;
	var _g1 = string.length;
	while(_g < _g1) {
		var c = HxOverrides.cca(string,_g++);
		byteLen += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : c < 2097152 ? 4 : c < 67108864 ? 5 : c < -2147483648 ? 6 : 0;
	}
	return byteLen;
};
types_DataStringTools.decodeArrayBuffer = function(buffer) {
	var bytes = new Uint8Array(buffer);
	var pos = 0;
	var len = bytes.length;
	console.log("src/types/DataStringTools.js.hx:55:",len);
	var out = [];
	while(pos < len) {
		var byte1 = bytes[pos++];
		if(byte1 == 0) {
			break;
		}
		if((byte1 & 128) == 0) {
			out.push(byte1);
		} else if((byte1 & 224) == 192) {
			out.push((byte1 & 31) << 6 | bytes[pos++] & 63);
		} else if((byte1 & 240) == 224) {
			out.push((byte1 & 31) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63);
		} else if((byte1 & 248) == 240) {
			var codepoint = (byte1 & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;
			if(codepoint > 65535) {
				codepoint -= 65536;
				out.push(codepoint >>> 10 & 1023 | 55296);
				codepoint = (56320 | codepoint) & 1023;
			}
			out.push(codepoint);
		}
	}
	var result = "";
	var _g = 0;
	var _g1 = out.length;
	while(_g < _g1) {
		var i = _g++;
		result += String.fromCodePoint(out[i]);
	}
	return result;
};
types_DataStringTools.encodeToUint8Array = function(string) {
	var pos = 0;
	var len = string.length;
	var at = 0;
	var tlen = Math.max(32,len + (len >> 1) + 7);
	var target = new Uint8Array(tlen >> 3 << 3);
	while(pos < len) {
		var value = HxOverrides.cca(string,pos++);
		if(value >= 55296 && value <= 56319) {
			if(pos < len) {
				var extra = HxOverrides.cca(string,pos);
				if((extra & 64512) == 56320) {
					++pos;
					value = ((value & 1023) << 10) + (extra & 1023) + 65536;
				}
			}
			if(value >= 55296 && value <= 56319) {
				continue;
			}
		}
		if(at + 4 > target.length) {
			tlen += 8;
			tlen *= 1.0 + pos / string.length * 2;
			tlen = tlen >> 3 << 3;
			var update = new Uint8Array(tlen);
			update.set(target);
			target = update;
		}
		if((value & -128) == 0) {
			target[at++] = value;
			continue;
		} else if((value & -2048) == 0) {
			target[at++] = value >> 6 & 31 | 192;
		} else if((value & -65536) == 0) {
			target[at++] = value >> 12 & 15 | 224;
			target[at++] = value >> 6 & 63 | 128;
		} else if((value & -2097152) == 0) {
			target[at++] = value >> 18 & 7 | 240;
			target[at++] = value >> 12 & 63 | 128;
			target[at++] = value >> 6 & 63 | 128;
		} else {
			continue;
		}
		target[at++] = value & 63 | 128;
	}
	return target.slice(0,at);
};
var types_DataType = $hxEnums["types.DataType"] = { __ename__ : true, __constructs__ : ["DataTypeInt8","DataTypeUInt8","DataTypeInt16","DataTypeUInt16","DataTypeInt32","DataTypeUInt32","DataTypeFloat32","DataTypeFloat64"]
	,DataTypeInt8: {_hx_index:0,__enum__:"types.DataType",toString:$estr}
	,DataTypeUInt8: {_hx_index:1,__enum__:"types.DataType",toString:$estr}
	,DataTypeInt16: {_hx_index:2,__enum__:"types.DataType",toString:$estr}
	,DataTypeUInt16: {_hx_index:3,__enum__:"types.DataType",toString:$estr}
	,DataTypeInt32: {_hx_index:4,__enum__:"types.DataType",toString:$estr}
	,DataTypeUInt32: {_hx_index:5,__enum__:"types.DataType",toString:$estr}
	,DataTypeFloat32: {_hx_index:6,__enum__:"types.DataType",toString:$estr}
	,DataTypeFloat64: {_hx_index:7,__enum__:"types.DataType",toString:$estr}
};
var types_DataTypeUtils = function() { };
types_DataTypeUtils.__name__ = true;
types_DataTypeUtils.dataTypeByteSize = function(dataType) {
	switch(dataType._hx_index) {
	case 0:
		return 1;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 2;
	case 4:
		return 4;
	case 5:
		return 4;
	case 6:
		return 4;
	case 7:
		return 8;
	}
};
var types_Vector2 = function(_data,_dataOffset) {
	if(_dataOffset == null) {
		_dataOffset = 0;
	}
	if(_data == null) {
		this.data = new types_Data(16);
	} else {
		this.data = _data;
	}
	this.dataOffset = _dataOffset;
};
types_Vector2.__name__ = true;
types_Vector2.$length = function(vector) {
	return Math.sqrt(types_Vector2.lengthSquared(vector));
};
types_Vector2.lengthSquared = function(vector) {
	vector.data.set_offset(vector.dataOffset);
	var tmp = vector.data.readFloat32();
	vector.data.set_offset(vector.dataOffset);
	var tmp1 = tmp * vector.data.readFloat32();
	vector.data.set_offset(vector.dataOffset + 4);
	var tmp2 = vector.data.readFloat32();
	vector.data.set_offset(vector.dataOffset + 4);
	return tmp1 + tmp2 * vector.data.readFloat32();
};
types_Vector2.dotProduct = function(left,right) {
	left.data.set_offset(left.dataOffset);
	var tmp = left.data.readFloat32();
	right.data.set_offset(right.dataOffset);
	var tmp1 = tmp * right.data.readFloat32();
	left.data.set_offset(left.dataOffset + 4);
	var tmp2 = left.data.readFloat32();
	right.data.set_offset(right.dataOffset + 4);
	return tmp1 + tmp2 * right.data.readFloat32();
};
types_Vector2.distance = function(start,end) {
	types_Vector2.distanceVector2.set(end);
	types_Vector2.distanceVector2.subtract(start);
	return types_Vector2.$length(types_Vector2.distanceVector2);
};
types_Vector2.prototype = {
	get_x: function() {
		this.data.set_offset(this.dataOffset);
		return this.data.readFloat32();
	}
	,set_x: function(x) {
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x);
		return x;
	}
	,get_y: function() {
		this.data.set_offset(this.dataOffset + 4);
		return this.data.readFloat32();
	}
	,set_y: function(y) {
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y);
		return y;
	}
	,get_s: function() {
		this.data.set_offset(this.dataOffset);
		return this.data.readFloat32();
	}
	,set_s: function(s) {
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(s);
		return s;
	}
	,get_t: function() {
		this.data.set_offset(this.dataOffset + 4);
		return this.data.readFloat32();
	}
	,set_t: function(t) {
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(t);
		return t;
	}
	,setXY: function(_x,_y) {
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(_x);
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(_y);
	}
	,setST: function(_s,_t) {
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(_s);
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(_t);
	}
	,set: function(other) {
		this.data.set_offset(this.dataOffset);
		other.data.set_offset(other.dataOffset);
		other.data.set_offsetLength(8);
		this.data.writeData(other.data);
	}
	,get: function(index) {
		this.data.set_offset(this.dataOffset + index * 4);
		return this.data.readFloat32();
	}
	,negate: function() {
		this.data.set_offset(this.dataOffset);
		var x = -this.data.readFloat32();
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x);
		this.data.set_offset(this.dataOffset + 4);
		var y = -this.data.readFloat32();
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y);
	}
	,add: function(right) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32();
		right.data.set_offset(right.dataOffset);
		var x1 = x + right.data.readFloat32();
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x1);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32();
		right.data.set_offset(right.dataOffset + 4);
		var y1 = y + right.data.readFloat32();
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y1);
	}
	,subtract: function(right) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32();
		right.data.set_offset(right.dataOffset);
		var x1 = x - right.data.readFloat32();
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x1);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32();
		right.data.set_offset(right.dataOffset + 4);
		var y1 = y - right.data.readFloat32();
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y1);
	}
	,multiply: function(right) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32();
		right.data.set_offset(right.dataOffset);
		var x1 = x * right.data.readFloat32();
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x1);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32();
		right.data.set_offset(right.dataOffset + 4);
		var y1 = y * right.data.readFloat32();
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y1);
	}
	,divide: function(right) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32();
		right.data.set_offset(right.dataOffset);
		var x1 = x / right.data.readFloat32();
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x1);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32();
		right.data.set_offset(right.dataOffset + 4);
		var y1 = y / right.data.readFloat32();
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y1);
	}
	,addScalar: function(value) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32() + value;
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32() + value;
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y);
	}
	,subtractScalar: function(value) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32() - value;
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32() - value;
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y);
	}
	,multiplyScalar: function(value) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32() * value;
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32() * value;
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y);
	}
	,divideScalar: function(value) {
		this.data.set_offset(this.dataOffset);
		var x = this.data.readFloat32() / value;
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x);
		this.data.set_offset(this.dataOffset + 4);
		var y = this.data.readFloat32() / value;
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y);
	}
	,normalize: function() {
		this.multiplyScalar(1.0 / types_Vector2.$length(this));
	}
	,lerp: function(start,end,t) {
		start.data.set_offset(start.dataOffset);
		var x = start.data.readFloat32();
		end.data.set_offset(end.dataOffset);
		var x1 = end.data.readFloat32();
		start.data.set_offset(start.dataOffset);
		var x2 = x + (x1 - start.data.readFloat32()) * t;
		this.data.set_offset(this.dataOffset);
		this.data.writeFloat32(x2);
		start.data.set_offset(start.dataOffset + 4);
		var y = start.data.readFloat32();
		end.data.set_offset(end.dataOffset + 4);
		var y1 = end.data.readFloat32();
		start.data.set_offset(start.dataOffset + 4);
		var y2 = y + (y1 - start.data.readFloat32()) * t;
		this.data.set_offset(this.dataOffset + 4);
		this.data.writeFloat32(y2);
	}
	,toString: function() {
		var output = "";
		output = "[";
		this.data.set_offset(this.dataOffset);
		output = "[" + this.data.readFloat32();
		output += ", ";
		var _g = this.data;
		_g.set_offset(_g.get_offset() + 4);
		output += this.data.readFloat32();
		output += "]";
		return output;
	}
	,__class__: types_Vector2
};
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "Pacifico.ttf", data : ""}];
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
aggx_color_GammaLookupTable.GAMMA_SHIFT = 8;
aggx_color_GammaLookupTable.GAMMA_SIZE = 256;
aggx_color_GammaLookupTable.GAMMA_MASK = 255;
aggx_color_GammaLookupTable.HI_RES_SHIFT = 8;
aggx_color_GammaLookupTable.HI_RES_SIZE = 256;
aggx_color_GammaLookupTable.HI_RES_MASK = 255;
aggx_color_RgbaColor.BASE_SHIFT = 8;
aggx_color_RgbaColor.BASE_SCALE = 256;
aggx_color_RgbaColor.BASE_MASK = 256 - 1;
aggx_core_geometry_Vector2D.distanceVector2 = new aggx_core_geometry_Vector2D();
aggx_core_math_Calc.VERTEX_DIST_EPSILON = 1.0e-14;
aggx_core_math_Calc.INTERSECTION_EPSILON = 1.0e-30;
aggx_core_math_Calc.PI = 3.14159265358979323846;
aggx_core_math_Calc.PI2 = 6.28318530717958647692;
aggx_core_math_Calc.PI180 = 0.01745329251994329576;
aggx_core_memory_Ref.intPool = [];
aggx_core_memory_Ref.floatPool = [];
aggx_core_memory_RgbaReaderWriter.R = 0;
aggx_core_memory_RgbaReaderWriter.G = 1;
aggx_core_memory_RgbaReaderWriter.B = 2;
aggx_core_memory_RgbaReaderWriter.A = 3;
aggx_core_memory_RgbaReaderWriter.RS = 0;
aggx_core_memory_RgbaReaderWriter.GS = 8;
aggx_core_memory_RgbaReaderWriter.BS = 16;
aggx_core_memory_RgbaReaderWriter.AS = 24;
aggx_core_utils_Bits.BIT_01 = 1;
aggx_core_utils_Bits.BIT_02 = 2;
aggx_core_utils_Bits.BIT_03 = 4;
aggx_core_utils_Bits.BIT_04 = 8;
aggx_core_utils_Bits.BIT_05 = 16;
aggx_core_utils_Bits.BIT_06 = 32;
aggx_core_utils_Bits.BIT_07 = 64;
aggx_core_utils_Bits.BIT_08 = 128;
aggx_core_utils_Bits.BIT_09 = 256;
aggx_core_utils_Bits.BIT_10 = 512;
aggx_core_utils_Bits.BIT_11 = 1024;
aggx_core_utils_Bits.BIT_12 = 2048;
aggx_core_utils_Bits.BIT_13 = 4096;
aggx_core_utils_Bits.BIT_14 = 8192;
aggx_core_utils_Bits.BIT_15 = 16384;
aggx_core_utils_Bits.BIT_16 = 32768;
aggx_core_utils_Bits.BIT_17 = 65536;
aggx_core_utils_Bits.BIT_18 = 131072;
aggx_core_utils_Bits.BIT_19 = 262144;
aggx_core_utils_Bits.BIT_20 = 524288;
aggx_core_utils_Bits.BIT_21 = 1048576;
aggx_core_utils_Bits.BIT_22 = 2097152;
aggx_core_utils_Bits.BIT_23 = 4194304;
aggx_core_utils_Bits.BIT_24 = 8388608;
aggx_core_utils_Bits.BIT_25 = 16777216;
aggx_core_utils_Bits.BIT_26 = 33554432;
aggx_core_utils_Bits.BIT_27 = 67108864;
aggx_core_utils_Bits.BIT_28 = 134217728;
aggx_core_utils_Bits.BIT_29 = 268435456;
aggx_core_utils_Bits.BIT_30 = 536870912;
aggx_core_utils_Bits.BIT_31 = 1073741824;
aggx_core_utils_Bits.BIT_32 = -2147483648;
aggx_core_utils_Bits.ALL = -1;
aggx_core_utils_Bits.INT_BITS = 32;
aggx_rasterizer_CoverScale.COVER_SHIFT = 8;
aggx_rasterizer_CoverScale.COVER_SIZE = 256;
aggx_rasterizer_CoverScale.COVER_MASK = 256 - 1;
aggx_rasterizer_CoverScale.COVER_NONE = 0;
aggx_rasterizer_CoverScale.COVER_FULL = 256 - 1;
aggx_rasterizer_FillingRule.FILL_NON_ZERO = 0;
aggx_rasterizer_FillingRule.FILL_EVEN_ODD = 1;
aggx_rasterizer_LiangBarskyClipper.CLIPPING_FLAGS_X1_CLIPPED = 4;
aggx_rasterizer_LiangBarskyClipper.CLIPPING_FLAGS_X2_CLIPPED = 1;
aggx_rasterizer_LiangBarskyClipper.CLIPPING_FLAGS_Y1_CLIPPED = 8;
aggx_rasterizer_LiangBarskyClipper.CLIPPING_FLAGS_Y2_CLIPPED = 2;
aggx_rasterizer_LiangBarskyClipper.CLIPPING_FLAGS_X_CLIPPED = 5;
aggx_rasterizer_LiangBarskyClipper.CLIPPING_FLAGS_Y_CLIPPED = 10;
aggx_rasterizer_PixelCell.PIXEL_CELL_X = 0;
aggx_rasterizer_PixelCell.PIXEL_CELL_Y = 4;
aggx_rasterizer_PixelCell.PIXEL_CELL_AREA = 8;
aggx_rasterizer_PixelCell.PIXEL_CELL_COVER = 12;
aggx_rasterizer_PixelCell.SIZE = 16;
aggx_rasterizer_PixelCellRasterizer.POLY_SUBPIXEL_SHIFT = 8;
aggx_rasterizer_PixelCellRasterizer.POLY_SUBPIXEL_SCALE = 256;
aggx_rasterizer_PixelCellRasterizer.POLY_SUBPIXEL_MASK = 255;
aggx_rasterizer_PixelCellRasterizer.PIXEL_SIZE = 16;
aggx_rasterizer_PolySubpixelScale.POLY_SUBPIXEL_SHIFT = 8;
aggx_rasterizer_PolySubpixelScale.POLY_SUBPIXEL_SCALE = 256;
aggx_rasterizer_PolySubpixelScale.POLY_SUBPIXEL_MASK = 255;
aggx_rasterizer_ScanlineRasterizer.AA_SHIFT = 8;
aggx_rasterizer_ScanlineRasterizer.AA_SCALE = 256;
aggx_rasterizer_ScanlineRasterizer.AA_MASK = 255;
aggx_rasterizer_ScanlineRasterizer.AA_SCALE2 = 512;
aggx_rasterizer_ScanlineRasterizer.AA_MASK2 = 511;
aggx_rasterizer_ScanlineRasterizer.STATUS_INITIAL = 0;
aggx_rasterizer_ScanlineRasterizer.STATUS_MOVE_TO = 1;
aggx_rasterizer_ScanlineRasterizer.STATUS_LINE_TO = 2;
aggx_rasterizer_ScanlineRasterizer.STATUS_CLOSED = 3;
aggx_rfpx_ContourSegment.MOVE = 0;
aggx_rfpx_ContourSegment.LINE = 1;
aggx_rfpx_ContourSegment.CURVE = 2;
aggx_rfpx_GlyphPoint.FT_CURVE_TAG_ON = 1;
aggx_rfpx_GlyphPoint.FT_CURVE_TAG_CONIC = 0;
aggx_rfpx_GlyphPoint.FT_CURVE_TAG_CUBIC = 2;
aggx_rfpx_data_CmapFormat0.UPPER_ARABIC = "\x007e\x0000\x00c4\x00a0\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x06ba\x00ab\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed 26\x00ee\x00ef\x00f1\x00f3\x00bb\x00f4\x00f6\x00f7" + "\x00fa\x00f9\x00fb\x00fc\x0020\x0021\"\x0023\x0024\x066a" + "\x0026\x0027\x0028\x0029\x002a\x002b\x060c\x002d\x002e\x002f" + "\x0660\x0661\x0662\x0663\x0664\x0665\x0666\x0667\x0668\x0669" + "\x003a\x061b\x003c\x003d\x003e\x061f'4a\x0621\x0622\x0623" + "\x0624\x0625\x0626\x0627\x0628\x0629\x062a\x062b\x062c\x062d" + "\x062e\x062f\x0630\x0631\x0632\x0633\x0634\x0635\x0636\x0637" + "\x0638\x0639\x063a\x005b\\\x005d\x005e\x005f\x0640\x0641" + "\x0642\x0643\x0644\x0645\x0646\x0647\x0648\x0649\x064a\x064b" + "\x064c\x064d\x064e\x064f\x0650\x0651\x0652\x067e\x0679\x0686" + "\x06d5\x06a4\x06af\x0688\x0691\x007b\x007c\x007d\x0698\x06d2";
aggx_rfpx_data_CmapFormat0.UPPER_EAST_EUROPEAN_ROMAN = "\x007e\x0000\x00c4\x0100\x0101\x00c9\x0104\x00d6\x00dc\x00e1" + "\x0105\x010c\x00e4\x010d\x0106\x0107\x00e9\x0179\x017a\x010e" + "\x00ed\x010f\x0112\x0113\x0116\x00f3\x0117\x00f4\x00f6\x00f5" + "\x00fa\x011a\x011b\x00fc 20\x00b0\x0118\x00a3\x00a7 22" + "\x00b6\x00df\x00ae\x00a9!22\x0119\x00a8\"60\x0123\x012e" + "\x012f\x012a\"64\"65\x012b\x0136\"02\"11\x0142\x013b" + "\x013c\x013d\x013e\x0139\x013a\x0145\x0146\x0143\x00ac\"1a" + "\x0144\x0147\"06\x00ab\x00bb 26\x00a0\x0148\x0150\x00d5" + "\x0151\x014c 13 14 1c 1d 18 19\x00f7%ca" + "\x014d\x0154\x0155\x0158 39 3a\x0159\x0156\x0157\x0160" + " 1a 1e\x0161\x015a\x015b\x00c1\x0164\x0165\x00cd\x017d" + "\x017e\x016a\x00d3\x00d4\x016b\x016e\x00da\x016f\x0170\x0171" + "\x0172\x0173\x00dd\x00fd\x0137\x017b\x0141\x017c\x0122\x02c7";
aggx_rfpx_data_CmapFormat0.UPPER_CROATIAN = "\x007e\x0000\x00c4\x00c5\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x00e3\x00e5\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed\x00ec\x00ee\x00ef\x00f1\x00f3\x00f2\x00f4\x00f6\x00f5" + "\x00fa\x00f9\x00fb\x00fc 20\x00b0\x00a2\x00a3\x00a7 22" + "\x00b6\x00df\x00ae\x0160!22\x00b4\x00a8\"60\x017d\x00d8" + "\"1e\x00b1\"64\"65\"06\x00b5\"02\"11\"0f\x0161" + "\"2b\x00aa\x00ba\x03a9\x017e\x00f8\x00bf\x00a1\x00ac\"1a" + "\x0192\"48\x0106\x00ab\x010c 26\x00a0\x00c0\x00c3\x00d5" + "\x0152\x0153\x0110 14 1c 1d 18 19\x00f7%ca" + "øff\x00a9 44 ac 39 3a\x00c6\x00bb 13\x00b7" + " 1a 1e 30\x00c2\x0107\x00c1\x010d\x00c8\x00cd\x00ce" + "\x00cf\x00cc\x00d3\x00d4\x0111\x00d2\x00da\x00db\x00d9\x0131" + "\x02c6\x02dc\x00af\x03c0\x00cb\x02da\x00b8\x00ca\x00e6\x02c7";
aggx_rfpx_data_CmapFormat0.UPPER_CYRILLIC = "\x007e\x0000\x0410\x0411\x0412\x0413\x0414\x0415\x0416\x0417" + "\x0418\x0419\x041a\x041b\x041c\x041d\x041e\x041f\x0420\x0421" + "\x0422\x0423\x0424\x0425\x0426\x0427\x0428\x0429\x042a\x042b" + "\x042c\x042d\x042e\x042f 20\x00b0\x0490\x00a3\x00a7 22" + "\x00b6\x0406\x00ae\x00a9!22\x0402\x0452\"60\x0403\x0453" + "\"1e\x00b1\"64\"65\x0456\x00b5\x0491\x0408\x0404\x0454" + "\x0407\x0457\x0409\x0459\x040a\x045a\x0458\x0405\x00ac\"1a" + "\x0192\"48\"06\x00ab\x00bb 26\x00a0\x040b\x045b\x040c" + "\x045c\x0455 13 14 1c 1d 18 19\x00f7 1e" + "\x040e\x045e\x040f\x045f!16\x0401\x0451\x044f\x0430\x0431" + "\x0432\x0433\x0434\x0435\x0436\x0437\x0438\x0439\x043a\x043b" + "\x043c\x043d\x043e\x043f\x0440\x0441\x0442\x0443\x0444\x0445" + "\x0446\x0447\x0448\x0449\x044a\x044b\x044c\x044d\x044e ac";
aggx_rfpx_data_CmapFormat0.UPPER_FARSI = "\x007e\x0000\x00c4\x00a0\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x06ba\x00ab\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed 26\x00ee\x00ef\x00f1\x00f3\x00bb\x00f4\x00f6\x00f7" + "\x00fa\x00f9\x00fb\x00fc\x0020\x0021\"\x0023\x0024\x066a" + "\x0026\x0027\x0028\x0029\x002a\x002b\x060c\x002d\x002e\x002f" + "\x06f0\x06f1\x06f2\x06f3\x06f4\x06f5\x06f6\x06f7\x06f8\x06f9" + "\x003a\x061b\x003c\x003d\x003e\x061f'4a\x0621\x0622\x0623" + "\x0624\x0625\x0626\x0627\x0628\x0629\x062a\x062b\x062c\x062d" + "\x062e\x062f\x0630\x0631\x0632\x0633\x0634\x0635\x0636\x0637" + "\x0638\x0639\x063a\x005b\\\x005d\x005e\x005f\x0640\x0641" + "\x0642\x0643\x0644\x0645\x0646\x0647\x0648\x0649\x064a\x064b" + "\x064c\x064d\x064e\x064f\x0650\x0651\x0652\x067e\x0679\x0686" + "\x06d5\x06a4\x06af\x0688\x0691\x007b\x007c\x007d\x0698\x06d2";
aggx_rfpx_data_CmapFormat0.UPPER_GREEK = "\x007e\x0000\x00c4\x00b9\x00b2\x00c9\x00b3\x00d6\x00dc\x0385" + "\x00e0\x00e2\x00e4\x0384\x00a8\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00a3!22\x00ee\x00ef 22\x00bd 30\x00f4\x00f6\x00a6" + " ac\x00f9\x00fb\x00fc 20\x0393\x0394\x0398\x039b\x039e" + "\x03a0\x00df\x00ae\x00a9\x03a3\x03aa\x00a7\"60\x00b0\x00b7" + "\x0391\x00b1\"64\"65\x00a5\x0392\x0395\x0396\x0397\x0399" + "\x039a\x039c\x03a6\x03ab\x03a8\x03a9\x03ac\x039d\x00ac\x039f" + "\x03a1\"48\x03a4\x00ab\x00bb 26\x00a0\x03a5\x03a7\x0386" + "\x0388\x0153 13 15 1c 1d 18 19\x00f7\x0389" + "\x038a\x038c\x038e\x03ad\x03ae\x03af\x03cc\x038f\x03cd\x03b1" + "\x03b2\x03c8\x03b4\x03b5\x03c6\x03b3\x03b7\x03b9\x03be\x03ba" + "\x03bb\x03bc\x03bd\x03bf\x03c0\x03ce\x03c1\x03c3\x03c4\x03b8" + "\x03c9\x03c2\x03c7\x03c5\x03b6\x03ca\x03cb\x0390\x03b0\x00ad";
aggx_rfpx_data_CmapFormat0.UPPER_HEBREW = "\x007e\x0000\x00c4\x0000\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x00e3\x00e5\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed\x00ec\x00ee\x00ef\x00f1\x00f3\x00f2\x00f4\x00f6\x00f5" + "\x00fa\x00f9\x00fb\x00fc\x0020\x0021\"\x0023\x0024\x0025" + " aa\x0027\x0029\x0028\x002a\x002b\x002c\x002d\x002e\x002f" + "\x0030\x0031\x0032\x0033\x0034\x0035\x0036\x0037\x0038\x0039" + "\x003a\x003b\x003c\x003d\x003e\x003f\x0000 1eø9bø9c" + "ø9dø9e\x05bcû4bû35 26\x00a0\x05b8\x05b7\x05b5" + "\x05b6\x05b4 13 14 1c 1d 18 19û2aû2b" + "\x05bf\x05b0\x05b2\x05b1\x05bb\x05b9\x0000\x05b3\x05d0\x05d1" + "\x05d2\x05d3\x05d4\x05d5\x05d6\x05d7\x05d8\x05d9\x05da\x05db" + "\x05dc\x05dd\x05de\x05df\x05e0\x05e1\x05e2\x05e3\x05e4\x05e5" + "\x05e6\x05e7\x05e8\x05e9\x05ea\x007d\x005d\x007b\x005b\x007c";
aggx_rfpx_data_CmapFormat0.UPPER_ICELANDIC = "\x007e\x0000\x00c4\x00c5\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x00e3\x00e5\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed\x00ec\x00ee\x00ef\x00f1\x00f3\x00f2\x00f4\x00f6\x00f5" + "\x00fa\x00f9\x00fb\x00fc\x00dd\x00b0\x00a2\x00a3\x00a7 22" + "\x00b6\x00df\x00ae\x00a9!22\x00b4\x00a8\"60\x00c6\x00d8" + "\"1e\x00b1\"64\"65\x00a5\x00b5\"02\"11\"0f\x03c0" + "\"2b\x00aa\x00ba\x03a9\x00e6\x00f8\x00bf\x00a1\x00ac\"1a" + "\x0192\"48\"06\x00ab\x00bb 26\x00a0\x00c0\x00c3\x00d5" + "\x0152\x0153 13 14 1c 1d 18 19\x00f7%ca" + "\x00ff\x0178 44 ac\x00d0\x00f0\x00de\x00fe\x00fd\x00b7" + " 1a 1e 30\x00c2\x00ca\x00c1\x00cb\x00c8\x00cd\x00ce" + "\x00cf\x00cc\x00d3\x00d4øff\x00d2\x00da\x00db\x00d9\x0131" + "\x02c6\x02dc\x00af\x02d8\x02d9\x02da\x00b8\x02dd\x02db\x02c7";
aggx_rfpx_data_CmapFormat0.UPPER_ROMAN = "\x007e\x0000\x00c4\x00c5\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x00e3\x00e5\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed\x00ec\x00ee\x00ef\x00f1\x00f3\x00f2\x00f4\x00f6\x00f5" + "\x00fa\x00f9\x00fb\x00fc 20\x00b0\x00a2\x00a3\x00a7 22" + "\x00b6\x00df\x00ae\x00a9!22\x00b4\x00a8\"60\x00c6\x00d8" + "\"1e\x00b1\"64\"65\x00a5\x00b5\"02\"11\"0f\x03c0" + "\"2b\x00aa\x00ba\x03a9\x00e6\x00f8\x00bf\x00a1\x00ac\"1a" + "\x0192\"48\"06\x00ab\x00bb 26\x00a0\x00c0\x00c3\x00d5" + "\x0152\x0153 13 14 1c 1d 18 19\x00f7%ca" + "\x00ff\x0178 44 ac 39 3aû01û02 21\x00b7" + " 1a 1e 30\x00c2\x00ca\x00c1\x00cb\x00c8\x00cd\x00ce" + "\x00cf\x00cc\x00d3\x00d4øff\x00d2\x00da\x00db\x00d9\x0131" + "\x02c6\x02dc\x00af\x02d8\x02d9\x02da\x00b8\x02dd\x02db\x02c7";
aggx_rfpx_data_CmapFormat0.UPPER_ROMANIAN = "\x007e\x0000\x00c4\x00c5\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x00e3\x00e5\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed\x00ec\x00ee\x00ef\x00f1\x00f3\x00f2\x00f4\x00f6\x00f5" + "\x00fa\x00f9\x00fb\x00fc 20\x00b0\x00a2\x00a3\x00a7 22" + "\x00b6\x00df\x00ae\x00a9!22\x00b4\x00a8\"60\x0102\x0218" + "\"1e\x00b1\"64\"65\x00a5\x00b5\"02\"11\"0f\x03c0" + "\"2b\x00aa\x00ba\x03a9\x0103\x0219\x00bf\x00a1\x00ac\"1a" + "\x0192\"48\"06\x00ab\x00bb 26\x00a0\x00c0\x00c3\x00d5" + "\x0152\x0153 13 14 1c 1d 18 19\x00f7%ca" + "\x00ff\x0178 44 ac 39 3a\x021a\x021b 21\x00b7" + " 1a 1e 30\x00c2\x00ca\x00c1\x00cb\x00c8\x00cd\x00ce" + "\x00cf\x00cc\x00d3\x00d4øff\x00d2\x00da\x00db\x00d9\x0131" + "\x02c6\x02dc\x00af\x02d8\x02d9\x02da\x00b8\x02dd\x02db\x02c7";
aggx_rfpx_data_CmapFormat0.UPPER_TURKISH = "\x007e\x0000\x00c4\x00c5\x00c7\x00c9\x00d1\x00d6\x00dc\x00e1" + "\x00e0\x00e2\x00e4\x00e3\x00e5\x00e7\x00e9\x00e8\x00ea\x00eb" + "\x00ed\x00ec\x00ee\x00ef\x00f1\x00f3\x00f2\x00f4\x00f6\x00f5" + "\x00fa\x00f9\x00fb\x00fc 20\x00b0\x00a2\x00a3\x00a7 22" + "\x00b6\x00df\x00ae\x00a9!22\x00b4\x00a8\"60\x00c6\x00d8" + "\"1e\x00b1\"64\"65\x00a5\x00b5\"02\"11\"0f\x03c0" + "\"2b\x00aa\x00ba\x03a9\x00e6\x00f8\x00bf\x00a1\x00ac\"1a" + "\x0192\"48\"06\x00ab\x00bb 26\x00a0\x00c0\x00c3\x00d5" + "\x0152\x0153 13 14 1c 1d 18 19\x00f7%ca" + "\x00ff\x0178\x011e\x011f\x0130\x0131\x015e\x015f 21\x00b7" + " 1a 1e 30\x00c2\x00ca\x00c1\x00cb\x00c8\x00cd\x00ce" + "\x00cf\x00cc\x00d3\x00d4øff\x00d2\x00da\x00db\x00d9øa0" + "\x02c6\x02dc\x00af\x02d8\x02d9\x02da\x00b8\x02dd\x02db\x02c7";
aggx_rfpx_data_GlyphRecordComp.ARG_1_AND_2_ARE_WORDS = 0;
aggx_rfpx_data_GlyphRecordComp.ARGS_ARE_XY_VALUES = 1;
aggx_rfpx_data_GlyphRecordComp.ROUND_XY_TO_GRID = 2;
aggx_rfpx_data_GlyphRecordComp.WE_HAVE_A_SCALE = 3;
aggx_rfpx_data_GlyphRecordComp.MORE_COMPONENTS = 5;
aggx_rfpx_data_GlyphRecordComp.WE_HAVE_AN_X_AND_Y_SCALE = 6;
aggx_rfpx_data_GlyphRecordComp.WE_HAVE_A_TWO_BY_TWO = 7;
aggx_rfpx_data_GlyphRecordComp.WE_HAVE_INSTRUCTIONS = 8;
aggx_rfpx_data_GlyphRecordComp.USE_MY_METRICS = 9;
aggx_rfpx_data_TTCHeader.TTCTag = 1953784678;
aggx_rfpx_data_TableTags.BASE = 1111577413;
aggx_rfpx_data_TableTags.CFF = 1128678944;
aggx_rfpx_data_TableTags.DSIG = 1146308935;
aggx_rfpx_data_TableTags.EBDT = 1161970772;
aggx_rfpx_data_TableTags.EBLC = 1161972803;
aggx_rfpx_data_TableTags.EBSC = 1161974595;
aggx_rfpx_data_TableTags.GDEF = 1195656518;
aggx_rfpx_data_TableTags.GPOS = 1196445523;
aggx_rfpx_data_TableTags.GSUB = 1196643650;
aggx_rfpx_data_TableTags.JSTF = 1246975046;
aggx_rfpx_data_TableTags.LTSH = 1280594760;
aggx_rfpx_data_TableTags.MMFX = 1296909912;
aggx_rfpx_data_TableTags.MMSD = 1296913220;
aggx_rfpx_data_TableTags.OS_2 = 1330851634;
aggx_rfpx_data_TableTags.PCLT = 1346587732;
aggx_rfpx_data_TableTags.VDMX = 1447316824;
aggx_rfpx_data_TableTags.cmap = 1668112752;
aggx_rfpx_data_TableTags.cvt = 1668707360;
aggx_rfpx_data_TableTags.fpgm = 1718642541;
aggx_rfpx_data_TableTags.fvar = 1719034226;
aggx_rfpx_data_TableTags.gasp = 1734439792;
aggx_rfpx_data_TableTags.glyf = 1735162214;
aggx_rfpx_data_TableTags.hdmx = 1751412088;
aggx_rfpx_data_TableTags.head = 1751474532;
aggx_rfpx_data_TableTags.hhea = 1751672161;
aggx_rfpx_data_TableTags.hmtx = 1752003704;
aggx_rfpx_data_TableTags.kern = 1801810542;
aggx_rfpx_data_TableTags.loca = 1819239265;
aggx_rfpx_data_TableTags.maxp = 1835104368;
aggx_rfpx_data_TableTags.$name = 1851878757;
aggx_rfpx_data_TableTags.prep = 1886545264;
aggx_rfpx_data_TableTags.post = 1886352244;
aggx_rfpx_data_TableTags.vhea = 1986553185;
aggx_rfpx_data_TableTags.vmtx = 1986884728;
aggx_typography_FontEngine.GAMMA = 1.0;
aggx_vectorial_CubicCurve.CURVE_INC = 0;
aggx_vectorial_CubicCurve.CURVE_DIV = 1;
aggx_vectorial_CubicCurveFitterDiv.CURVE_DISTANCE_EPSILON = 1e-30;
aggx_vectorial_CubicCurveFitterDiv.CURVE_COLLINEARITY_EPSILON = 1e-30;
aggx_vectorial_CubicCurveFitterDiv.CURVE_ANGLE_TOLERANCE_EPSILON = 0.01;
aggx_vectorial_CubicCurveFitterDiv.CURVE_RECURSION_LIMIT = 32;
aggx_vectorial_InnerJoin.BEVEL = 0;
aggx_vectorial_InnerJoin.MITER = 1;
aggx_vectorial_InnerJoin.JAG = 2;
aggx_vectorial_InnerJoin.ROUND = 3;
aggx_vectorial_LineCap.BUTT = 0;
aggx_vectorial_LineCap.SQUARE = 1;
aggx_vectorial_LineCap.ROUND = 2;
aggx_vectorial_LineJoin.MITER = 0;
aggx_vectorial_LineJoin.MITER_REVERT = 1;
aggx_vectorial_LineJoin.ROUND = 2;
aggx_vectorial_LineJoin.BEVEL = 3;
aggx_vectorial_LineJoin.MITER_ROUND = 4;
aggx_vectorial_PathCommands.STOP = 0;
aggx_vectorial_PathCommands.MOVE_TO = 1;
aggx_vectorial_PathCommands.LINE_TO = 2;
aggx_vectorial_PathCommands.CURVE3 = 3;
aggx_vectorial_PathCommands.CURVE4 = 4;
aggx_vectorial_PathCommands.CURVEN = 5;
aggx_vectorial_PathCommands.CATROM = 6;
aggx_vectorial_PathCommands.UBSPLINE = 7;
aggx_vectorial_PathCommands.END_POLY = 15;
aggx_vectorial_PathCommands.MASK = 15;
aggx_vectorial_PathFlags.NONE = 0;
aggx_vectorial_PathFlags.CCW = 16;
aggx_vectorial_PathFlags.CW = 32;
aggx_vectorial_PathFlags.CLOSE = 64;
aggx_vectorial_PathFlags.MASK = 240;
aggx_vectorial_QuadCurve.CURVE_INC = 0;
aggx_vectorial_QuadCurve.CURVE_DIV = 1;
aggx_vectorial_QuadCurveFitterDiv.CURVE_DISTANCE_EPSILON = 1e-30;
aggx_vectorial_QuadCurveFitterDiv.CURVE_COLLINEARITY_EPSILON = 1e-30;
aggx_vectorial_QuadCurveFitterDiv.CURVE_ANGLE_TOLERANCE_EPSILON = 0.01;
aggx_vectorial_QuadCurveFitterDiv.CURVE_RECURSION_LIMIT = 32;
aggx_vectorial_converters_ConvAdaptorVcgen.INITIAL = 0;
aggx_vectorial_converters_ConvAdaptorVcgen.ACCUMULATE = 1;
aggx_vectorial_converters_ConvAdaptorVcgen.GENERATE = 2;
aggx_vectorial_generators_VcgenStroke.INITIAL = 0;
aggx_vectorial_generators_VcgenStroke.READY = 1;
aggx_vectorial_generators_VcgenStroke.CAP1 = 2;
aggx_vectorial_generators_VcgenStroke.CAP2 = 3;
aggx_vectorial_generators_VcgenStroke.OUTLINE1 = 4;
aggx_vectorial_generators_VcgenStroke.CLOSE_FIRST = 5;
aggx_vectorial_generators_VcgenStroke.OUTLINE2 = 6;
aggx_vectorial_generators_VcgenStroke.OUT_VERTICES = 7;
aggx_vectorial_generators_VcgenStroke.END_POLY1 = 8;
aggx_vectorial_generators_VcgenStroke.END_POLY2 = 9;
aggx_vectorial_generators_VcgenStroke.STOP = 10;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
types_Color4F.COLOR_EPSILON = 0.00390625;
types_Data.SIZE_OF_INT8 = 1;
types_Data.SIZE_OF_UINT8 = 1;
types_Data.SIZE_OF_INT16 = 2;
types_Data.SIZE_OF_UINT16 = 2;
types_Data.SIZE_OF_INT32 = 4;
types_Data.SIZE_OF_UINT32 = 4;
types_Data.SIZE_OF_FLOAT32 = 4;
types_Data.SIZE_OF_FLOAT64 = 8;
types_Vector2.distanceVector2 = new types_Vector2();
ExampleFontEngine.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
